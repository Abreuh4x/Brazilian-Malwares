// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.Helper.PlatformHelper
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Management;
using System.Text.RegularExpressions;

namespace VERMELHO265MONARCA.Core.Helper
{
  public static class PlatformHelper
  {
    static PlatformHelper()
    {
      try
      {
        PlatformHelper.Win32NT = Environment.OSVersion.Platform == PlatformID.Win32NT;
        PlatformHelper.XpOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version.Major >= 5;
        PlatformHelper.VistaOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version.Major >= 6;
        PlatformHelper.SevenOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 1);
        PlatformHelper.EightOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 2, 9200);
        PlatformHelper.EightPointOneOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(6, 3);
        PlatformHelper.TenOrHigher = PlatformHelper.Win32NT && Environment.OSVersion.Version >= new Version(10, 0);
        PlatformHelper.RunningOnMono = Type.GetType("Mono.Runtime") != null;
        PlatformHelper.Name = "Unknown OS";
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT Caption FROM Win32_OperatingSystem"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              PlatformHelper.Name = enumerator.Current["Caption"].ToString();
          }
        }
        PlatformHelper.Name = Regex.Replace(PlatformHelper.Name, "^.*(?=Windows)", "").TrimEnd().TrimStart();
        PlatformHelper.FullName = string.Format("{0} {1} Bit", (object) PlatformHelper.Name, (object) (PlatformHelper.Is64Bit ? 64 : 32));
      }
      catch (Exception ex)
      {
      }
    }

    public static string FullName { get; private set; }

    public static string Name { get; private set; }

    public static bool Is64Bit { get; private set; }

    public static bool RunningOnMono { get; private set; }

    public static bool Win32NT { get; private set; }

    public static bool XpOrHigher { get; private set; }

    public static bool VistaOrHigher { get; private set; }

    public static bool SevenOrHigher { get; private set; }

    public static bool EightOrHigher { get; private set; }

    public static bool EightPointOneOrHigher { get; private set; }

    public static bool TenOrHigher { get; private set; }
  }
}
