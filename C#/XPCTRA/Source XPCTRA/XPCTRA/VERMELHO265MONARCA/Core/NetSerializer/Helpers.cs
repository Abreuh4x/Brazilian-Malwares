// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.NetSerializer.Helpers
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;

namespace VERMELHO265MONARCA.Core.NetSerializer
{
  internal static class Helpers
  {
    public static readonly ConstructorInfo ExceptionCtorInfo = typeof (Exception).GetConstructor(BindingFlags.Instance | BindingFlags.Public, (Binder) null, new Type[0], (ParameterModifier[]) null);

    public static IEnumerable<FieldInfo> GetFieldInfos(Type type)
    {
      Debug.Assert(type.IsSerializable);
      IEnumerable<FieldInfo> source = ((IEnumerable<FieldInfo>) type.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)).Where<FieldInfo>((Func<FieldInfo, bool>) (fi => (fi.Attributes & FieldAttributes.NotSerialized) == FieldAttributes.PrivateScope));
      StringComparer ordinal = StringComparer.Ordinal;
      IOrderedEnumerable<FieldInfo> orderedEnumerable = source.OrderBy<FieldInfo, string>((Func<FieldInfo, string>) (f => f.Name), (IComparer<string>) ordinal);
      if (type.BaseType == null)
        return (IEnumerable<FieldInfo>) orderedEnumerable;
      return Helpers.GetFieldInfos(type.BaseType).Concat<FieldInfo>((IEnumerable<FieldInfo>) orderedEnumerable);
    }

    public static DynamicMethod GenerateDynamicSerializerStub(Type type)
    {
      DynamicMethod dynamicMethod = new DynamicMethod("Serialize", (Type) null, new Type[3]
      {
        typeof (Serializer),
        typeof (Stream),
        type
      }, typeof (Serializer), true);
      dynamicMethod.DefineParameter(1, ParameterAttributes.None, "serializer");
      dynamicMethod.DefineParameter(2, ParameterAttributes.None, "stream");
      dynamicMethod.DefineParameter(3, ParameterAttributes.None, "value");
      return dynamicMethod;
    }

    public static DynamicMethod GenerateDynamicDeserializerStub(Type type)
    {
      DynamicMethod dynamicMethod = new DynamicMethod("Deserialize", (Type) null, new Type[3]
      {
        typeof (Serializer),
        typeof (Stream),
        type.MakeByRefType()
      }, typeof (Serializer), true);
      dynamicMethod.DefineParameter(1, ParameterAttributes.None, "serializer");
      dynamicMethod.DefineParameter(2, ParameterAttributes.None, "stream");
      dynamicMethod.DefineParameter(3, ParameterAttributes.Out, "value");
      return dynamicMethod;
    }
  }
}
