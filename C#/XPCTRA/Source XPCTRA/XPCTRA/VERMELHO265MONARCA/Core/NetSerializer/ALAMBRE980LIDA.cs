// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.NetSerializer.ALAMBRE980LIDA
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

namespace VERMELHO265MONARCA.Core.NetSerializer
{
  public static class ALAMBRE980LIDA
  {
    private static readonly byte[] s_emptyByteArray = new byte[0];
    [ThreadStatic]
    private static ALAMBRE980LIDA.StringHelper s_stringHelper;

    public static MethodInfo GetWritePrimitive(Type type)
    {
      return typeof (ALAMBRE980LIDA).GetMethod("WritePrimitive", BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding, (Binder) null, new Type[2]
      {
        typeof (Stream),
        type
      }, (ParameterModifier[]) null);
    }

    public static MethodInfo GetReaderPrimitive(Type type)
    {
      return typeof (ALAMBRE980LIDA).GetMethod("ReadPrimitive", BindingFlags.Static | BindingFlags.Public | BindingFlags.ExactBinding, (Binder) null, new Type[2]
      {
        typeof (Stream),
        type.MakeByRefType()
      }, (ParameterModifier[]) null);
    }

    private static uint EncodeZigZag32(int n)
    {
      return (uint) (n << 1 ^ n >> 31);
    }

    private static ulong EncodeZigZag64(long n)
    {
      return (ulong) (n << 1 ^ n >> 63);
    }

    private static int DecodeZigZag32(uint n)
    {
      return (int) (n >> 1) ^ -((int) n & 1);
    }

    private static long DecodeZigZag64(ulong n)
    {
      return (long) (n >> 1) ^ -((long) n & 1L);
    }

    private static uint ReadVarint32(Stream stream)
    {
      int num1 = 0;
      int num2 = 0;
      while (num2 < 32)
      {
        int num3 = stream.ReadByte();
        if (num3 == -1)
          throw new EndOfStreamException();
        num1 |= (num3 & (int) sbyte.MaxValue) << num2;
        if ((num3 & 128) == 0)
          return (uint) num1;
        num2 += 7;
      }
      throw new InvalidDataException();
    }

    private static void WriteVarint32(Stream stream, uint value)
    {
      while (value >= 128U)
      {
        stream.WriteByte((byte) (value | 128U));
        value >>= 7;
      }
      stream.WriteByte((byte) value);
    }

    private static ulong ReadVarint64(Stream stream)
    {
      long num1 = 0;
      int num2 = 0;
      while (num2 < 64)
      {
        int num3 = stream.ReadByte();
        if (num3 == -1)
          throw new EndOfStreamException();
        num1 |= (long) (num3 & (int) sbyte.MaxValue) << num2;
        if ((num3 & 128) == 0)
          return (ulong) num1;
        num2 += 7;
      }
      throw new InvalidDataException();
    }

    private static void WriteVarint64(Stream stream, ulong value)
    {
      while (value >= 128UL)
      {
        stream.WriteByte((byte) (value | 128UL));
        value >>= 7;
      }
      stream.WriteByte((byte) value);
    }

    public static void WritePrimitive(Stream stream, bool value)
    {
      stream.WriteByte(value ? (byte) 1 : (byte) 0);
    }

    public static void ReadPrimitive(Stream stream, out bool value)
    {
      int num = stream.ReadByte();
      value = (uint) num > 0U;
    }

    public static void WritePrimitive(Stream stream, byte value)
    {
      stream.WriteByte(value);
    }

    public static void ReadPrimitive(Stream stream, out byte value)
    {
      value = (byte) stream.ReadByte();
    }

    public static void WritePrimitive(Stream stream, sbyte value)
    {
      stream.WriteByte((byte) value);
    }

    public static void ReadPrimitive(Stream stream, out sbyte value)
    {
      value = (sbyte) stream.ReadByte();
    }

    public static void WritePrimitive(Stream stream, char value)
    {
      ALAMBRE980LIDA.WriteVarint32(stream, (uint) value);
    }

    public static void ReadPrimitive(Stream stream, out char value)
    {
      value = (char) ALAMBRE980LIDA.ReadVarint32(stream);
    }

    public static void WritePrimitive(Stream stream, ushort value)
    {
      ALAMBRE980LIDA.WriteVarint32(stream, (uint) value);
    }

    public static void ReadPrimitive(Stream stream, out ushort value)
    {
      value = (ushort) ALAMBRE980LIDA.ReadVarint32(stream);
    }

    public static void WritePrimitive(Stream stream, short value)
    {
      ALAMBRE980LIDA.WriteVarint32(stream, ALAMBRE980LIDA.EncodeZigZag32((int) value));
    }

    public static void ReadPrimitive(Stream stream, out short value)
    {
      value = (short) ALAMBRE980LIDA.DecodeZigZag32(ALAMBRE980LIDA.ReadVarint32(stream));
    }

    public static void WritePrimitive(Stream stream, uint value)
    {
      ALAMBRE980LIDA.WriteVarint32(stream, value);
    }

    public static void ReadPrimitive(Stream stream, out uint value)
    {
      value = ALAMBRE980LIDA.ReadVarint32(stream);
    }

    public static void WritePrimitive(Stream stream, int value)
    {
      ALAMBRE980LIDA.WriteVarint32(stream, ALAMBRE980LIDA.EncodeZigZag32(value));
    }

    public static void ReadPrimitive(Stream stream, out int value)
    {
      value = ALAMBRE980LIDA.DecodeZigZag32(ALAMBRE980LIDA.ReadVarint32(stream));
    }

    public static void WritePrimitive(Stream stream, ulong value)
    {
      ALAMBRE980LIDA.WriteVarint64(stream, value);
    }

    public static void ReadPrimitive(Stream stream, out ulong value)
    {
      value = ALAMBRE980LIDA.ReadVarint64(stream);
    }

    public static void WritePrimitive(Stream stream, long value)
    {
      ALAMBRE980LIDA.WriteVarint64(stream, ALAMBRE980LIDA.EncodeZigZag64(value));
    }

    public static void ReadPrimitive(Stream stream, out long value)
    {
      value = ALAMBRE980LIDA.DecodeZigZag64(ALAMBRE980LIDA.ReadVarint64(stream));
    }

    public static unsafe void WritePrimitive(Stream stream, float value)
    {
      uint num = *(uint*) &value;
      ALAMBRE980LIDA.WriteVarint32(stream, num);
    }

    public static unsafe void ReadPrimitive(Stream stream, out float value)
    {
      uint num = ALAMBRE980LIDA.ReadVarint32(stream);
      value = *(float*) &num;
    }

    public static unsafe void WritePrimitive(Stream stream, double value)
    {
      ulong num = (ulong) *(long*) &value;
      ALAMBRE980LIDA.WriteVarint64(stream, num);
    }

    public static unsafe void ReadPrimitive(Stream stream, out double value)
    {
      ulong num = ALAMBRE980LIDA.ReadVarint64(stream);
      value = *(double*) &num;
    }

    public static void WritePrimitive(Stream stream, DateTime value)
    {
      long binary = value.ToBinary();
      ALAMBRE980LIDA.WritePrimitive(stream, binary);
    }

    public static void ReadPrimitive(Stream stream, out DateTime value)
    {
      long dateData;
      ALAMBRE980LIDA.ReadPrimitive(stream, out dateData);
      value = DateTime.FromBinary(dateData);
    }

    public static unsafe void WritePrimitive(Stream stream, string value)
    {
      if (value == null)
        ALAMBRE980LIDA.WritePrimitive(stream, 0U);
      else if (value.Length == 0)
      {
        ALAMBRE980LIDA.WritePrimitive(stream, 1U);
      }
      else
      {
        ALAMBRE980LIDA.StringHelper stringHelper = ALAMBRE980LIDA.s_stringHelper;
        if (stringHelper == null)
          ALAMBRE980LIDA.s_stringHelper = stringHelper = new ALAMBRE980LIDA.StringHelper();
        Encoder encoder = stringHelper.Encoder;
        byte[] byteBuffer = stringHelper.ByteBuffer;
        int length = value.Length;
        string str1 = value;
        char* chars = (char*) str1;
        if ((IntPtr) chars != IntPtr.Zero)
          chars += RuntimeHelpers.OffsetToStringData;
        int byteCount = encoder.GetByteCount(chars, length, true);
        str1 = (string) null;
        ALAMBRE980LIDA.WritePrimitive(stream, (uint) (byteCount + 1));
        ALAMBRE980LIDA.WritePrimitive(stream, (uint) length);
        int num = 0;
        bool completed = false;
        while (!completed)
        {
          string str2 = value;
          char* chPtr = (char*) str2;
          if ((IntPtr) chPtr != IntPtr.Zero)
            chPtr += RuntimeHelpers.OffsetToStringData;
          int charsUsed;
          int bytesUsed;
          fixed (byte* bytes = byteBuffer)
            encoder.Convert(chPtr + num, length - num, bytes, byteBuffer.Length, true, out charsUsed, out bytesUsed, out completed);
          str2 = (string) null;
          stream.Write(byteBuffer, 0, bytesUsed);
          num += charsUsed;
        }
      }
    }

    public static void ReadPrimitive(Stream stream, out string value)
    {
      uint num1;
      ALAMBRE980LIDA.ReadPrimitive(stream, out num1);
      if ((int) num1 == 0)
        value = (string) null;
      else if ((int) num1 == 1)
      {
        value = string.Empty;
      }
      else
      {
        uint num2 = num1 - 1U;
        uint num3;
        ALAMBRE980LIDA.ReadPrimitive(stream, out num3);
        ALAMBRE980LIDA.StringHelper stringHelper = ALAMBRE980LIDA.s_stringHelper;
        if (stringHelper == null)
          ALAMBRE980LIDA.s_stringHelper = stringHelper = new ALAMBRE980LIDA.StringHelper();
        Decoder decoder = stringHelper.Decoder;
        byte[] byteBuffer = stringHelper.ByteBuffer;
        char[] chars = num3 > 128U ? new char[(int) num3] : stringHelper.CharBuffer;
        int val2 = (int) num2;
        int charIndex = 0;
        while (val2 > 0)
        {
          int num4 = stream.Read(byteBuffer, 0, Math.Min(byteBuffer.Length, val2));
          if (num4 == 0)
            throw new EndOfStreamException();
          val2 -= num4;
          bool flush = val2 == 0;
          bool completed = false;
          int byteIndex = 0;
          while (!completed)
          {
            int bytesUsed;
            int charsUsed;
            decoder.Convert(byteBuffer, byteIndex, num4 - byteIndex, chars, charIndex, (int) num3 - charIndex, flush, out bytesUsed, out charsUsed, out completed);
            byteIndex += bytesUsed;
            charIndex += charsUsed;
          }
        }
        value = new string(chars, 0, (int) num3);
      }
    }

    public static void WritePrimitive(Stream stream, byte[] value)
    {
      if (value == null)
      {
        ALAMBRE980LIDA.WritePrimitive(stream, 0U);
      }
      else
      {
        ALAMBRE980LIDA.WritePrimitive(stream, (uint) (value.Length + 1));
        stream.Write(value, 0, value.Length);
      }
    }

    public static void ReadPrimitive(Stream stream, out byte[] value)
    {
      uint num1;
      ALAMBRE980LIDA.ReadPrimitive(stream, out num1);
      if ((int) num1 == 0)
        value = (byte[]) null;
      else if ((int) num1 == 1)
      {
        value = ALAMBRE980LIDA.s_emptyByteArray;
      }
      else
      {
        uint num2 = num1 - 1U;
        value = new byte[(int) num2];
        int offset = 0;
        while ((long) offset < (long) num2)
        {
          int num3 = stream.Read(value, offset, (int) num2 - offset);
          if (num3 == 0)
            throw new EndOfStreamException();
          offset += num3;
        }
      }
    }

    private sealed class StringHelper
    {
      public const int BYTEBUFFERLEN = 256;
      public const int CHARBUFFERLEN = 128;
      private Encoder m_encoder;
      private Decoder m_decoder;
      private byte[] m_byteBuffer;
      private char[] m_charBuffer;

      public StringHelper()
      {
        this.Encoding = new UTF8Encoding(false, true);
      }

      public UTF8Encoding Encoding { get; private set; }

      public Encoder Encoder
      {
        get
        {
          if (this.m_encoder == null)
            this.m_encoder = this.Encoding.GetEncoder();
          return this.m_encoder;
        }
      }

      public Decoder Decoder
      {
        get
        {
          if (this.m_decoder == null)
            this.m_decoder = this.Encoding.GetDecoder();
          return this.m_decoder;
        }
      }

      public byte[] ByteBuffer
      {
        get
        {
          if (this.m_byteBuffer == null)
            this.m_byteBuffer = new byte[256];
          return this.m_byteBuffer;
        }
      }

      public char[] CharBuffer
      {
        get
        {
          if (this.m_charBuffer == null)
            this.m_charBuffer = new char[128];
          return this.m_charBuffer;
        }
      }
    }
  }
}
