// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.MouseKeyHook.KeyPressEventArgsExt
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using VERMELHO265MONARCA.Core.MouseKeyHook.WinApi;

namespace VERMELHO265MONARCA.Core.MouseKeyHook
{
  public class KeyPressEventArgsExt : KeyPressEventArgs
  {
    internal KeyPressEventArgsExt(char keyChar, int timestamp)
      : base(keyChar)
    {
      this.IsNonChar = (int) keyChar == 0;
      this.Timestamp = timestamp;
    }

    public KeyPressEventArgsExt(char keyChar)
      : this(keyChar, Environment.TickCount)
    {
    }

    public bool IsNonChar { get; private set; }

    public int Timestamp { get; private set; }

    internal static IEnumerable<KeyPressEventArgsExt> FromRawDataApp(CallbackData data)
    {
      IntPtr wParam = data.WParam;
      IntPtr lParam = data.LParam;
      uint flags = (uint) lParam.ToInt64();
      bool wasKeyDown = (flags & 1073741824U) > 0U;
      bool isKeyReleased = (flags & 2147483648U) > 0U;
      if (wasKeyDown || isKeyReleased)
      {
        int virtualKeyCode = (int) wParam;
        int scanCode = checked ((int) (uint) (unchecked ((int) flags) & 16711680));
        char[] chars;
        KeyboardNativeMethods.TryGetCharFromKeyboardState(virtualKeyCode, scanCode, 0, out chars);
        if (chars != null)
        {
          char[] chArray = chars;
          for (int index = 0; index < chArray.Length; ++index)
          {
            char ch = chArray[index];
            yield return new KeyPressEventArgsExt(ch);
          }
          chArray = (char[]) null;
        }
      }
    }

    internal static IEnumerable<KeyPressEventArgsExt> FromRawDataGlobal(CallbackData data)
    {
      IntPtr wParam = data.WParam;
      IntPtr lParam = data.LParam;
      if ((int) wParam == 256)
      {
        KeyboardHookStruct keyboardHookStruct = (KeyboardHookStruct) Marshal.PtrToStructure(lParam, typeof (KeyboardHookStruct));
        int virtualKeyCode = keyboardHookStruct.VirtualKeyCode;
        int scanCode = keyboardHookStruct.ScanCode;
        int fuState = keyboardHookStruct.Flags;
        if (virtualKeyCode == 231)
        {
          char ch = (char) scanCode;
          yield return new KeyPressEventArgsExt(ch, keyboardHookStruct.Time);
        }
        else
        {
          char[] chars;
          KeyboardNativeMethods.TryGetCharFromKeyboardState(virtualKeyCode, scanCode, fuState, out chars);
          if (chars != null)
          {
            char[] chArray = chars;
            for (int index = 0; index < chArray.Length; ++index)
            {
              char current = chArray[index];
              yield return new KeyPressEventArgsExt(current, keyboardHookStruct.Time);
            }
            chArray = (char[]) null;
            chars = (char[]) null;
          }
        }
      }
    }
  }
}
