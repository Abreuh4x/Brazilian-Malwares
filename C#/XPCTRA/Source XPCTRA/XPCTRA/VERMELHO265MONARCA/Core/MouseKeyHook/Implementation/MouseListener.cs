// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.MouseKeyHook.Implementation.MouseListener
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Windows.Forms;
using VERMELHO265MONARCA.Core.MouseKeyHook.WinApi;

namespace VERMELHO265MONARCA.Core.MouseKeyHook.Implementation
{
  internal abstract class MouseListener : BaseListener, IMouseEvents
  {
    private readonly ButtonSet m_DoubleDown;
    private readonly ButtonSet m_SingleDown;
    private Point m_PreviousPosition;

    protected MouseListener(Subscribe subscribe)
      : base(subscribe)
    {
      this.m_PreviousPosition = new Point(-1, -1);
      this.m_DoubleDown = new ButtonSet();
      this.m_SingleDown = new ButtonSet();
    }

    protected override bool Callback(CallbackData data)
    {
      MouseEventExtArgs eventArgs = this.GetEventArgs(data);
      if (eventArgs.IsMouseKeyDown)
        this.ProcessDown(ref eventArgs);
      if (eventArgs.IsMouseKeyUp)
        this.ProcessUp(ref eventArgs);
      if (eventArgs.WheelScrolled)
        this.ProcessWheel(ref eventArgs);
      if (this.HasMoved(eventArgs.Point))
        this.ProcessMove(ref eventArgs);
      return !eventArgs.Handled;
    }

    protected abstract MouseEventExtArgs GetEventArgs(CallbackData data);

    protected virtual void ProcessWheel(ref MouseEventExtArgs e)
    {
      this.OnWheel((MouseEventArgs) e);
    }

    protected virtual void ProcessDown(ref MouseEventExtArgs e)
    {
      this.OnDown((MouseEventArgs) e);
      this.OnDownExt(e);
      if (e.Handled)
        return;
      if (e.Clicks == 2)
        this.m_DoubleDown.Add(e.Button);
      if (e.Clicks != 1)
        return;
      this.m_SingleDown.Add(e.Button);
    }

    protected virtual void ProcessUp(ref MouseEventExtArgs e)
    {
      if (this.m_SingleDown.Contains(e.Button))
      {
        this.OnUp((MouseEventArgs) e);
        this.OnUpExt(e);
        if (e.Handled)
          return;
        this.OnClick((MouseEventArgs) e);
        this.m_SingleDown.Remove(e.Button);
      }
      if (!this.m_DoubleDown.Contains(e.Button))
        return;
      e = e.ToDoubleClickEventArgs();
      this.OnUp((MouseEventArgs) e);
      this.OnDoubleClick((MouseEventArgs) e);
      this.m_DoubleDown.Remove(e.Button);
    }

    private void ProcessMove(ref MouseEventExtArgs e)
    {
      this.m_PreviousPosition = e.Point;
      this.OnMove((MouseEventArgs) e);
      this.OnMoveExt(e);
    }

    private bool HasMoved(Point actualPoint)
    {
      return this.m_PreviousPosition != actualPoint;
    }

    public event MouseEventHandler MouseMove;

    public event EventHandler<MouseEventExtArgs> MouseMoveExt;

    public event MouseEventHandler MouseClick;

    public event MouseEventHandler MouseDown;

    public event EventHandler<MouseEventExtArgs> MouseDownExt;

    public event MouseEventHandler MouseUp;

    public event EventHandler<MouseEventExtArgs> MouseUpExt;

    public event MouseEventHandler MouseWheel;

    public event MouseEventHandler MouseDoubleClick;

    protected virtual void OnMove(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseMove = this.MouseMove;
      if (mouseMove == null)
        return;
      mouseMove((object) this, e);
    }

    protected virtual void OnMoveExt(MouseEventExtArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      EventHandler<MouseEventExtArgs> mouseMoveExt = this.MouseMoveExt;
      if (mouseMoveExt == null)
        return;
      mouseMoveExt((object) this, e);
    }

    protected virtual void OnClick(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseClick = this.MouseClick;
      if (mouseClick == null)
        return;
      mouseClick((object) this, e);
    }

    protected virtual void OnDown(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseDown = this.MouseDown;
      if (mouseDown == null)
        return;
      mouseDown((object) this, e);
    }

    protected virtual void OnDownExt(MouseEventExtArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      EventHandler<MouseEventExtArgs> mouseDownExt = this.MouseDownExt;
      if (mouseDownExt == null)
        return;
      mouseDownExt((object) this, e);
    }

    protected virtual void OnUp(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseUp = this.MouseUp;
      if (mouseUp == null)
        return;
      mouseUp((object) this, e);
    }

    protected virtual void OnUpExt(MouseEventExtArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      EventHandler<MouseEventExtArgs> mouseUpExt = this.MouseUpExt;
      if (mouseUpExt == null)
        return;
      mouseUpExt((object) this, e);
    }

    protected virtual void OnWheel(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseWheel = this.MouseWheel;
      if (mouseWheel == null)
        return;
      mouseWheel((object) this, e);
    }

    protected virtual void OnDoubleClick(MouseEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      MouseEventHandler mouseDoubleClick = this.MouseDoubleClick;
      if (mouseDoubleClick == null)
        return;
      mouseDoubleClick((object) this, e);
    }
  }
}
