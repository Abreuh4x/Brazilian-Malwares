// Decompiled with JetBrains decompiler
// Type: VERMELHO265MONARCA.Core.MouseKeyHook.MouseEventExtArgs
// Assembly: madre, Version=1.1.2.3, Culture=neutral, PublicKeyToken=null
// MVID: E3E81F5F-5E79-4C7B-AA1D-713B5D376685
// Assembly location: C:\Users\Marcos Abreu\Documents\XPCTRA\idfptray.exe

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using VERMELHO265MONARCA.Core.MouseKeyHook.WinApi;

namespace VERMELHO265MONARCA.Core.MouseKeyHook
{
  public class MouseEventExtArgs : MouseEventArgs
  {
    internal MouseEventExtArgs(MouseButtons buttons, int clicks, Point point, int delta, int timestamp, bool isMouseKeyDown, bool isMouseKeyUp)
      : base(buttons, clicks, point.X, point.Y, delta)
    {
      this.IsMouseKeyDown = isMouseKeyDown;
      this.IsMouseKeyUp = isMouseKeyUp;
      this.Timestamp = timestamp;
    }

    public bool Handled { get; set; }

    public bool WheelScrolled
    {
      get
      {
        return (uint) this.Delta > 0U;
      }
    }

    public bool Clicked
    {
      get
      {
        return this.Clicks > 0;
      }
    }

    public bool IsMouseKeyDown { get; private set; }

    public bool IsMouseKeyUp { get; private set; }

    public int Timestamp { get; private set; }

    internal Point Point
    {
      get
      {
        return new Point(this.X, this.Y);
      }
    }

    internal static MouseEventExtArgs FromRawDataApp(CallbackData data)
    {
      return MouseEventExtArgs.FromRawDataUniversal(data.WParam, ((AppMouseStruct) Marshal.PtrToStructure(data.LParam, typeof (AppMouseStruct))).ToMouseStruct());
    }

    internal static MouseEventExtArgs FromRawDataGlobal(CallbackData data)
    {
      return MouseEventExtArgs.FromRawDataUniversal(data.WParam, (MouseStruct) Marshal.PtrToStructure(data.LParam, typeof (MouseStruct)));
    }

    private static MouseEventExtArgs FromRawDataUniversal(IntPtr wParam, MouseStruct mouseInfo)
    {
      MouseButtons buttons = MouseButtons.None;
      short num1 = 0;
      int clicks = 0;
      bool isMouseKeyDown = false;
      bool isMouseKeyUp = false;
      long num2 = (long) wParam - 513L;
      if ((ulong) num2 <= 13UL)
      {
        switch ((uint) num2)
        {
          case 0:
            isMouseKeyDown = true;
            buttons = MouseButtons.Left;
            clicks = 1;
            break;
          case 1:
            isMouseKeyUp = true;
            buttons = MouseButtons.Left;
            clicks = 1;
            break;
          case 2:
            isMouseKeyDown = true;
            buttons = MouseButtons.Left;
            clicks = 2;
            break;
          case 3:
            isMouseKeyDown = true;
            buttons = MouseButtons.Right;
            clicks = 1;
            break;
          case 4:
            isMouseKeyUp = true;
            buttons = MouseButtons.Right;
            clicks = 1;
            break;
          case 5:
            isMouseKeyDown = true;
            buttons = MouseButtons.Right;
            clicks = 2;
            break;
          case 6:
            isMouseKeyDown = true;
            buttons = MouseButtons.Middle;
            clicks = 1;
            break;
          case 7:
            isMouseKeyUp = true;
            buttons = MouseButtons.Middle;
            clicks = 1;
            break;
          case 8:
            isMouseKeyDown = true;
            buttons = MouseButtons.Middle;
            clicks = 2;
            break;
          case 9:
            num1 = mouseInfo.MouseData;
            break;
          case 10:
            buttons = (int) mouseInfo.MouseData == 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
            isMouseKeyDown = true;
            clicks = 1;
            break;
          case 11:
            buttons = (int) mouseInfo.MouseData == 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
            isMouseKeyUp = true;
            clicks = 1;
            break;
          case 12:
            isMouseKeyDown = true;
            buttons = (int) mouseInfo.MouseData == 1 ? MouseButtons.XButton1 : MouseButtons.XButton2;
            clicks = 2;
            break;
          case 13:
            num1 = mouseInfo.MouseData;
            break;
        }
      }
      return new MouseEventExtArgs(buttons, clicks, mouseInfo.Point, (int) num1, mouseInfo.Timestamp, isMouseKeyDown, isMouseKeyUp);
    }

    internal MouseEventExtArgs ToDoubleClickEventArgs()
    {
      return new MouseEventExtArgs(this.Button, 2, this.Point, this.Delta, this.Timestamp, this.IsMouseKeyDown, this.IsMouseKeyUp);
    }
  }
}
