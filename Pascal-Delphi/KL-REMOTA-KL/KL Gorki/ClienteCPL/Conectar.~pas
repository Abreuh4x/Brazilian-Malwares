{

        Esta source foi criado por Maickonn Richard.

        A distribuição desta source é privada!

        NÃO ME RESPONSABILIZO PELO MAU USO DESTA SOURCE.

}

unit Conectar;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, XPMan, ScktComp, ComCtrls, zLibEx, LH5Unit, StreamManager, Registry, SndKey32,
  ExtCtrls;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Label3: TLabel;
    Edit3: TEdit;
    Button1: TButton;
    XPManifest1: TXPManifest;
    CS1: TClientSocket;
    StatusBar1: TStatusBar;
    CS2: TClientSocket;
    Label4: TLabel;
    Edit4: TEdit;
    CS3: TClientSocket;
    CheckBox1: TCheckBox;
    Timer1: TTimer;
    Timer2: TTimer;
    procedure Button1Click(Sender: TObject);
    procedure CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure Timer1Timer(Sender: TObject);
    procedure CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
    procedure Timer2Timer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  iSendCount:integer;
  MyFirstBmp,MySecondBmp,MyCompareBmp,PackStream:TMemoryStream;
  RecebendoDados: Boolean;

implementation

{$R *.dfm}


function Processador: String;
var
regi : TRegistry; s : string;
begin
   regi:=tRegistry.Create;
   With Regi do
   Begin
     rootKey:=HKEY_LOCAL_MACHINE;
     OpenKey('HARDWARE\DESCRIPTION\System\CentralProcessor\0',false);
     s:=ReadString('ProcessorNameString');
     CloseKey;
     result := Trim(s);
   end;
end;

function GetSOComputer: string;
var
  Reg: TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    if Reg.OpenKey('SOFTWARE\Microsoft\Windows NT\CurrentVersion', False) then
    begin
      Result := Reg.ReadString('ProductName');
      Reg.CloseKey;
    end;
  finally
    Reg.Free;
  end;
end;


function CompressStream(SrcStream: TMemoryStream):boolean;
var
  InputStream,OutputStream :TMemoryStream;
  //CompressionStream :TZcompressionStream;
  inbuffer,outbuffer :Pointer;
  count,outcount :longint;
begin
  result := false;
  if not assigned(SrcStream) then exit;

    InputStream := TMemoryStream.Create;
    OutputStream := TMemoryStream.Create;

    //CompressionStream := TZCompressionStream.Create(OutputStream,zcFastest);
  try
    InputStream.LoadFromStream(SrcStream);
    count := inputstream.Size;
    getmem(inbuffer,count);
    Inputstream.ReadBuffer(inbuffer^,count);
    //CompressionStream.Write(buffer,count);
    zcompress(inbuffer,count,outbuffer,outcount,zcMax);
    //CompressionStream.CopyFrom(InputStream,0);
    //Outputstream.LoadFromStream(Inputstream);
    outputstream.Write(outbuffer^,outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    result :=true;
  finally
    //CompressionStream.Free;
    InputStream.Free;
    OutputStream.Free;
  end;
end;


procedure TForm1.Button1Click(Sender: TObject);
begin
  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;
  StatusBar1.Panels.Items[1].Text := 'Conectando...';
  CS1.Port := strToInt(Edit2.Text);
  CS1.Host := Edit1.Text;
  CS1.Active := true;
  if CheckBox1.Checked then
    Timer1.Enabled := true
  else
    Timer1.Enabled := false;
end;

procedure TForm1.CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  StatusBar1.Panels.Items[1].Text := 'Desconectado';
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  Edit4.Enabled := true;
  Timer2.Enabled := false;
  CS2.Active := false;
  CS3.Active := false;
end;

procedure TForm1.CS1Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  StatusBar1.Panels.Items[1].Text := 'Erro ao conectar';
  ErrorCode := 0;
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  Edit4.Enabled := true;
  Timer2.Enabled := false;
  CS2.Active := false;
  CS3.Active := false;
end;

procedure TForm1.CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  CS2.Host := CS1.Host;
  CS2.Port := CS1.Port;
  //CS2.Active := true;

  CS3.Host := CS1.Host;
  CS3.Port := CS1.Port;
  //CS3.Active := true;


  MyFirstBmp:=TMemoryStream.Create;
  MySecondBmp:=TMemoryStream.Create;
  MyCompareBmp:=TMemoryStream.Create;
  PackStream:=TMemoryStream.Create;
  iSendCount:=0;
  StatusBar1.Panels.Items[1].Text := 'Conectado';
  Timer2.Enabled := true;

  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;

  Sleep(1000);
  Socket.SendText('<|PRINCIPAL|>');
end;

procedure TForm1.CS2Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
end;

procedure TForm1.CS2Read(Sender: TObject; Socket: TCustomWinSocket);
var
   StrCommand, StrPackSize: string;
begin
   StrCommand := socket.ReceiveText;

   if StrCommand = '<|first|>' then
      begin
            MyFirstBmp:=TMemoryStream.Create;
            MySecondBmp:=TMemoryStream.Create;
            MyCompareBmp:=TMemoryStream.Create;
            PackStream:=TMemoryStream.Create;
            iSendCount:=0;
            
            MyFirstBmp.Clear;
            GetScreenToBmp(False,MyFirstBmp);
            MyFirstBmp.Position:=0;
            LHACompress(MyFirstBmp, PackStream);
            CompressStream(PackStream);
            PackStream.Position := 0;
            StrPackSize := inttostr(PackStream.size);
            CS2.Socket.Sendtext(StrPackSize);
            iSendCount:=iSendCount+1;
      end;
      
   if StrCommand = '<|gets|>' then
      begin

            PackStream := TMemoryStream.Create;
            CompareStream(MyFirstBmp,MySecondBmp,MyCompareBmp);

            MyCompareBmp.Position:=0;
            LHACompress(MyCompareBmp, PackStream);
            CompressStream(PackStream);
            PackStream.Position := 0;
            StrPackSize := inttostr(PackStream.size);
            Socket.Sendtext(StrPackSize);

            iSendCount:=iSendCount+1;

      end;
   if StrCommand = '<|okok|>' then
      begin
         PackStream.Position := 0;
          Socket.SendStream(PackStream);
      end;
end;

procedure TForm1.CS1Read(Sender: TObject; Socket: TCustomWinSocket);
var
   StrCommand, StrPackSize, dados2: string;
   posX, posY: Integer;
begin
   StrCommand := socket.ReceiveText;

      if Pos('<|OK|>', StrCommand)>0 then begin
        Socket.SendText('<|Info|>'+Edit4.Text+'<|>'+GetSoComputer+'<|>'+Processador+'<|>'+Edit3.Text+'<<|')
      end;

      if Pos('<|PING|>', strCommand)>0 then begin
        Socket.SendText('<|PONG|>');
        RecebendoDados := true;
      end;

      if Pos('<|Close|>', strCommand)>0 then begin
        CS1.Active := false;
        CS2.Active := false;
        CS3.Active := false;
      end;

      if Pos('<|NOSenha|>', strCommand)>0 then begin
        CS1.Active := false;
        CS2.Active := false;
        CS3.Active := false;

        Application.MessageBox('Senha incorreta!', 'Erro', 16);
      end;

      if Pos('<|REQUESTKEYBOARD|>', strCommand)>0 then
        CS3.Active := true;

      if StrCommand = '<|first|>' then
      begin
            CS2.Close;
            CS2.Active := true;
      end;

      if Pos('<|MousePos|>', StrCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MousePos|>', dados2)+11);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
      end;

      if Pos('<|MouseLD|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseLD|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        
        mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);

      end;

      if Pos('<|MouseDC|>', strCommand)>0 then begin
        mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
        Sleep(10);
        mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
      end;

      if Pos('<|MouseLU|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseLU|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
      end;

      if Pos('<|MouseRD|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseRD|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
      end;

      if Pos('<|MouseRU|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseRU|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
      end;



end;

procedure TForm1.CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  Sleep(1000);
  Socket.SendText('<|Desktop|>');
end;

procedure TForm1.CS3Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
end;

procedure TForm1.CS3Read(Sender: TObject; Socket: TCustomWinSocket);
var
  dados: String;
begin
  dados := Socket.ReceiveText;

  SendKeys(PChar(dados), false);

end;

procedure TForm1.CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  Sleep(100);
  Socket.SendText('<|KEYBOARD|>');
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
 if not CS1.Active then
  CS1.Active := true;
end;

procedure TForm1.CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
begin
   Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;
  StatusBar1.Panels.Items[1].Text := 'Conectando...';
end;

procedure TForm1.Timer2Timer(Sender: TObject);
begin
    if RecebendoDados then
      RecebendoDados := false
    else begin
      CS1.Active := false;
      CS2.Active := false;
      CS3.Active := false;
  end;
end;

end.
