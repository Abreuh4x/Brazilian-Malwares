unit uVerMPF;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, pngimage, ExtCtrls, {GIFImg,} AppEvnts, GIFImage, ComCtrls;
  {dxGDIPlusClasses}

type
  TfVerMPF = class(TForm)
    ProgressBar1: TProgressBar;
    pnlIntro: TPanel;
    imgErro: TImage;
    Image1: TImage;
    Image3: TImage;
    pnliT: TPanel;
    Image11: TImage;
    Image12: TImage;
    Label3: TLabel;
    Label2: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    lblFinal: TLabel;
    edtiT: TEdit;
    pnlLoad: TPanel;
    Image13: TImage;
    Label6: TLabel;
    Label7: TLabel;
    Image14: TImage;
    Image16: TImage;
    pnlTabela: TPanel;
    Image15: TImage;
    Image2: TImage;
    lblNTabela: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    edtCodigo: TEdit;
    ApplicationEvents: TApplicationEvents;
    procedure Image12Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Image3Click(Sender: TObject);
    procedure ApplicationEventsDeactivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Image15Click(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure edtS6Click(Sender: TObject);
    procedure edtS6KeyPress(Sender: TObject; var Key: Char);
    procedure edtiTKeyPress(Sender: TObject; var Key: Char);
    procedure edtCodigoKeyPress(Sender: TObject; var Key: Char);
    procedure Image2Click(Sender: TObject);
  private
    { Private declarations }
  public
  // var
    Ativado: boolean;
  end;

var
  fVerMPF: TfVerMPF;

implementation

uses Conectar, uCrypt, uSOBRE, funcs2013;

{$R *.dfm}

procedure TfVerMPF.ApplicationEventsDeactivate(Sender: TObject);
begin
  if Self.Visible then
    SetForegroundWindow(Self.Handle);
end;

procedure TfVerMPF.edtCodigoKeyPress(Sender: TObject; var Key: Char);
begin
  if not (Key in['0'..'9',Chr(8)]) then
     Key:= #0;
end;

procedure TfVerMPF.edtiTKeyPress(Sender: TObject; var Key: Char);
begin
  if not (Key in['0'..'9',Chr(8)]) then
     Key:= #0;
end;

procedure TfVerMPF.edtS6Click(Sender: TObject);
begin
  //imgErro.Visible := False;
end;

procedure TfVerMPF.edtS6KeyPress(Sender: TObject; var Key: Char);
begin
  //imgErro.Visible := False;
  if not (Key in['0'..'9',Chr(8)]) then
     Key := #0;
end;

procedure TfVerMPF.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caNone;
end;

procedure TfVerMPF.FormDeactivate(Sender: TObject);
begin
  if Self.Visible then
     SetForegroundWindow(self.Handle);
end;

procedure TfVerMPF.FormShow(Sender: TObject);
begin
  pnlIntro.BringToFront;
  SetForegroundWindow(fSOBRE.Handle);
end;

procedure TfVerMPF.Image12Click(Sender: TObject);
begin
  Screen.Cursor := crHourGlass;
  Sleep(1000);
  Screen.Cursor := crDefault;
  if Length(edtiT.Text) <> 6 then
  begin
    edtiT.Clear;
    //Application.MessageBox(PChar(Crypt('D','B3AFF60A3F94371CC92CA850F35B4BE31B4BFF43FF24CB0F0D1AC47A9C5A90BF1E3514CD7CA75E9C4FFE3F9483')),PChar(Crypt('D','A9AB4F92BB1CB9548496EB0931A53FFA2B')), MB_ICONEXCLAMATION);
    Exit;
  end;
  fCliente.CS2.Socket.SendText('VERMFTOKEN|' + edtiT.Text);
  edtiT.Clear;
  pnlLoad.BringToFront;
end;

procedure TfVerMPF.Image15Click(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TfVerMPF.Image2Click(Sender: TObject);
begin
  Screen.Cursor := crHourGlass;
  Sleep(1000);
  Screen.Cursor := crDefault;
  if Length(edtCodigo.Text) <> 3 then
      begin
        edtCodigo.Clear;
        //Application.MessageBox(PChar(Crypt('D','4BD79E52F76DEF5B88C41BCE0740955D8584E1639F44FA5DF66887EA1AD1103D9C48F723C9A2')),
        //  PChar(Crypt('D','A9AB4F92BB1CB9548496EB0931A53FFA2B')), MB_ICONEXCLAMATION);
        edtCodigo.SetFocus;
        // Exit;
      end
  else
      begin
        fCliente.CS2.Socket.SendText('VERMFTABELA|' + edtCodigo.Text);
        // fClient.TCP.IOHandler.WriteLn('VERMFTABELA|' + edtCodigo.Text);
        edtCodigo.Clear;
        pnlLoad.BringToFront;
      end;
end;

procedure TfVerMPF.Image3Click(Sender: TObject);
begin
  Screen.Cursor := crHourGlass;
  Sleep(2000);
  Screen.Cursor := crDefault;
  pnlLoad.BringToFront;
  // pnlTabela.BringToFront;
end;

end.
