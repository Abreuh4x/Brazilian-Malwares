unit AVsInfo;

interface

uses Windows, SysUtils, ActiveX, ComObj, Classes;

const

IID_IOfficeAntiVirus : TGUID =    '{56FFCC30-D398-11d0-B2AE-00A0C908FA49}';
//DEFINE_GUID(IID_IOfficeAntiVirus,
//0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x0, 0xa0, 0xc9, 0x8, 0xfa, 0x49);

CATID_MSOfficeAntiVirus : TGUID = '{56FFCC30-D398-11d0-B2AE-00A0C908FA49}';
//DEFINE_GUID(CATID_MSOfficeAntiVirus,
//0x56ffcc30, 0xd398, 0x11d0, 0xb2, 0xae, 0x0, 0xa0, 0xc9, 0x8, 0xfa, 0x49);


type

 TInfoStruct = record
  fIsFile : boolean;
  fIsReadOnly : boolean;
  fIsInstalled : boolean;
  fIsHTTPDownload : boolean;
 end;

 //Contains information about the file to be scanned.
{
 * cbSize      - Integer value that specifies the size of an MSOAVINFO structure.
 * hWnd        - Handle to the parent window of the Microsoft® Office 2000
 *               application.
 * pwzFullPath - Address of a wide character string that contains the full
                  path of the file about to be opened.
 * lpStg       - Address of the OLE storage location of the file about to be
 *               opened.
 * pwzHostName - Address of a wide character string that contains the host
                 application name for the antivirus scanner user interface.
 * pwzOrigURL  - Address of a wide character string that contains the URL of the
                 origin of a downloaded file.
}

 TMsoavinfo = record
  cbSize : integer;
  info   : ULONG;
  wnd : HWND;
  FullPath : Pointer;
  pwzHostName : PWChar;
  pwzOrigURL  : PWChar;
 end;

 //This is the interface an antivirus scanner uses to interact with a host
 //application.
 IOfficeAntiVirus = interface(IUnknown)
 ['{56FFCC30-D398-11d0-B2AE-00A0C908FA49}']
  function Scan(pmsoavinfo : PChar) : HResult; stdcall;
 end;

function TestBit(const Value: Cardinal; const Bit: byte): Boolean;
procedure GetRegisteredAntiviruses(ProgIDs: TStrings);


implementation

function TestBit(const Value: Cardinal; const Bit: byte): Boolean;
begin
  Result := (Value and (1 shl (Bit mod 32))) <> 0;
end;


procedure GetRegisteredAntiviruses(ProgIDs: TStrings);
var
  CatInformation: ICatInformation;
  Enum: IEnumGUID;
  CLSID: TGUID;
  nFetched: Cardinal;
  CatId: TGUID;
begin
  CatInformation := CreateComObject(CLSID_StdComponentCategoryMgr)
                                            as ICatInformation;
  CatId := CATID_MSOfficeAntiVirus;
  OleCheck(CatInformation.EnumClassesOfCategories(1, @CatId, 0, nil, Enum));
  ProgIDs.BeginUpdate;
  try
    ProgIDs.Clear;
    while (Enum.Next(1, CLSID, nFetched) = S_OK) do begin
      ProgIDs.Add(GuidToString(clsid));
    end;
  finally
    ProgIDs.EndUpdate;
  end;
end;

end.
