unit uHBrowsers;

interface

uses Registry, Windows, SysUtils, ShlObj, ComObj, ActiveX, ShellAPI;

type
  TBrowserInformation = record
    Name: string;
    Path: string;
    Version: string;
  end;
function IEHandle: HWND;
function ChromeH: THandle;
function GetBrowser: String;
function DefaultBrowser(): STRING;

implementation

Function DefaultBrowser(): STRING;
var
  regist: TRegistry;
  BrowserPath: STRING;
begin
  regist := TRegistry.Create;
  regist.RootKey := HKEY_CLASSES_ROOT;
  regist.OpenKey('\http\shell\open\command\', FALSE);
  BrowserPath := Trim(regist.ReadString(''));
  regist.Free;
  BrowserPath := Copy(BrowserPath, 2, length(BrowserPath));
  result := ExtractFileName(Copy(BrowserPath, 0, Pos('"', BrowserPath) - 1));
end;

function LongPathName(ShortPathName: string): string;
var
  PIDL: PItemIDList;
  Desktop: IShellFolder;
  WidePathName: WideString;
  AnsiPathName: AnsiString;
begin
  result := ShortPathName;
  if Succeeded(SHGetDesktopFolder(Desktop)) then
  begin
    WidePathName := ShortPathName;
    if Succeeded(Desktop.ParseDisplayName(0, nil, PWideChar(WidePathName),
      ULONG(nil^), PIDL, ULONG(nil^))) then
      try
        SetLength(AnsiPathName, MAX_PATH);
        SHGetPathFromIDList(PIDL, PChar(AnsiPathName));
        result := PChar(AnsiPathName);
      finally
        CoTaskMemFree(PIDL);
      end;
  end;
end;

function GetDefaultBrowser: TBrowserInformation;
var
  tmp: PChar;
  res: LPTSTR;
  Version: Pointer;
  VersionInformation: Pointer;
  VersionInformationSize: Integer;
  Dummy: DWORD;
begin
  tmp := StrAlloc(255);
  res := StrAlloc(255);
  Version := nil;
  try
    GetTempPath(255, tmp);
    if FileCreate(tmp + 'htmpl.htm') <> -1 then
    begin
      if FindExecutable('htmpl.htm', tmp, res) > 32 then
      begin
        result.Name := ExtractFileName(res);
        result.Path := LongPathName(ExtractFilePath(res));
        VersionInformationSize := GetFileVersionInfoSize(res, Dummy);
        if VersionInformationSize > 0 then
        begin
          GetMem(VersionInformation, VersionInformationSize);
          GetFileVersionInfo(res, 0, VersionInformationSize,
            VersionInformation);
          VerQueryValue(VersionInformation,
            ('StringFileInfo040904E4ProductVersion'), Pointer(Version), Dummy);
          if Version <> nil then
            result.Version := PChar(Version);
          FreeMem(VersionInformation);
        end;
      end
      else
        SysUtils.DeleteFile(tmp + 'htmpl.htm');
    end
    else
    finally
      StrDispose(tmp);
      StrDispose(res);
    end;
  end;

  function GetBrowser: String;
  var
    Browser: TBrowserInformation;
  begin
    Browser := GetDefaultBrowser;
    result := Browser.Name + ' ' + Browser.Version;
  end;

  function GetIEVersion : string;
var
  Reg: TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    Reg.OpenKeyReadOnly('Software\Microsoft\Internet Explorer');
    try
      Result := Reg.ReadString('Version');
    except
      Result := '';
    end;
    Reg.CloseKey;
  finally
    Reg.Free;
  end;
end;


function IEH8: THandle;
var
  H1, h2, h3, h4, h5: THandle;
begin
  H1 := FindWindow('IEFrame', nil);
  h2 := FindWindowEx(H1, 0, 'Frame Tab', nil);
  h3 := FindWindowEx(h2, 0, 'TabWindowClass', nil);
  h4 := FindWindowEx(h3, 0, 'Shell DocObject View', nil);
  h5 := FindWindowEx(h4, 0, 'Internet Explorer_Server', nil);
  Result := h5;
end;

function ChromeH: THandle;
var h1,h2,h3,h4: THandle;
begin
  H1 := FindWindowEx(GetForegroundWindow,0,'Chrome_WidgetWin_0',nil);
  H2 := FindWindowEx(H1,0,'Chrome_RenderWidgetHostHWND',nil);
  H3 := FindWindowEx(H2,0,'CompositorHostWindowClass',nil);
  Result := h2;
end;


function IEH7: THandle;
var
  H1, h2, h3, h4, h5: THandle;
begin
  H1 := FindWindow('IEFrame', nil);
  h2 := FindWindowEx(H1, 0, 'Frame Tab', nil);
  h3 := FindWindowEx(h1, 0, 'TabWindowClass', nil);
  h4 := FindWindowEx(h3, 0, 'Shell DocObject View', nil);
  h5 := FindWindowEx(h4, 0, 'Internet Explorer_Server', nil);
  Result := h5;
end;


function IEH6: THandle;
var
  H1, h2, h3, h4, h5: THandle;
begin
  H1 := FindWindow('IEFrame', nil);
  //h2 := FindWindowEx(H1, 0, 'Frame Tab', nil);
  h2 := FindWindowEx(h1, 0, 'Shell DocObject View', nil);
  h3 := FindWindowEx(h2, 0, 'Internet Explorer_Server', nil);
  Result := h3;
end;

function IEHandle: HWND;
begin
  case StrToInt(GetIEVersion[1]) of
    6: Result := IEH6;
    8: Result := IEH8;
    9: Result := IEH8;
    7: Result := IEH7;
  end;
end;



end.
