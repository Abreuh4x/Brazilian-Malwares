unit Unit12;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ScktComp, ComCtrls, StreamManager, ZLibEx, StdCtrls,
  JvComponentBase, JvThread, JvExControls, JvAnimatedImage, JvGIFCtrl;

type
  TRemoto12 = class(TThread)
    procedure Execute; override;
  public
    Socket: TCustomWinSocket;
  private
end;

type
  TForm12 = class(TForm)
    Image1: TImage;
    Timer1: TTimer;
    JvGIFAnimator1: TJvGIFAnimator;
    Label1: TLabel;
    Timer2: TTimer;
    procedure Timer1Timer(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Timer2Timer(Sender: TObject);
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
  private
    { Private declarations }
  public
    { Public declarations }
   ResX, ResY  : Integer;
   Socket      : TCustomWinSocket;
   Socket2     : TCustomWinSocket;
   Remoto12    : TRemoto12;

  end;

var
  Form12: TForm12;


implementation

uses
 Principal, Desktop_Remoto;

{$R *.dfm}

function DeCompressStream(SrcStream: TMemoryStream):boolean;
var
  InputStream,OutputStream :TMemoryStream;
  inbuffer,outbuffer :Pointer;
  count,outcount :longint;
begin
  result := false;
  if not assigned(SrcStream) then exit;

  InputStream := TMemoryStream.Create;
  OutputStream := TMemoryStream.Create;
  try
    InputStream.LoadFromStream(SrcStream);
    count := inputstream.Size;
    getmem(inbuffer,count);
    Inputstream.ReadBuffer(inbuffer^,count);
    zdecompress(inbuffer,count,outbuffer,outcount);
    outputstream.Write(outbuffer^,outcount);
    SrcStream.Clear;
    SrcStream.LoadFromStream(OutputStream);
    result :=true;
  finally
    InputStream.Free;
    OutputStream.Free;
    FreeMem(inbuffer, count);
    FreeMem(outbuffer, outcount);
  end;
end;



procedure TRemoto12.Execute;
var
  i: Integer;
  L: TListItem;
  bmp: TBitmap;
  Stream: TMemoryStream;

  MyBuffer: array [0 .. 10000] of byte;
  MyReceviceLength: Integer;
  S, dados2: String;

  MyFirstBmp, MySecondBmp, MyCompareBmp, UnPackStream,
  MyTempStream: TMemoryStream;
  MySize: longint;
  recebendo: boolean;

begin
 MyFirstBmp := TMemoryStream.Create;
 UnpackStream := TMemoryStream.Create;
 MyTempStream := TMemoryStream.Create;
 MySecondBmp := TMemoryStream.Create;
 MyCompareBmp := TMemoryStream.Create;
 UnPackStream := TMemoryStream.Create;

  if Form1.LV1.Visible = True then
 begin
  for i := 0 to Form1.LV1.Items.Count - 1 do
  begin
   if Form1.LV1.Items.Item[i].SubItems.Objects[1] = TCustomWinSocket(Socket) then
      L := Form1.LV1.Items.Item[i];
  end;
 end;

 While not Terminated and Socket.Connected do
 begin
   if Socket.ReceiveLength > 0 then
   begin
    S := Socket.ReceiveText;
     if MySize = 0 then
     begin
       if Pos('<|PcHunterTTT|>', s) > 0 then
       begin
        dados2 := s;
        Delete(dados2, 1, Pos('<|PcHunterTTT|>', dados2) + 14);
        dados2 := Copy(dados2, 1, Pos('<<|', dados2)-1);
        MySize := StrToInt(dados2);
        recebendo := true;
        dados2 := '';
        Socket.SendText('<|okok|>');
       end;
     end
     else
     begin
      dados2 := dados2 + s;
      (L.SubItems.Objects[3] as TForm12).JvGIFAnimator1.Visible := False;
      (L.SubItems.Objects[3] as TForm12).Label1.Visible := False;
       if Length(dados2) >= MySize then
       begin
        MyTempStream.Write(AnsiString(dados2)[1], MySize);
        MyTempStream.Position := 0;
        UnPackStream.Clear;

        UnPackStream.LoadFromStream(MyTempStream);
        DecompressStream(UnPackStream);
        UnPackStream.Position := 0;
         if MyFirstBmp.Size = 0 then
         begin
          MyFirstBmp.CopyFrom(UnPackStream, 0);
          MyFirstBmp.Position := 0;
          (L.SubItems.Objects[3] as TForm12).Image1.Picture.Bitmap.LoadFromStream(MyFirstBmp);
          (L.SubItems.Objects[3] as TForm12).Width  := (L.SubItems.Objects[3] as TForm12).Image1.Width+30;
          (L.SubItems.Objects[3] as TForm12).Height := (L.SubItems.Objects[3] as TForm12).Image1.Height+100;
          (L.SubItems.Objects[3] as TForm12).ResX   := (L.SubItems.Objects[3] as TForm12).Image1.Picture.Width;
          (L.SubItems.Objects[3] as TForm12).ResY   := (L.SubItems.Objects[3] as TForm12).Image1.Picture.Height;
         end
         else
         begin
          MyCompareBmp.Clear;
          MySecondBmp.Clear;
          MyCompareBmp.CopyFrom(UnpackStream, 0);
          ResumeStream(MyFirstBmp, MySecondBmp, MyCompareBmp);
           if L.SubItems.Objects[3] <> nil then
             (L.SubItems.Objects[3] as TForm12).Image1.Picture.Bitmap.LoadFromStream(MySecondBmp);
         end;

           MySize := 0;
           UnPackStream.Clear;
           MyTempStream.Clear;
           MySecondBMP.Clear;
           MyCompareBmp.Clear;
           if ((L.SubItems.Objects[3] <> nil) and (L.SubItems.Objects[3] as TForm12).Visible) then
               Socket.SendText('<|PcHunterSend|>');
       end;
     end;
   end;
   Sleep(10); // evita a CPU ficar em 100%
 end;
end;


procedure TForm12.FormClose(Sender: TObject; var Action: TCloseAction);
var
 L : TListItem;
begin
 try
  L := Form1.LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then begin
    L.SubItems.Objects[1] := nil;
    L.SubItems.Objects[3] := nil;
  end;
  Remoto12.Terminate;
 finally
  Timer1.Enabled := False;
  Socket2.SendText('<|PcHunteroFF|>');
  Destroy;
 end;
end;

procedure TForm12.Image1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
 if Button = mbRight then
 begin
  Socket2.SendText('<|PcHunterMouse|>' + '2' + '<|>' + intToStr(X)+ '<|>' + intToStr(Y) + '<<|');
 end else
 begin
  if Button = mbLeft then
  begin
   Socket2.SendText('<|PcHunterMouse|>' + '1' + '<|>' + intToStr(X)+ '<|>' + intToStr(Y) + '<<|');
  end;
 end;
end;

procedure TForm12.Timer1Timer(Sender: TObject);
var
 S : string;
begin
 if (Active) and (Socket.Connected) then
 begin
  if Socket.ReceiveLength > 0 then
  begin
    S := Socket.ReceiveText;
     if Pos('PcHunterThreadOpen', s)> 0 then
      begin
       Timer1.Enabled := False;
       Remoto12 := TRemoto12.Create(True);
       Remoto12.Socket := Socket;
       Remoto12.Resume;
      end;
  end else
  begin
   Socket.SendText('<|PcHunterThread|>');
  end;
 end;
end;



procedure TForm12.Timer2Timer(Sender: TObject);
var
 L : TListItem;
begin
 try
  L := Form1.LV1.FindCaption(0, intToStr(Socket.Handle), false, true, false);
  if L <> nil then begin
    L.SubItems.Objects[1] := nil;
    L.SubItems.Objects[3] := nil;
  end;
  Remoto12.Terminate;
 finally
  Timer1.Enabled := False;
  Timer2.Enabled := False;
  Socket2.SendText('<|PcHunteroFF|>');
  Destroy;
 end;
end;

end.
